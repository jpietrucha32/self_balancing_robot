
Time_interrupts.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009370  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000544  08009500  08009500  00019500  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a44  08009a44  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08009a44  08009a44  00019a44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009a4c  08009a4c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a4c  08009a4c  00019a4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a50  08009a50  00019a50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08009a54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000224  200001dc  08009c30  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000400  08009c30  00020400  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014944  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026db  00000000  00000000  00034b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012f8  00000000  00000000  00037230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001200  00000000  00000000  00038528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021f0b  00000000  00000000  00039728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015659  00000000  00000000  0005b633  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ce017  00000000  00000000  00070c8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013eca3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006254  00000000  00000000  0013ecf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080094e8 	.word	0x080094e8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	080094e8 	.word	0x080094e8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000f54:	1d39      	adds	r1, r7, #4
 8000f56:	f04f 33ff 	mov.w	r3, #4294967295
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	4803      	ldr	r0, [pc, #12]	; (8000f6c <__io_putchar+0x20>)
 8000f5e:	f004 ff01 	bl	8005d64 <HAL_UART_Transmit>
    return 1;
 8000f62:	2301      	movs	r3, #1
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	20000330 	.word	0x20000330

08000f70 <set_stepper_L_motor_speed>:

void set_stepper_L_motor_speed(float rpm){
 8000f70:	b480      	push	{r7}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	ed87 0a01 	vstr	s0, [r7, #4]
	if(rpm > 0)
 8000f7a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f7e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f86:	dd2b      	ble.n	8000fe0 <set_stepper_L_motor_speed+0x70>
		{
			uint16_t arr_val = (uint16_t)(XT_TIM_CLK / (((XT_TIM_PSC+1) * rpm * STEPS_PER_REV * MICROSTEP_NUM) / 60) - 1);
 8000f88:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f8c:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8000ff4 <set_stepper_L_motor_speed+0x84>
 8000f90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f94:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8000ff8 <set_stepper_L_motor_speed+0x88>
 8000f98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f9c:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8000fa0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fa4:	eddf 6a15 	vldr	s13, [pc, #84]	; 8000ffc <set_stepper_L_motor_speed+0x8c>
 8000fa8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000fac:	eddf 6a14 	vldr	s13, [pc, #80]	; 8001000 <set_stepper_L_motor_speed+0x90>
 8000fb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fb4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000fb8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000fbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fc0:	ee17 3a90 	vmov	r3, s15
 8000fc4:	81fb      	strh	r3, [r7, #14]
			__HAL_TIM_SET_AUTORELOAD(&PULSE_TIM_16, arr_val);
 8000fc6:	4b0f      	ldr	r3, [pc, #60]	; (8001004 <set_stepper_L_motor_speed+0x94>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	89fa      	ldrh	r2, [r7, #14]
 8000fcc:	62da      	str	r2, [r3, #44]	; 0x2c
 8000fce:	89fb      	ldrh	r3, [r7, #14]
 8000fd0:	4a0c      	ldr	r2, [pc, #48]	; (8001004 <set_stepper_L_motor_speed+0x94>)
 8000fd2:	60d3      	str	r3, [r2, #12]
			__HAL_TIM_SET_COMPARE(&PULSE_TIM_16, PULSE_TIM_CH1, arr_val-1);
 8000fd4:	89fb      	ldrh	r3, [r7, #14]
 8000fd6:	1e5a      	subs	r2, r3, #1
 8000fd8:	4b0a      	ldr	r3, [pc, #40]	; (8001004 <set_stepper_L_motor_speed+0x94>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	635a      	str	r2, [r3, #52]	; 0x34
		}
		else
		{
			__HAL_TIM_SET_COMPARE(&PULSE_TIM_16, PULSE_TIM_CH1, 0);
		}
}
 8000fde:	e003      	b.n	8000fe8 <set_stepper_L_motor_speed+0x78>
			__HAL_TIM_SET_COMPARE(&PULSE_TIM_16, PULSE_TIM_CH1, 0);
 8000fe0:	4b08      	ldr	r3, [pc, #32]	; (8001004 <set_stepper_L_motor_speed+0x94>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000fe8:	bf00      	nop
 8000fea:	3714      	adds	r7, #20
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	42a00000 	.word	0x42a00000
 8000ff8:	43480000 	.word	0x43480000
 8000ffc:	42700000 	.word	0x42700000
 8001000:	4c989680 	.word	0x4c989680
 8001004:	200002e4 	.word	0x200002e4

08001008 <set_stepper_R_motor_speed>:

void set_stepper_R_motor_speed(float rpm){
 8001008:	b480      	push	{r7}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
 800100e:	ed87 0a01 	vstr	s0, [r7, #4]
	if(rpm > 0)
 8001012:	edd7 7a01 	vldr	s15, [r7, #4]
 8001016:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800101a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800101e:	dd2b      	ble.n	8001078 <set_stepper_R_motor_speed+0x70>
		{
			uint16_t arr_val = (uint16_t)(XT_TIM_CLK / (((XT_TIM_PSC+1) * rpm * STEPS_PER_REV * MICROSTEP_NUM) / 60) - 1);
 8001020:	edd7 7a01 	vldr	s15, [r7, #4]
 8001024:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800108c <set_stepper_R_motor_speed+0x84>
 8001028:	ee67 7a87 	vmul.f32	s15, s15, s14
 800102c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001090 <set_stepper_R_motor_speed+0x88>
 8001030:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001034:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8001038:	ee67 7a87 	vmul.f32	s15, s15, s14
 800103c:	eddf 6a15 	vldr	s13, [pc, #84]	; 8001094 <set_stepper_R_motor_speed+0x8c>
 8001040:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001044:	eddf 6a14 	vldr	s13, [pc, #80]	; 8001098 <set_stepper_R_motor_speed+0x90>
 8001048:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800104c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001050:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001054:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001058:	ee17 3a90 	vmov	r3, s15
 800105c:	81fb      	strh	r3, [r7, #14]
			__HAL_TIM_SET_AUTORELOAD(&PULSE_TIM_1, arr_val);
 800105e:	4b0f      	ldr	r3, [pc, #60]	; (800109c <set_stepper_R_motor_speed+0x94>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	89fa      	ldrh	r2, [r7, #14]
 8001064:	62da      	str	r2, [r3, #44]	; 0x2c
 8001066:	89fb      	ldrh	r3, [r7, #14]
 8001068:	4a0c      	ldr	r2, [pc, #48]	; (800109c <set_stepper_R_motor_speed+0x94>)
 800106a:	60d3      	str	r3, [r2, #12]
			__HAL_TIM_SET_COMPARE(&PULSE_TIM_1, PULSE_TIM_CH3, arr_val-1);
 800106c:	89fb      	ldrh	r3, [r7, #14]
 800106e:	1e5a      	subs	r2, r3, #1
 8001070:	4b0a      	ldr	r3, [pc, #40]	; (800109c <set_stepper_R_motor_speed+0x94>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	63da      	str	r2, [r3, #60]	; 0x3c
		}
		else
		{
			__HAL_TIM_SET_COMPARE(&PULSE_TIM_1, PULSE_TIM_CH3, 0);
		}
}
 8001076:	e003      	b.n	8001080 <set_stepper_R_motor_speed+0x78>
			__HAL_TIM_SET_COMPARE(&PULSE_TIM_1, PULSE_TIM_CH3, 0);
 8001078:	4b08      	ldr	r3, [pc, #32]	; (800109c <set_stepper_R_motor_speed+0x94>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2200      	movs	r2, #0
 800107e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001080:	bf00      	nop
 8001082:	3714      	adds	r7, #20
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	42a00000 	.word	0x42a00000
 8001090:	43480000 	.word	0x43480000
 8001094:	42700000 	.word	0x42700000
 8001098:	4c989680 	.word	0x4c989680
 800109c:	2000024c 	.word	0x2000024c

080010a0 <lsm_read_reg>:

uint8_t lsm_read_reg(uint8_t reg, uint8_t dev)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b088      	sub	sp, #32
 80010a4:	af04      	add	r7, sp, #16
 80010a6:	4603      	mov	r3, r0
 80010a8:	460a      	mov	r2, r1
 80010aa:	71fb      	strb	r3, [r7, #7]
 80010ac:	4613      	mov	r3, r2
 80010ae:	71bb      	strb	r3, [r7, #6]
	uint8_t value = 0;
 80010b0:	2300      	movs	r3, #0
 80010b2:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Read(&hi2c1, dev, reg, 1, &value, sizeof(value), HAL_MAX_DELAY);
 80010b4:	79bb      	ldrb	r3, [r7, #6]
 80010b6:	b299      	uxth	r1, r3
 80010b8:	79fb      	ldrb	r3, [r7, #7]
 80010ba:	b29a      	uxth	r2, r3
 80010bc:	f04f 33ff 	mov.w	r3, #4294967295
 80010c0:	9302      	str	r3, [sp, #8]
 80010c2:	2301      	movs	r3, #1
 80010c4:	9301      	str	r3, [sp, #4]
 80010c6:	f107 030f 	add.w	r3, r7, #15
 80010ca:	9300      	str	r3, [sp, #0]
 80010cc:	2301      	movs	r3, #1
 80010ce:	4804      	ldr	r0, [pc, #16]	; (80010e0 <lsm_read_reg+0x40>)
 80010d0:	f001 fe02 	bl	8002cd8 <HAL_I2C_Mem_Read>

	return value;
 80010d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3710      	adds	r7, #16
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	200001f8 	.word	0x200001f8

080010e4 <lsm_write_reg>:

void lsm_write_reg(uint8_t reg, uint8_t value, uint8_t dev)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b086      	sub	sp, #24
 80010e8:	af04      	add	r7, sp, #16
 80010ea:	4603      	mov	r3, r0
 80010ec:	71fb      	strb	r3, [r7, #7]
 80010ee:	460b      	mov	r3, r1
 80010f0:	71bb      	strb	r3, [r7, #6]
 80010f2:	4613      	mov	r3, r2
 80010f4:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c1, dev, reg, 1, &value, sizeof(value), HAL_MAX_DELAY);
 80010f6:	797b      	ldrb	r3, [r7, #5]
 80010f8:	b299      	uxth	r1, r3
 80010fa:	79fb      	ldrb	r3, [r7, #7]
 80010fc:	b29a      	uxth	r2, r3
 80010fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001102:	9302      	str	r3, [sp, #8]
 8001104:	2301      	movs	r3, #1
 8001106:	9301      	str	r3, [sp, #4]
 8001108:	1dbb      	adds	r3, r7, #6
 800110a:	9300      	str	r3, [sp, #0]
 800110c:	2301      	movs	r3, #1
 800110e:	4803      	ldr	r0, [pc, #12]	; (800111c <lsm_write_reg+0x38>)
 8001110:	f001 fcce 	bl	8002ab0 <HAL_I2C_Mem_Write>
}
 8001114:	bf00      	nop
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	200001f8 	.word	0x200001f8

08001120 <lsm_read_value>:

int16_t lsm_read_value(uint8_t reg, uint8_t dev)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b088      	sub	sp, #32
 8001124:	af04      	add	r7, sp, #16
 8001126:	4603      	mov	r3, r0
 8001128:	460a      	mov	r2, r1
 800112a:	71fb      	strb	r3, [r7, #7]
 800112c:	4613      	mov	r3, r2
 800112e:	71bb      	strb	r3, [r7, #6]
	int16_t value = 0;
 8001130:	2300      	movs	r3, #0
 8001132:	81fb      	strh	r3, [r7, #14]

	HAL_I2C_Mem_Read(&hi2c1, dev, reg | 0x80, 1, (uint8_t*)&value, sizeof(value), HAL_MAX_DELAY);
 8001134:	79bb      	ldrb	r3, [r7, #6]
 8001136:	b299      	uxth	r1, r3
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800113e:	b2db      	uxtb	r3, r3
 8001140:	b29a      	uxth	r2, r3
 8001142:	f04f 33ff 	mov.w	r3, #4294967295
 8001146:	9302      	str	r3, [sp, #8]
 8001148:	2302      	movs	r3, #2
 800114a:	9301      	str	r3, [sp, #4]
 800114c:	f107 030e 	add.w	r3, r7, #14
 8001150:	9300      	str	r3, [sp, #0]
 8001152:	2301      	movs	r3, #1
 8001154:	4804      	ldr	r0, [pc, #16]	; (8001168 <lsm_read_value+0x48>)
 8001156:	f001 fdbf 	bl	8002cd8 <HAL_I2C_Mem_Read>

	return value;
 800115a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800115e:	4618      	mov	r0, r3
 8001160:	3710      	adds	r7, #16
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	200001f8 	.word	0x200001f8

0800116c <LSM303D_init>:

int LSM303D_init(){
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
	printf("Wyszukiwanie akcelerometru...\r\n");
 8001172:	480d      	ldr	r0, [pc, #52]	; (80011a8 <LSM303D_init+0x3c>)
 8001174:	f005 ff88 	bl	8007088 <puts>
	uint8_t who_am_i = lsm_read_reg(0xf,LSM303D_ADDR);
 8001178:	213a      	movs	r1, #58	; 0x3a
 800117a:	200f      	movs	r0, #15
 800117c:	f7ff ff90 	bl	80010a0 <lsm_read_reg>
 8001180:	4603      	mov	r3, r0
 8001182:	71fb      	strb	r3, [r7, #7]
	if (who_am_i == 0x49) {
 8001184:	79fb      	ldrb	r3, [r7, #7]
 8001186:	2b49      	cmp	r3, #73	; 0x49
 8001188:	d104      	bne.n	8001194 <LSM303D_init+0x28>
		printf("Znaleziono akcelerometr LSM303D\r\n");
 800118a:	4808      	ldr	r0, [pc, #32]	; (80011ac <LSM303D_init+0x40>)
 800118c:	f005 ff7c 	bl	8007088 <puts>
		return 1;
 8001190:	2301      	movs	r3, #1
 8001192:	e005      	b.n	80011a0 <LSM303D_init+0x34>
	 }
	else{
		printf("Niepoprawna odpowiedź układu (0x%02X)\r\n", who_am_i);
 8001194:	79fb      	ldrb	r3, [r7, #7]
 8001196:	4619      	mov	r1, r3
 8001198:	4805      	ldr	r0, [pc, #20]	; (80011b0 <LSM303D_init+0x44>)
 800119a:	f005 feef 	bl	8006f7c <iprintf>
		return 0;
 800119e:	2300      	movs	r3, #0
	 }
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	08009500 	.word	0x08009500
 80011ac:	08009520 	.word	0x08009520
 80011b0:	08009544 	.word	0x08009544

080011b4 <L3GD20H_init>:

int L3GD20H_init(){
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
	printf("Wyszukiwanie zyroskopu...\r\n");
 80011ba:	480d      	ldr	r0, [pc, #52]	; (80011f0 <L3GD20H_init+0x3c>)
 80011bc:	f005 ff64 	bl	8007088 <puts>
	uint8_t who_am_i = lsm_read_reg(0xf,L3GD20H_ADDR);
 80011c0:	21d6      	movs	r1, #214	; 0xd6
 80011c2:	200f      	movs	r0, #15
 80011c4:	f7ff ff6c 	bl	80010a0 <lsm_read_reg>
 80011c8:	4603      	mov	r3, r0
 80011ca:	71fb      	strb	r3, [r7, #7]
	if (who_am_i == 0xD7) {
 80011cc:	79fb      	ldrb	r3, [r7, #7]
 80011ce:	2bd7      	cmp	r3, #215	; 0xd7
 80011d0:	d104      	bne.n	80011dc <L3GD20H_init+0x28>
		printf("Znaleziono zyroskop L3GD20H\r\n");
 80011d2:	4808      	ldr	r0, [pc, #32]	; (80011f4 <L3GD20H_init+0x40>)
 80011d4:	f005 ff58 	bl	8007088 <puts>
		return 1;
 80011d8:	2301      	movs	r3, #1
 80011da:	e005      	b.n	80011e8 <L3GD20H_init+0x34>
	 }
	else{
		printf("Niepoprawna odpowiedź układu (0x%02X)\r\n", who_am_i);
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	4619      	mov	r1, r3
 80011e0:	4805      	ldr	r0, [pc, #20]	; (80011f8 <L3GD20H_init+0x44>)
 80011e2:	f005 fecb 	bl	8006f7c <iprintf>
		return 0;
 80011e6:	2300      	movs	r3, #0
	 }
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3708      	adds	r7, #8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	08009570 	.word	0x08009570
 80011f4:	0800958c 	.word	0x0800958c
 80011f8:	08009544 	.word	0x08009544

080011fc <sensors_run_correctly>:

int sensors_run_correctly(){
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
	int LSM303D_status = LSM303D_init();
 8001202:	f7ff ffb3 	bl	800116c <LSM303D_init>
 8001206:	6078      	str	r0, [r7, #4]
	int L3GD20H_status = L3GD20H_init();
 8001208:	f7ff ffd4 	bl	80011b4 <L3GD20H_init>
 800120c:	6038      	str	r0, [r7, #0]
	if(LSM303D_status && L3GD20H_status) return 1;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d004      	beq.n	800121e <sensors_run_correctly+0x22>
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <sensors_run_correctly+0x22>
 800121a:	2301      	movs	r3, #1
 800121c:	e000      	b.n	8001220 <sensors_run_correctly+0x24>
	else return 0;
 800121e:	2300      	movs	r3, #0
}
 8001220:	4618      	mov	r0, r3
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}

08001228 <activate_app>:

void activate_app(){
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
	if(sensors_run_correctly()){
 800122c:	f7ff ffe6 	bl	80011fc <sensors_run_correctly>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d015      	beq.n	8001262 <activate_app+0x3a>
		lsm_write_reg(LSM303D_CTRL1, 0x40|0x07, LSM303D_ADDR);
 8001236:	223a      	movs	r2, #58	; 0x3a
 8001238:	2147      	movs	r1, #71	; 0x47
 800123a:	2020      	movs	r0, #32
 800123c:	f7ff ff52 	bl	80010e4 <lsm_write_reg>
		lsm_write_reg(LSM303D_CTRL1, 0xCF, L3GD20H_ADDR);
 8001240:	22d6      	movs	r2, #214	; 0xd6
 8001242:	21cf      	movs	r1, #207	; 0xcf
 8001244:	2020      	movs	r0, #32
 8001246:	f7ff ff4d 	bl	80010e4 <lsm_write_reg>
		lsm_write_reg(CTRL4, 0x10, L3GD20H_ADDR);
 800124a:	22d6      	movs	r2, #214	; 0xd6
 800124c:	2110      	movs	r1, #16
 800124e:	2023      	movs	r0, #35	; 0x23
 8001250:	f7ff ff48 	bl	80010e4 <lsm_write_reg>
		printf("Start aplikacji...\r\n");
 8001254:	4805      	ldr	r0, [pc, #20]	; (800126c <activate_app+0x44>)
 8001256:	f005 ff17 	bl	8007088 <puts>
		HAL_TIM_Base_Start_IT(&htim6);
 800125a:	4805      	ldr	r0, [pc, #20]	; (8001270 <activate_app+0x48>)
 800125c:	f003 fbdc 	bl	8004a18 <HAL_TIM_Base_Start_IT>
	}
	else printf("Brak poloaczenia z sensorami...\r\n");
}
 8001260:	e002      	b.n	8001268 <activate_app+0x40>
	else printf("Brak poloaczenia z sensorami...\r\n");
 8001262:	4804      	ldr	r0, [pc, #16]	; (8001274 <activate_app+0x4c>)
 8001264:	f005 ff10 	bl	8007088 <puts>
}
 8001268:	bf00      	nop
 800126a:	bd80      	pop	{r7, pc}
 800126c:	080095ac 	.word	0x080095ac
 8001270:	20000298 	.word	0x20000298
 8001274:	080095c0 	.word	0x080095c0

08001278 <calc_acc_tilt>:

float calc_acc_tilt(){
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
	int16_t a_x = lsm_read_value(LSM303D_OUT_X_A, LSM303D_ADDR);
 800127e:	213a      	movs	r1, #58	; 0x3a
 8001280:	2028      	movs	r0, #40	; 0x28
 8001282:	f7ff ff4d 	bl	8001120 <lsm_read_value>
 8001286:	4603      	mov	r3, r0
 8001288:	81fb      	strh	r3, [r7, #14]
 	int16_t a_z = lsm_read_value(LSM303D_OUT_Z_A, LSM303D_ADDR);
 800128a:	213a      	movs	r1, #58	; 0x3a
 800128c:	202c      	movs	r0, #44	; 0x2c
 800128e:	f7ff ff47 	bl	8001120 <lsm_read_value>
 8001292:	4603      	mov	r3, r0
 8001294:	81bb      	strh	r3, [r7, #12]
 	float tilt_a_x = a_x * 2.0f / 32678.0f;
 8001296:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800129a:	ee07 3a90 	vmov	s15, r3
 800129e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012a2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80012a6:	eddf 6a24 	vldr	s13, [pc, #144]	; 8001338 <calc_acc_tilt+0xc0>
 80012aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012ae:	edc7 7a02 	vstr	s15, [r7, #8]
 	float tilt_a_z = a_z * 2.0f / 32678.0f;
 80012b2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80012b6:	ee07 3a90 	vmov	s15, r3
 80012ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012be:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80012c2:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8001338 <calc_acc_tilt+0xc0>
 80012c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012ca:	edc7 7a01 	vstr	s15, [r7, #4]
 	float alpha = atan2f(tilt_a_z, tilt_a_x);
 80012ce:	edd7 0a02 	vldr	s1, [r7, #8]
 80012d2:	ed97 0a01 	vldr	s0, [r7, #4]
 80012d6:	f007 ff89 	bl	80091ec <atan2f>
 80012da:	ed87 0a00 	vstr	s0, [r7]
 	return (alpha * 180.0f / M_PI - 90.0f);
 80012de:	edd7 7a00 	vldr	s15, [r7]
 80012e2:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800133c <calc_acc_tilt+0xc4>
 80012e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012ea:	ee17 0a90 	vmov	r0, s15
 80012ee:	f7ff f92b 	bl	8000548 <__aeabi_f2d>
 80012f2:	a30f      	add	r3, pc, #60	; (adr r3, 8001330 <calc_acc_tilt+0xb8>)
 80012f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f8:	f7ff faa8 	bl	800084c <__aeabi_ddiv>
 80012fc:	4602      	mov	r2, r0
 80012fe:	460b      	mov	r3, r1
 8001300:	4610      	mov	r0, r2
 8001302:	4619      	mov	r1, r3
 8001304:	f04f 0200 	mov.w	r2, #0
 8001308:	4b0d      	ldr	r3, [pc, #52]	; (8001340 <calc_acc_tilt+0xc8>)
 800130a:	f7fe ffbd 	bl	8000288 <__aeabi_dsub>
 800130e:	4602      	mov	r2, r0
 8001310:	460b      	mov	r3, r1
 8001312:	4610      	mov	r0, r2
 8001314:	4619      	mov	r1, r3
 8001316:	f7ff fc47 	bl	8000ba8 <__aeabi_d2f>
 800131a:	4603      	mov	r3, r0
 800131c:	ee07 3a90 	vmov	s15, r3
}
 8001320:	eeb0 0a67 	vmov.f32	s0, s15
 8001324:	3710      	adds	r7, #16
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	f3af 8000 	nop.w
 8001330:	f01b866e 	.word	0xf01b866e
 8001334:	400921f9 	.word	0x400921f9
 8001338:	46ff4c00 	.word	0x46ff4c00
 800133c:	43340000 	.word	0x43340000
 8001340:	40568000 	.word	0x40568000

08001344 <init_Kalman>:
	float bias;
	float rate;
	float P[2][2];
};

void init_Kalman(struct Kalman* kalman){
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
	kalman -> P[0][0] = 0.0f;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f04f 0200 	mov.w	r2, #0
 8001352:	619a      	str	r2, [r3, #24]
	kalman -> P[0][1] = 0.0f;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f04f 0200 	mov.w	r2, #0
 800135a:	61da      	str	r2, [r3, #28]
	kalman -> P[1][0] = 0.0f;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f04f 0200 	mov.w	r2, #0
 8001362:	621a      	str	r2, [r3, #32]
	kalman -> P[1][1] = 0.0f;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	f04f 0200 	mov.w	r2, #0
 800136a:	625a      	str	r2, [r3, #36]	; 0x24

	kalman -> Q_angle = 0.0009f;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	4a0a      	ldr	r2, [pc, #40]	; (8001398 <init_Kalman+0x54>)
 8001370:	601a      	str	r2, [r3, #0]
	kalman -> Q_bias = 0.1f;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a09      	ldr	r2, [pc, #36]	; (800139c <init_Kalman+0x58>)
 8001376:	605a      	str	r2, [r3, #4]
	kalman -> R_measure = 3.0f;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	4a09      	ldr	r2, [pc, #36]	; (80013a0 <init_Kalman+0x5c>)
 800137c:	609a      	str	r2, [r3, #8]

	kalman -> angle = 0.0f;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	f04f 0200 	mov.w	r2, #0
 8001384:	60da      	str	r2, [r3, #12]
	kalman -> bias = 9.0f;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4a06      	ldr	r2, [pc, #24]	; (80013a4 <init_Kalman+0x60>)
 800138a:	611a      	str	r2, [r3, #16]
}
 800138c:	bf00      	nop
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	3a6bedfa 	.word	0x3a6bedfa
 800139c:	3dcccccd 	.word	0x3dcccccd
 80013a0:	40400000 	.word	0x40400000
 80013a4:	41100000 	.word	0x41100000

080013a8 <getAngle>:

float getAngle(struct Kalman *kalman ,float newAngle, float newRate, float dt){
 80013a8:	b480      	push	{r7}
 80013aa:	b08b      	sub	sp, #44	; 0x2c
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	60f8      	str	r0, [r7, #12]
 80013b0:	ed87 0a02 	vstr	s0, [r7, #8]
 80013b4:	edc7 0a01 	vstr	s1, [r7, #4]
 80013b8:	ed87 1a00 	vstr	s2, [r7]
	kalman -> rate = newRate  - kalman -> bias;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	edd3 7a04 	vldr	s15, [r3, #16]
 80013c2:	ed97 7a01 	vldr	s14, [r7, #4]
 80013c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	edc3 7a05 	vstr	s15, [r3, #20]
	kalman -> angle += kalman -> rate * dt;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	ed93 7a03 	vldr	s14, [r3, #12]
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	edd3 6a05 	vldr	s13, [r3, #20]
 80013dc:	edd7 7a00 	vldr	s15, [r7]
 80013e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	edc3 7a03 	vstr	s15, [r3, #12]

	kalman -> P[0][0] += dt * (dt*kalman -> P[1][1] - kalman -> P[0][1] - kalman -> P[1][0] + kalman -> Q_angle);
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	ed93 7a06 	vldr	s14, [r3, #24]
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 80013fa:	edd7 7a00 	vldr	s15, [r7]
 80013fe:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	edd3 7a07 	vldr	s15, [r3, #28]
 8001408:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	edd3 7a08 	vldr	s15, [r3, #32]
 8001412:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	edd3 7a00 	vldr	s15, [r3]
 800141c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001420:	edd7 7a00 	vldr	s15, [r7]
 8001424:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001428:	ee77 7a27 	vadd.f32	s15, s14, s15
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	edc3 7a06 	vstr	s15, [r3, #24]
	kalman -> P[0][1] -= dt * kalman -> P[1][1];
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	ed93 7a07 	vldr	s14, [r3, #28]
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800143e:	edd7 7a00 	vldr	s15, [r7]
 8001442:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001446:	ee77 7a67 	vsub.f32	s15, s14, s15
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	edc3 7a07 	vstr	s15, [r3, #28]
	kalman -> P[1][0] -= dt * kalman -> P[1][1];
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	ed93 7a08 	vldr	s14, [r3, #32]
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800145c:	edd7 7a00 	vldr	s15, [r7]
 8001460:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001464:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	edc3 7a08 	vstr	s15, [r3, #32]
	kalman -> P[1][1] += dt * kalman -> Q_bias;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	edd3 6a01 	vldr	s13, [r3, #4]
 800147a:	edd7 7a00 	vldr	s15, [r7]
 800147e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001482:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	float S = kalman -> P[0][0] + kalman -> R_measure;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	ed93 7a06 	vldr	s14, [r3, #24]
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	edd3 7a02 	vldr	s15, [r3, #8]
 8001498:	ee77 7a27 	vadd.f32	s15, s14, s15
 800149c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	float K[2];
	K[0] = kalman -> P[0][0] / S;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	edd3 6a06 	vldr	s13, [r3, #24]
 80014a6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80014aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014ae:	edc7 7a04 	vstr	s15, [r7, #16]
	K[1] = kalman -> P[1][0] / S;
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	edd3 6a08 	vldr	s13, [r3, #32]
 80014b8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80014bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014c0:	edc7 7a05 	vstr	s15, [r7, #20]

	float y = newAngle - kalman -> angle;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	edd3 7a03 	vldr	s15, [r3, #12]
 80014ca:	ed97 7a02 	vldr	s14, [r7, #8]
 80014ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014d2:	edc7 7a08 	vstr	s15, [r7, #32]
	kalman -> angle += K[0] * y;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	ed93 7a03 	vldr	s14, [r3, #12]
 80014dc:	edd7 6a04 	vldr	s13, [r7, #16]
 80014e0:	edd7 7a08 	vldr	s15, [r7, #32]
 80014e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	edc3 7a03 	vstr	s15, [r3, #12]
	kalman -> bias += K[1] * y;
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	ed93 7a04 	vldr	s14, [r3, #16]
 80014f8:	edd7 6a05 	vldr	s13, [r7, #20]
 80014fc:	edd7 7a08 	vldr	s15, [r7, #32]
 8001500:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001504:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	edc3 7a04 	vstr	s15, [r3, #16]

	float P00_temp = kalman -> P[0][0];
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	699b      	ldr	r3, [r3, #24]
 8001512:	61fb      	str	r3, [r7, #28]
	float P01_temp = kalman -> P[0][1];
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	69db      	ldr	r3, [r3, #28]
 8001518:	61bb      	str	r3, [r7, #24]

	kalman -> P[0][0] -= K[0] * P00_temp;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	ed93 7a06 	vldr	s14, [r3, #24]
 8001520:	edd7 6a04 	vldr	s13, [r7, #16]
 8001524:	edd7 7a07 	vldr	s15, [r7, #28]
 8001528:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800152c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	edc3 7a06 	vstr	s15, [r3, #24]
	kalman -> P[0][1] -= K[0] * P01_temp;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	ed93 7a07 	vldr	s14, [r3, #28]
 800153c:	edd7 6a04 	vldr	s13, [r7, #16]
 8001540:	edd7 7a06 	vldr	s15, [r7, #24]
 8001544:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001548:	ee77 7a67 	vsub.f32	s15, s14, s15
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	edc3 7a07 	vstr	s15, [r3, #28]
	kalman -> P[1][0] -= K[1] * P00_temp;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	ed93 7a08 	vldr	s14, [r3, #32]
 8001558:	edd7 6a05 	vldr	s13, [r7, #20]
 800155c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001560:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001564:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	edc3 7a08 	vstr	s15, [r3, #32]
	kalman -> P[1][1] -= K[1] * P01_temp;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001574:	edd7 6a05 	vldr	s13, [r7, #20]
 8001578:	edd7 7a06 	vldr	s15, [r7, #24]
 800157c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001580:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	return kalman->angle;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	68db      	ldr	r3, [r3, #12]
 800158e:	ee07 3a90 	vmov	s15, r3
}
 8001592:	eeb0 0a67 	vmov.f32	s0, s15
 8001596:	372c      	adds	r7, #44	; 0x2c
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <setAngle>:

void setAngle(struct Kalman *kalman, float angle){
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	ed87 0a00 	vstr	s0, [r7]
	kalman -> angle = angle;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	683a      	ldr	r2, [r7, #0]
 80015b0:	60da      	str	r2, [r3, #12]
}
 80015b2:	bf00      	nop
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
	...

080015c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015c6:	f000 feda 	bl	800237e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015ca:	f000 f83d 	bl	8001648 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015ce:	f000 fa69 	bl	8001aa4 <MX_GPIO_Init>
  MX_TIM1_Init();
 80015d2:	f000 f8db 	bl	800178c <MX_TIM1_Init>
  MX_TIM16_Init();
 80015d6:	f000 f9bd 	bl	8001954 <MX_TIM16_Init>
  MX_I2C1_Init();
 80015da:	f000 f897 	bl	800170c <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80015de:	f000 fa31 	bl	8001a44 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 80015e2:	f000 f981 	bl	80018e8 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim16);
 80015e6:	4815      	ldr	r0, [pc, #84]	; (800163c <main+0x7c>)
 80015e8:	f003 f9ca 	bl	8004980 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 80015ec:	2100      	movs	r1, #0
 80015ee:	4813      	ldr	r0, [pc, #76]	; (800163c <main+0x7c>)
 80015f0:	f003 fac8 	bl	8004b84 <HAL_TIM_PWM_Start>
  TIM_CCxChannelCmd(htim16.Instance, TIM_CHANNEL_1, TIM_CCxN_ENABLE);
 80015f4:	4b11      	ldr	r3, [pc, #68]	; (800163c <main+0x7c>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2204      	movs	r2, #4
 80015fa:	2100      	movs	r1, #0
 80015fc:	4618      	mov	r0, r3
 80015fe:	f004 fa41 	bl	8005a84 <TIM_CCxChannelCmd>
  HAL_TIM_Base_Start(&htim1);
 8001602:	480f      	ldr	r0, [pc, #60]	; (8001640 <main+0x80>)
 8001604:	f003 f9bc 	bl	8004980 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001608:	2108      	movs	r1, #8
 800160a:	480d      	ldr	r0, [pc, #52]	; (8001640 <main+0x80>)
 800160c:	f003 faba 	bl	8004b84 <HAL_TIM_PWM_Start>
  TIM_CCxChannelCmd(htim1.Instance, TIM_CHANNEL_3, TIM_CCxN_ENABLE);
 8001610:	4b0b      	ldr	r3, [pc, #44]	; (8001640 <main+0x80>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2204      	movs	r2, #4
 8001616:	2108      	movs	r1, #8
 8001618:	4618      	mov	r0, r3
 800161a:	f004 fa33 	bl	8005a84 <TIM_CCxChannelCmd>
  activate_app();
 800161e:	f7ff fe03 	bl	8001228 <activate_app>
  float acc_tilt = calc_acc_tilt();
 8001622:	f7ff fe29 	bl	8001278 <calc_acc_tilt>
 8001626:	ed87 0a01 	vstr	s0, [r7, #4]
  init_Kalman(&kalman);
 800162a:	4806      	ldr	r0, [pc, #24]	; (8001644 <main+0x84>)
 800162c:	f7ff fe8a 	bl	8001344 <init_Kalman>
  setAngle(&kalman, acc_tilt);
 8001630:	ed97 0a01 	vldr	s0, [r7, #4]
 8001634:	4803      	ldr	r0, [pc, #12]	; (8001644 <main+0x84>)
 8001636:	f7ff ffb3 	bl	80015a0 <setAngle>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800163a:	e7fe      	b.n	800163a <main+0x7a>
 800163c:	200002e4 	.word	0x200002e4
 8001640:	2000024c 	.word	0x2000024c
 8001644:	200003c0 	.word	0x200003c0

08001648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b096      	sub	sp, #88	; 0x58
 800164c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800164e:	f107 0314 	add.w	r3, r7, #20
 8001652:	2244      	movs	r2, #68	; 0x44
 8001654:	2100      	movs	r1, #0
 8001656:	4618      	mov	r0, r3
 8001658:	f005 f81e 	bl	8006698 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800165c:	463b      	mov	r3, r7
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	605a      	str	r2, [r3, #4]
 8001664:	609a      	str	r2, [r3, #8]
 8001666:	60da      	str	r2, [r3, #12]
 8001668:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800166a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800166e:	f001 ffa9 	bl	80035c4 <HAL_PWREx_ControlVoltageScaling>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001678:	f000 fb74 	bl	8001d64 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800167c:	f001 ff84 	bl	8003588 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001680:	4b21      	ldr	r3, [pc, #132]	; (8001708 <SystemClock_Config+0xc0>)
 8001682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001686:	4a20      	ldr	r2, [pc, #128]	; (8001708 <SystemClock_Config+0xc0>)
 8001688:	f023 0318 	bic.w	r3, r3, #24
 800168c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001690:	2314      	movs	r3, #20
 8001692:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001694:	2301      	movs	r3, #1
 8001696:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001698:	2301      	movs	r3, #1
 800169a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800169c:	2300      	movs	r3, #0
 800169e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80016a0:	2360      	movs	r3, #96	; 0x60
 80016a2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016a4:	2302      	movs	r3, #2
 80016a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80016a8:	2301      	movs	r3, #1
 80016aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80016ac:	2301      	movs	r3, #1
 80016ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80016b0:	2328      	movs	r3, #40	; 0x28
 80016b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80016b4:	2307      	movs	r3, #7
 80016b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80016b8:	2302      	movs	r3, #2
 80016ba:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80016bc:	2302      	movs	r3, #2
 80016be:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016c0:	f107 0314 	add.w	r3, r7, #20
 80016c4:	4618      	mov	r0, r3
 80016c6:	f001 ffd3 	bl	8003670 <HAL_RCC_OscConfig>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80016d0:	f000 fb48 	bl	8001d64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016d4:	230f      	movs	r3, #15
 80016d6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016d8:	2303      	movs	r3, #3
 80016da:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016dc:	2300      	movs	r3, #0
 80016de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016e0:	2300      	movs	r3, #0
 80016e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016e4:	2300      	movs	r3, #0
 80016e6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80016e8:	463b      	mov	r3, r7
 80016ea:	2104      	movs	r1, #4
 80016ec:	4618      	mov	r0, r3
 80016ee:	f002 fbd3 	bl	8003e98 <HAL_RCC_ClockConfig>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80016f8:	f000 fb34 	bl	8001d64 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80016fc:	f002 ffe6 	bl	80046cc <HAL_RCCEx_EnableMSIPLLMode>
}
 8001700:	bf00      	nop
 8001702:	3758      	adds	r7, #88	; 0x58
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	40021000 	.word	0x40021000

0800170c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001710:	4b1b      	ldr	r3, [pc, #108]	; (8001780 <MX_I2C1_Init+0x74>)
 8001712:	4a1c      	ldr	r2, [pc, #112]	; (8001784 <MX_I2C1_Init+0x78>)
 8001714:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8001716:	4b1a      	ldr	r3, [pc, #104]	; (8001780 <MX_I2C1_Init+0x74>)
 8001718:	4a1b      	ldr	r2, [pc, #108]	; (8001788 <MX_I2C1_Init+0x7c>)
 800171a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800171c:	4b18      	ldr	r3, [pc, #96]	; (8001780 <MX_I2C1_Init+0x74>)
 800171e:	2200      	movs	r2, #0
 8001720:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001722:	4b17      	ldr	r3, [pc, #92]	; (8001780 <MX_I2C1_Init+0x74>)
 8001724:	2201      	movs	r2, #1
 8001726:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001728:	4b15      	ldr	r3, [pc, #84]	; (8001780 <MX_I2C1_Init+0x74>)
 800172a:	2200      	movs	r2, #0
 800172c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800172e:	4b14      	ldr	r3, [pc, #80]	; (8001780 <MX_I2C1_Init+0x74>)
 8001730:	2200      	movs	r2, #0
 8001732:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001734:	4b12      	ldr	r3, [pc, #72]	; (8001780 <MX_I2C1_Init+0x74>)
 8001736:	2200      	movs	r2, #0
 8001738:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800173a:	4b11      	ldr	r3, [pc, #68]	; (8001780 <MX_I2C1_Init+0x74>)
 800173c:	2200      	movs	r2, #0
 800173e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001740:	4b0f      	ldr	r3, [pc, #60]	; (8001780 <MX_I2C1_Init+0x74>)
 8001742:	2200      	movs	r2, #0
 8001744:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001746:	480e      	ldr	r0, [pc, #56]	; (8001780 <MX_I2C1_Init+0x74>)
 8001748:	f001 f922 	bl	8002990 <HAL_I2C_Init>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001752:	f000 fb07 	bl	8001d64 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001756:	2100      	movs	r1, #0
 8001758:	4809      	ldr	r0, [pc, #36]	; (8001780 <MX_I2C1_Init+0x74>)
 800175a:	f001 fe7d 	bl	8003458 <HAL_I2CEx_ConfigAnalogFilter>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001764:	f000 fafe 	bl	8001d64 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001768:	2100      	movs	r1, #0
 800176a:	4805      	ldr	r0, [pc, #20]	; (8001780 <MX_I2C1_Init+0x74>)
 800176c:	f001 febf 	bl	80034ee <HAL_I2CEx_ConfigDigitalFilter>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001776:	f000 faf5 	bl	8001d64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800177a:	bf00      	nop
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	200001f8 	.word	0x200001f8
 8001784:	40005400 	.word	0x40005400
 8001788:	10909cec 	.word	0x10909cec

0800178c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b09a      	sub	sp, #104	; 0x68
 8001790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001792:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001796:	2200      	movs	r2, #0
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	605a      	str	r2, [r3, #4]
 800179c:	609a      	str	r2, [r3, #8]
 800179e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017a0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	605a      	str	r2, [r3, #4]
 80017aa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	609a      	str	r2, [r3, #8]
 80017b8:	60da      	str	r2, [r3, #12]
 80017ba:	611a      	str	r2, [r3, #16]
 80017bc:	615a      	str	r2, [r3, #20]
 80017be:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80017c0:	1d3b      	adds	r3, r7, #4
 80017c2:	222c      	movs	r2, #44	; 0x2c
 80017c4:	2100      	movs	r1, #0
 80017c6:	4618      	mov	r0, r3
 80017c8:	f004 ff66 	bl	8006698 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017cc:	4b44      	ldr	r3, [pc, #272]	; (80018e0 <MX_TIM1_Init+0x154>)
 80017ce:	4a45      	ldr	r2, [pc, #276]	; (80018e4 <MX_TIM1_Init+0x158>)
 80017d0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 79;
 80017d2:	4b43      	ldr	r3, [pc, #268]	; (80018e0 <MX_TIM1_Init+0x154>)
 80017d4:	224f      	movs	r2, #79	; 0x4f
 80017d6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017d8:	4b41      	ldr	r3, [pc, #260]	; (80018e0 <MX_TIM1_Init+0x154>)
 80017da:	2200      	movs	r2, #0
 80017dc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80017de:	4b40      	ldr	r3, [pc, #256]	; (80018e0 <MX_TIM1_Init+0x154>)
 80017e0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80017e4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017e6:	4b3e      	ldr	r3, [pc, #248]	; (80018e0 <MX_TIM1_Init+0x154>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017ec:	4b3c      	ldr	r3, [pc, #240]	; (80018e0 <MX_TIM1_Init+0x154>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017f2:	4b3b      	ldr	r3, [pc, #236]	; (80018e0 <MX_TIM1_Init+0x154>)
 80017f4:	2280      	movs	r2, #128	; 0x80
 80017f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80017f8:	4839      	ldr	r0, [pc, #228]	; (80018e0 <MX_TIM1_Init+0x154>)
 80017fa:	f003 f869 	bl	80048d0 <HAL_TIM_Base_Init>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001804:	f000 faae 	bl	8001d64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001808:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800180c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800180e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001812:	4619      	mov	r1, r3
 8001814:	4832      	ldr	r0, [pc, #200]	; (80018e0 <MX_TIM1_Init+0x154>)
 8001816:	f003 fcc7 	bl	80051a8 <HAL_TIM_ConfigClockSource>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001820:	f000 faa0 	bl	8001d64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001824:	482e      	ldr	r0, [pc, #184]	; (80018e0 <MX_TIM1_Init+0x154>)
 8001826:	f003 f94b 	bl	8004ac0 <HAL_TIM_PWM_Init>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001830:	f000 fa98 	bl	8001d64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001834:	2300      	movs	r3, #0
 8001836:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001838:	2300      	movs	r3, #0
 800183a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800183c:	2300      	movs	r3, #0
 800183e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001840:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001844:	4619      	mov	r1, r3
 8001846:	4826      	ldr	r0, [pc, #152]	; (80018e0 <MX_TIM1_Init+0x154>)
 8001848:	f004 f942 	bl	8005ad0 <HAL_TIMEx_MasterConfigSynchronization>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001852:	f000 fa87 	bl	8001d64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001856:	2360      	movs	r3, #96	; 0x60
 8001858:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0xffff-2;
 800185a:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 800185e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001860:	2300      	movs	r3, #0
 8001862:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001864:	2300      	movs	r3, #0
 8001866:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001868:	2300      	movs	r3, #0
 800186a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800186c:	2300      	movs	r3, #0
 800186e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001870:	2300      	movs	r3, #0
 8001872:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001874:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001878:	2208      	movs	r2, #8
 800187a:	4619      	mov	r1, r3
 800187c:	4818      	ldr	r0, [pc, #96]	; (80018e0 <MX_TIM1_Init+0x154>)
 800187e:	f003 fb7f 	bl	8004f80 <HAL_TIM_PWM_ConfigChannel>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001888:	f000 fa6c 	bl	8001d64 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800188c:	2300      	movs	r3, #0
 800188e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001890:	2300      	movs	r3, #0
 8001892:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001894:	2300      	movs	r3, #0
 8001896:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001898:	2300      	movs	r3, #0
 800189a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800189c:	2300      	movs	r3, #0
 800189e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018a4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80018a6:	2300      	movs	r3, #0
 80018a8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80018aa:	2300      	movs	r3, #0
 80018ac:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80018ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018b2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80018b4:	2300      	movs	r3, #0
 80018b6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018b8:	2300      	movs	r3, #0
 80018ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80018bc:	1d3b      	adds	r3, r7, #4
 80018be:	4619      	mov	r1, r3
 80018c0:	4807      	ldr	r0, [pc, #28]	; (80018e0 <MX_TIM1_Init+0x154>)
 80018c2:	f004 f96b 	bl	8005b9c <HAL_TIMEx_ConfigBreakDeadTime>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80018cc:	f000 fa4a 	bl	8001d64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80018d0:	4803      	ldr	r0, [pc, #12]	; (80018e0 <MX_TIM1_Init+0x154>)
 80018d2:	f000 fb3f 	bl	8001f54 <HAL_TIM_MspPostInit>

}
 80018d6:	bf00      	nop
 80018d8:	3768      	adds	r7, #104	; 0x68
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	2000024c 	.word	0x2000024c
 80018e4:	40012c00 	.word	0x40012c00

080018e8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018ee:	1d3b      	adds	r3, r7, #4
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	605a      	str	r2, [r3, #4]
 80018f6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80018f8:	4b14      	ldr	r3, [pc, #80]	; (800194c <MX_TIM6_Init+0x64>)
 80018fa:	4a15      	ldr	r2, [pc, #84]	; (8001950 <MX_TIM6_Init+0x68>)
 80018fc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 79;
 80018fe:	4b13      	ldr	r3, [pc, #76]	; (800194c <MX_TIM6_Init+0x64>)
 8001900:	224f      	movs	r2, #79	; 0x4f
 8001902:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001904:	4b11      	ldr	r3, [pc, #68]	; (800194c <MX_TIM6_Init+0x64>)
 8001906:	2200      	movs	r2, #0
 8001908:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 800190a:	4b10      	ldr	r3, [pc, #64]	; (800194c <MX_TIM6_Init+0x64>)
 800190c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001910:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001912:	4b0e      	ldr	r3, [pc, #56]	; (800194c <MX_TIM6_Init+0x64>)
 8001914:	2280      	movs	r2, #128	; 0x80
 8001916:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001918:	480c      	ldr	r0, [pc, #48]	; (800194c <MX_TIM6_Init+0x64>)
 800191a:	f002 ffd9 	bl	80048d0 <HAL_TIM_Base_Init>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001924:	f000 fa1e 	bl	8001d64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001928:	2300      	movs	r3, #0
 800192a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800192c:	2300      	movs	r3, #0
 800192e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001930:	1d3b      	adds	r3, r7, #4
 8001932:	4619      	mov	r1, r3
 8001934:	4805      	ldr	r0, [pc, #20]	; (800194c <MX_TIM6_Init+0x64>)
 8001936:	f004 f8cb 	bl	8005ad0 <HAL_TIMEx_MasterConfigSynchronization>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001940:	f000 fa10 	bl	8001d64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001944:	bf00      	nop
 8001946:	3710      	adds	r7, #16
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	20000298 	.word	0x20000298
 8001950:	40001000 	.word	0x40001000

08001954 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b092      	sub	sp, #72	; 0x48
 8001958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800195a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800195e:	2200      	movs	r2, #0
 8001960:	601a      	str	r2, [r3, #0]
 8001962:	605a      	str	r2, [r3, #4]
 8001964:	609a      	str	r2, [r3, #8]
 8001966:	60da      	str	r2, [r3, #12]
 8001968:	611a      	str	r2, [r3, #16]
 800196a:	615a      	str	r2, [r3, #20]
 800196c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800196e:	463b      	mov	r3, r7
 8001970:	222c      	movs	r2, #44	; 0x2c
 8001972:	2100      	movs	r1, #0
 8001974:	4618      	mov	r0, r3
 8001976:	f004 fe8f 	bl	8006698 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800197a:	4b30      	ldr	r3, [pc, #192]	; (8001a3c <MX_TIM16_Init+0xe8>)
 800197c:	4a30      	ldr	r2, [pc, #192]	; (8001a40 <MX_TIM16_Init+0xec>)
 800197e:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 79;
 8001980:	4b2e      	ldr	r3, [pc, #184]	; (8001a3c <MX_TIM16_Init+0xe8>)
 8001982:	224f      	movs	r2, #79	; 0x4f
 8001984:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001986:	4b2d      	ldr	r3, [pc, #180]	; (8001a3c <MX_TIM16_Init+0xe8>)
 8001988:	2200      	movs	r2, #0
 800198a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 999;
 800198c:	4b2b      	ldr	r3, [pc, #172]	; (8001a3c <MX_TIM16_Init+0xe8>)
 800198e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001992:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001994:	4b29      	ldr	r3, [pc, #164]	; (8001a3c <MX_TIM16_Init+0xe8>)
 8001996:	2200      	movs	r2, #0
 8001998:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800199a:	4b28      	ldr	r3, [pc, #160]	; (8001a3c <MX_TIM16_Init+0xe8>)
 800199c:	2200      	movs	r2, #0
 800199e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80019a0:	4b26      	ldr	r3, [pc, #152]	; (8001a3c <MX_TIM16_Init+0xe8>)
 80019a2:	2280      	movs	r2, #128	; 0x80
 80019a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80019a6:	4825      	ldr	r0, [pc, #148]	; (8001a3c <MX_TIM16_Init+0xe8>)
 80019a8:	f002 ff92 	bl	80048d0 <HAL_TIM_Base_Init>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 80019b2:	f000 f9d7 	bl	8001d64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80019b6:	4821      	ldr	r0, [pc, #132]	; (8001a3c <MX_TIM16_Init+0xe8>)
 80019b8:	f003 f882 	bl	8004ac0 <HAL_TIM_PWM_Init>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 80019c2:	f000 f9cf 	bl	8001d64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019c6:	2360      	movs	r3, #96	; 0x60
 80019c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 80019ca:	2300      	movs	r3, #0
 80019cc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019ce:	2300      	movs	r3, #0
 80019d0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80019d2:	2300      	movs	r3, #0
 80019d4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019d6:	2300      	movs	r3, #0
 80019d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019da:	2300      	movs	r3, #0
 80019dc:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019de:	2300      	movs	r3, #0
 80019e0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019e6:	2200      	movs	r2, #0
 80019e8:	4619      	mov	r1, r3
 80019ea:	4814      	ldr	r0, [pc, #80]	; (8001a3c <MX_TIM16_Init+0xe8>)
 80019ec:	f003 fac8 	bl	8004f80 <HAL_TIM_PWM_ConfigChannel>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 80019f6:	f000 f9b5 	bl	8001d64 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019fa:	2300      	movs	r3, #0
 80019fc:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019fe:	2300      	movs	r3, #0
 8001a00:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a02:	2300      	movs	r3, #0
 8001a04:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a06:	2300      	movs	r3, #0
 8001a08:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a12:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a14:	2300      	movs	r3, #0
 8001a16:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001a18:	463b      	mov	r3, r7
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4807      	ldr	r0, [pc, #28]	; (8001a3c <MX_TIM16_Init+0xe8>)
 8001a1e:	f004 f8bd 	bl	8005b9c <HAL_TIMEx_ConfigBreakDeadTime>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <MX_TIM16_Init+0xd8>
  {
    Error_Handler();
 8001a28:	f000 f99c 	bl	8001d64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8001a2c:	4803      	ldr	r0, [pc, #12]	; (8001a3c <MX_TIM16_Init+0xe8>)
 8001a2e:	f000 fa91 	bl	8001f54 <HAL_TIM_MspPostInit>

}
 8001a32:	bf00      	nop
 8001a34:	3748      	adds	r7, #72	; 0x48
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	200002e4 	.word	0x200002e4
 8001a40:	40014400 	.word	0x40014400

08001a44 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a48:	4b14      	ldr	r3, [pc, #80]	; (8001a9c <MX_USART2_UART_Init+0x58>)
 8001a4a:	4a15      	ldr	r2, [pc, #84]	; (8001aa0 <MX_USART2_UART_Init+0x5c>)
 8001a4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a4e:	4b13      	ldr	r3, [pc, #76]	; (8001a9c <MX_USART2_UART_Init+0x58>)
 8001a50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a56:	4b11      	ldr	r3, [pc, #68]	; (8001a9c <MX_USART2_UART_Init+0x58>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a5c:	4b0f      	ldr	r3, [pc, #60]	; (8001a9c <MX_USART2_UART_Init+0x58>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a62:	4b0e      	ldr	r3, [pc, #56]	; (8001a9c <MX_USART2_UART_Init+0x58>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a68:	4b0c      	ldr	r3, [pc, #48]	; (8001a9c <MX_USART2_UART_Init+0x58>)
 8001a6a:	220c      	movs	r2, #12
 8001a6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a6e:	4b0b      	ldr	r3, [pc, #44]	; (8001a9c <MX_USART2_UART_Init+0x58>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a74:	4b09      	ldr	r3, [pc, #36]	; (8001a9c <MX_USART2_UART_Init+0x58>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a7a:	4b08      	ldr	r3, [pc, #32]	; (8001a9c <MX_USART2_UART_Init+0x58>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a80:	4b06      	ldr	r3, [pc, #24]	; (8001a9c <MX_USART2_UART_Init+0x58>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a86:	4805      	ldr	r0, [pc, #20]	; (8001a9c <MX_USART2_UART_Init+0x58>)
 8001a88:	f004 f91e 	bl	8005cc8 <HAL_UART_Init>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001a92:	f000 f967 	bl	8001d64 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a96:	bf00      	nop
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	20000330 	.word	0x20000330
 8001aa0:	40004400 	.word	0x40004400

08001aa4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b088      	sub	sp, #32
 8001aa8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aaa:	f107 030c 	add.w	r3, r7, #12
 8001aae:	2200      	movs	r2, #0
 8001ab0:	601a      	str	r2, [r3, #0]
 8001ab2:	605a      	str	r2, [r3, #4]
 8001ab4:	609a      	str	r2, [r3, #8]
 8001ab6:	60da      	str	r2, [r3, #12]
 8001ab8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aba:	4b29      	ldr	r3, [pc, #164]	; (8001b60 <MX_GPIO_Init+0xbc>)
 8001abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001abe:	4a28      	ldr	r2, [pc, #160]	; (8001b60 <MX_GPIO_Init+0xbc>)
 8001ac0:	f043 0304 	orr.w	r3, r3, #4
 8001ac4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ac6:	4b26      	ldr	r3, [pc, #152]	; (8001b60 <MX_GPIO_Init+0xbc>)
 8001ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aca:	f003 0304 	and.w	r3, r3, #4
 8001ace:	60bb      	str	r3, [r7, #8]
 8001ad0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad2:	4b23      	ldr	r3, [pc, #140]	; (8001b60 <MX_GPIO_Init+0xbc>)
 8001ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ad6:	4a22      	ldr	r2, [pc, #136]	; (8001b60 <MX_GPIO_Init+0xbc>)
 8001ad8:	f043 0301 	orr.w	r3, r3, #1
 8001adc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ade:	4b20      	ldr	r3, [pc, #128]	; (8001b60 <MX_GPIO_Init+0xbc>)
 8001ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	607b      	str	r3, [r7, #4]
 8001ae8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aea:	4b1d      	ldr	r3, [pc, #116]	; (8001b60 <MX_GPIO_Init+0xbc>)
 8001aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aee:	4a1c      	ldr	r2, [pc, #112]	; (8001b60 <MX_GPIO_Init+0xbc>)
 8001af0:	f043 0302 	orr.w	r3, r3, #2
 8001af4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001af6:	4b1a      	ldr	r3, [pc, #104]	; (8001b60 <MX_GPIO_Init+0xbc>)
 8001af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	603b      	str	r3, [r7, #0]
 8001b00:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Y_DIR_Pin|LD3_Pin|Z_DIR_Pin, GPIO_PIN_RESET);
 8001b02:	2200      	movs	r2, #0
 8001b04:	2189      	movs	r1, #137	; 0x89
 8001b06:	4817      	ldr	r0, [pc, #92]	; (8001b64 <MX_GPIO_Init+0xc0>)
 8001b08:	f000 ff2a 	bl	8002960 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(X_DIR_GPIO_Port, X_DIR_Pin, GPIO_PIN_RESET);
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b16:	f000 ff23 	bl	8002960 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Y_DIR_Pin LD3_Pin Z_DIR_Pin */
  GPIO_InitStruct.Pin = Y_DIR_Pin|LD3_Pin|Z_DIR_Pin;
 8001b1a:	2389      	movs	r3, #137	; 0x89
 8001b1c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b22:	2300      	movs	r3, #0
 8001b24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b26:	2300      	movs	r3, #0
 8001b28:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b2a:	f107 030c 	add.w	r3, r7, #12
 8001b2e:	4619      	mov	r1, r3
 8001b30:	480c      	ldr	r0, [pc, #48]	; (8001b64 <MX_GPIO_Init+0xc0>)
 8001b32:	f000 fdab 	bl	800268c <HAL_GPIO_Init>

  /*Configure GPIO pin : X_DIR_Pin */
  GPIO_InitStruct.Pin = X_DIR_Pin;
 8001b36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b40:	2300      	movs	r3, #0
 8001b42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b44:	2300      	movs	r3, #0
 8001b46:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(X_DIR_GPIO_Port, &GPIO_InitStruct);
 8001b48:	f107 030c 	add.w	r3, r7, #12
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b52:	f000 fd9b 	bl	800268c <HAL_GPIO_Init>

}
 8001b56:	bf00      	nop
 8001b58:	3720      	adds	r7, #32
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40021000 	.word	0x40021000
 8001b64:	48000400 	.word	0x48000400

08001b68 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001b68:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001b6c:	b086      	sub	sp, #24
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
 	  if(htim->Instance == TIM6){
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a70      	ldr	r2, [pc, #448]	; (8001d38 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	f040 80d7 	bne.w	8001d2c <HAL_TIM_PeriodElapsedCallback+0x1c4>
 		 float acc_angle = calc_acc_tilt();
 8001b7e:	f7ff fb7b 	bl	8001278 <calc_acc_tilt>
 8001b82:	ed87 0a05 	vstr	s0, [r7, #20]
 		 int16_t g_y = lsm_read_value(LSM303D_OUT_Y_A, L3GD20H_ADDR);
 8001b86:	21d6      	movs	r1, #214	; 0xd6
 8001b88:	202a      	movs	r0, #42	; 0x2a
 8001b8a:	f7ff fac9 	bl	8001120 <lsm_read_value>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	827b      	strh	r3, [r7, #18]
 		 float omega = g_y*0.0175f;
 8001b92:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001b96:	ee07 3a90 	vmov	s15, r3
 8001b9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b9e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8001d3c <HAL_TIM_PeriodElapsedCallback+0x1d4>
 8001ba2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ba6:	edc7 7a03 	vstr	s15, [r7, #12]
 		 float tilt = getAngle(&kalman, acc_angle, omega, 0.001);
 8001baa:	ed9f 1a65 	vldr	s2, [pc, #404]	; 8001d40 <HAL_TIM_PeriodElapsedCallback+0x1d8>
 8001bae:	edd7 0a03 	vldr	s1, [r7, #12]
 8001bb2:	ed97 0a05 	vldr	s0, [r7, #20]
 8001bb6:	4863      	ldr	r0, [pc, #396]	; (8001d44 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8001bb8:	f7ff fbf6 	bl	80013a8 <getAngle>
 8001bbc:	ed87 0a02 	vstr	s0, [r7, #8]
 		 printf("%.2f\r\n",tilt_integral);
 8001bc0:	4b61      	ldr	r3, [pc, #388]	; (8001d48 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7fe fcbf 	bl	8000548 <__aeabi_f2d>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	460b      	mov	r3, r1
 8001bce:	485f      	ldr	r0, [pc, #380]	; (8001d4c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001bd0:	f005 f9d4 	bl	8006f7c <iprintf>
 		 //float alpha = atan2f(tilt_a_z, tilt_a_x);

 		 //float acc_tilt = (alpha * 180.0f / M_PI - 90.0f);
 		 //y_tilt = y_tilt *0.96 + acc_tilt*0.04;
 		 //actual_tilt = y_tilt;
 		 if(!isnan(tilt) && fabs(tilt_integral) < 3500) tilt_integral += tilt;
 8001bd4:	ed97 7a02 	vldr	s14, [r7, #8]
 8001bd8:	edd7 7a02 	vldr	s15, [r7, #8]
 8001bdc:	eeb4 7a67 	vcmp.f32	s14, s15
 8001be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001be4:	d615      	bvs.n	8001c12 <HAL_TIM_PeriodElapsedCallback+0xaa>
 8001be6:	4b58      	ldr	r3, [pc, #352]	; (8001d48 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001be8:	edd3 7a00 	vldr	s15, [r3]
 8001bec:	eef0 7ae7 	vabs.f32	s15, s15
 8001bf0:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8001d50 <HAL_TIM_PeriodElapsedCallback+0x1e8>
 8001bf4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bfc:	d509      	bpl.n	8001c12 <HAL_TIM_PeriodElapsedCallback+0xaa>
 8001bfe:	4b52      	ldr	r3, [pc, #328]	; (8001d48 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001c00:	ed93 7a00 	vldr	s14, [r3]
 8001c04:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c0c:	4b4e      	ldr	r3, [pc, #312]	; (8001d48 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001c0e:	edc3 7a00 	vstr	s15, [r3]
 		 //speed = (fabs(tilt)*10.2) + (fabs(tilt-last_tilt)*0) + fabs(tilt_integral * 0.00013);//
 		 //if(fabs(tilt)>80) speed = (fabs(tilt)*15) + (fabs(tilt-last_tilt)*32) + fabs(tilt_integral * 0.3);
 		 //speed = (fabs(tilt)*15) + (fabs(tilt-last_tilt)*32) + fabs(tilt_integral * 0.1);
 		 speed = (fabs(tilt)*4) + (fabs(tilt-last_tilt)*0) + fabs(tilt_integral * 0.000);
 8001c12:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c16:	eef0 7ae7 	vabs.f32	s15, s15
 8001c1a:	ee17 0a90 	vmov	r0, s15
 8001c1e:	f7fe fc93 	bl	8000548 <__aeabi_f2d>
 8001c22:	f04f 0200 	mov.w	r2, #0
 8001c26:	4b4b      	ldr	r3, [pc, #300]	; (8001d54 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8001c28:	f7fe fce6 	bl	80005f8 <__aeabi_dmul>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	460b      	mov	r3, r1
 8001c30:	4690      	mov	r8, r2
 8001c32:	4699      	mov	r9, r3
 8001c34:	4b48      	ldr	r3, [pc, #288]	; (8001d58 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8001c36:	edd3 7a00 	vldr	s15, [r3]
 8001c3a:	ed97 7a02 	vldr	s14, [r7, #8]
 8001c3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c42:	eef0 7ae7 	vabs.f32	s15, s15
 8001c46:	ee17 0a90 	vmov	r0, s15
 8001c4a:	f7fe fc7d 	bl	8000548 <__aeabi_f2d>
 8001c4e:	f04f 0200 	mov.w	r2, #0
 8001c52:	f04f 0300 	mov.w	r3, #0
 8001c56:	f7fe fccf 	bl	80005f8 <__aeabi_dmul>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	4640      	mov	r0, r8
 8001c60:	4649      	mov	r1, r9
 8001c62:	f7fe fb13 	bl	800028c <__adddf3>
 8001c66:	4602      	mov	r2, r0
 8001c68:	460b      	mov	r3, r1
 8001c6a:	4690      	mov	r8, r2
 8001c6c:	4699      	mov	r9, r3
 8001c6e:	4b36      	ldr	r3, [pc, #216]	; (8001d48 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7fe fc68 	bl	8000548 <__aeabi_f2d>
 8001c78:	f04f 0200 	mov.w	r2, #0
 8001c7c:	f04f 0300 	mov.w	r3, #0
 8001c80:	f7fe fcba 	bl	80005f8 <__aeabi_dmul>
 8001c84:	4602      	mov	r2, r0
 8001c86:	460b      	mov	r3, r1
 8001c88:	4614      	mov	r4, r2
 8001c8a:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8001c8e:	4622      	mov	r2, r4
 8001c90:	462b      	mov	r3, r5
 8001c92:	4640      	mov	r0, r8
 8001c94:	4649      	mov	r1, r9
 8001c96:	f7fe faf9 	bl	800028c <__adddf3>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	4610      	mov	r0, r2
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	f7fe ff81 	bl	8000ba8 <__aeabi_d2f>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	4a2c      	ldr	r2, [pc, #176]	; (8001d5c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001caa:	6013      	str	r3, [r2, #0]
 		 if(fabs(tilt)<1) tilt_integral = 0;
 8001cac:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cb0:	eef0 7ae7 	vabs.f32	s15, s15
 8001cb4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001cb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cc0:	d503      	bpl.n	8001cca <HAL_TIM_PeriodElapsedCallback+0x162>
 8001cc2:	4b21      	ldr	r3, [pc, #132]	; (8001d48 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001cc4:	f04f 0200 	mov.w	r2, #0
 8001cc8:	601a      	str	r2, [r3, #0]
 		 set_stepper_L_motor_speed(speed);
 8001cca:	4b24      	ldr	r3, [pc, #144]	; (8001d5c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001ccc:	edd3 7a00 	vldr	s15, [r3]
 8001cd0:	eeb0 0a67 	vmov.f32	s0, s15
 8001cd4:	f7ff f94c 	bl	8000f70 <set_stepper_L_motor_speed>
 		 set_stepper_R_motor_speed(speed);
 8001cd8:	4b20      	ldr	r3, [pc, #128]	; (8001d5c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001cda:	edd3 7a00 	vldr	s15, [r3]
 8001cde:	eeb0 0a67 	vmov.f32	s0, s15
 8001ce2:	f7ff f991 	bl	8001008 <set_stepper_R_motor_speed>
 		 if(tilt>0){
 8001ce6:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001cee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cf2:	dd0c      	ble.n	8001d0e <HAL_TIM_PeriodElapsedCallback+0x1a6>
 			HAL_GPIO_WritePin(X_DIR_GPIO_Port, X_DIR_Pin, GPIO_PIN_RESET);
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cfa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cfe:	f000 fe2f 	bl	8002960 <HAL_GPIO_WritePin>
 			HAL_GPIO_WritePin(Y_DIR_GPIO_Port, Y_DIR_Pin, GPIO_PIN_SET);
 8001d02:	2201      	movs	r2, #1
 8001d04:	2101      	movs	r1, #1
 8001d06:	4816      	ldr	r0, [pc, #88]	; (8001d60 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001d08:	f000 fe2a 	bl	8002960 <HAL_GPIO_WritePin>
 8001d0c:	e00b      	b.n	8001d26 <HAL_TIM_PeriodElapsedCallback+0x1be>
 			 }
 		 else{
 			HAL_GPIO_WritePin(X_DIR_GPIO_Port, X_DIR_Pin, GPIO_PIN_SET);
 8001d0e:	2201      	movs	r2, #1
 8001d10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d18:	f000 fe22 	bl	8002960 <HAL_GPIO_WritePin>
 		    HAL_GPIO_WritePin(Y_DIR_GPIO_Port, Y_DIR_Pin, GPIO_PIN_RESET);
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	2101      	movs	r1, #1
 8001d20:	480f      	ldr	r0, [pc, #60]	; (8001d60 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001d22:	f000 fe1d 	bl	8002960 <HAL_GPIO_WritePin>
 		 }
 		 last_tilt = tilt;
 8001d26:	4a0c      	ldr	r2, [pc, #48]	; (8001d58 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	6013      	str	r3, [r2, #0]

 	  }
 }
 8001d2c:	bf00      	nop
 8001d2e:	3718      	adds	r7, #24
 8001d30:	46bd      	mov	sp, r7
 8001d32:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001d36:	bf00      	nop
 8001d38:	40001000 	.word	0x40001000
 8001d3c:	3c8f5c29 	.word	0x3c8f5c29
 8001d40:	3a83126f 	.word	0x3a83126f
 8001d44:	200003c0 	.word	0x200003c0
 8001d48:	200003b4 	.word	0x200003b4
 8001d4c:	080095e4 	.word	0x080095e4
 8001d50:	455ac000 	.word	0x455ac000
 8001d54:	40100000 	.word	0x40100000
 8001d58:	200003b8 	.word	0x200003b8
 8001d5c:	200003bc 	.word	0x200003bc
 8001d60:	48000400 	.word	0x48000400

08001d64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d68:	b672      	cpsid	i
}
 8001d6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d6c:	e7fe      	b.n	8001d6c <Error_Handler+0x8>
	...

08001d70 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d76:	4b0f      	ldr	r3, [pc, #60]	; (8001db4 <HAL_MspInit+0x44>)
 8001d78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d7a:	4a0e      	ldr	r2, [pc, #56]	; (8001db4 <HAL_MspInit+0x44>)
 8001d7c:	f043 0301 	orr.w	r3, r3, #1
 8001d80:	6613      	str	r3, [r2, #96]	; 0x60
 8001d82:	4b0c      	ldr	r3, [pc, #48]	; (8001db4 <HAL_MspInit+0x44>)
 8001d84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d86:	f003 0301 	and.w	r3, r3, #1
 8001d8a:	607b      	str	r3, [r7, #4]
 8001d8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d8e:	4b09      	ldr	r3, [pc, #36]	; (8001db4 <HAL_MspInit+0x44>)
 8001d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d92:	4a08      	ldr	r2, [pc, #32]	; (8001db4 <HAL_MspInit+0x44>)
 8001d94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d98:	6593      	str	r3, [r2, #88]	; 0x58
 8001d9a:	4b06      	ldr	r3, [pc, #24]	; (8001db4 <HAL_MspInit+0x44>)
 8001d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da2:	603b      	str	r3, [r7, #0]
 8001da4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001da6:	bf00      	nop
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	40021000 	.word	0x40021000

08001db8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b09e      	sub	sp, #120	; 0x78
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	605a      	str	r2, [r3, #4]
 8001dca:	609a      	str	r2, [r3, #8]
 8001dcc:	60da      	str	r2, [r3, #12]
 8001dce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001dd0:	f107 0310 	add.w	r3, r7, #16
 8001dd4:	2254      	movs	r2, #84	; 0x54
 8001dd6:	2100      	movs	r1, #0
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f004 fc5d 	bl	8006698 <memset>
  if(hi2c->Instance==I2C1)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a1f      	ldr	r2, [pc, #124]	; (8001e60 <HAL_I2C_MspInit+0xa8>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d137      	bne.n	8001e58 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001de8:	2340      	movs	r3, #64	; 0x40
 8001dea:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001dec:	2300      	movs	r3, #0
 8001dee:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001df0:	f107 0310 	add.w	r3, r7, #16
 8001df4:	4618      	mov	r0, r3
 8001df6:	f002 fa73 	bl	80042e0 <HAL_RCCEx_PeriphCLKConfig>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001e00:	f7ff ffb0 	bl	8001d64 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e04:	4b17      	ldr	r3, [pc, #92]	; (8001e64 <HAL_I2C_MspInit+0xac>)
 8001e06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e08:	4a16      	ldr	r2, [pc, #88]	; (8001e64 <HAL_I2C_MspInit+0xac>)
 8001e0a:	f043 0301 	orr.w	r3, r3, #1
 8001e0e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e10:	4b14      	ldr	r3, [pc, #80]	; (8001e64 <HAL_I2C_MspInit+0xac>)
 8001e12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e14:	f003 0301 	and.w	r3, r3, #1
 8001e18:	60fb      	str	r3, [r7, #12]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001e1c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001e20:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e22:	2312      	movs	r3, #18
 8001e24:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e26:	2300      	movs	r3, #0
 8001e28:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e2e:	2304      	movs	r3, #4
 8001e30:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e32:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001e36:	4619      	mov	r1, r3
 8001e38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e3c:	f000 fc26 	bl	800268c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e40:	4b08      	ldr	r3, [pc, #32]	; (8001e64 <HAL_I2C_MspInit+0xac>)
 8001e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e44:	4a07      	ldr	r2, [pc, #28]	; (8001e64 <HAL_I2C_MspInit+0xac>)
 8001e46:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e4a:	6593      	str	r3, [r2, #88]	; 0x58
 8001e4c:	4b05      	ldr	r3, [pc, #20]	; (8001e64 <HAL_I2C_MspInit+0xac>)
 8001e4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e54:	60bb      	str	r3, [r7, #8]
 8001e56:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001e58:	bf00      	nop
 8001e5a:	3778      	adds	r7, #120	; 0x78
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	40005400 	.word	0x40005400
 8001e64:	40021000 	.word	0x40021000

08001e68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b086      	sub	sp, #24
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a33      	ldr	r2, [pc, #204]	; (8001f44 <HAL_TIM_Base_MspInit+0xdc>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d12c      	bne.n	8001ed4 <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e7a:	4b33      	ldr	r3, [pc, #204]	; (8001f48 <HAL_TIM_Base_MspInit+0xe0>)
 8001e7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e7e:	4a32      	ldr	r2, [pc, #200]	; (8001f48 <HAL_TIM_Base_MspInit+0xe0>)
 8001e80:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e84:	6613      	str	r3, [r2, #96]	; 0x60
 8001e86:	4b30      	ldr	r3, [pc, #192]	; (8001f48 <HAL_TIM_Base_MspInit+0xe0>)
 8001e88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e8e:	617b      	str	r3, [r7, #20]
 8001e90:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8001e92:	2200      	movs	r2, #0
 8001e94:	2100      	movs	r1, #0
 8001e96:	2018      	movs	r0, #24
 8001e98:	f000 fbc1 	bl	800261e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001e9c:	2018      	movs	r0, #24
 8001e9e:	f000 fbda 	bl	8002656 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	2019      	movs	r0, #25
 8001ea8:	f000 fbb9 	bl	800261e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001eac:	2019      	movs	r0, #25
 8001eae:	f000 fbd2 	bl	8002656 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	201a      	movs	r0, #26
 8001eb8:	f000 fbb1 	bl	800261e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8001ebc:	201a      	movs	r0, #26
 8001ebe:	f000 fbca 	bl	8002656 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	2100      	movs	r1, #0
 8001ec6:	201b      	movs	r0, #27
 8001ec8:	f000 fba9 	bl	800261e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001ecc:	201b      	movs	r0, #27
 8001ece:	f000 fbc2 	bl	8002656 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001ed2:	e032      	b.n	8001f3a <HAL_TIM_Base_MspInit+0xd2>
  else if(htim_base->Instance==TIM6)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a1c      	ldr	r2, [pc, #112]	; (8001f4c <HAL_TIM_Base_MspInit+0xe4>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d114      	bne.n	8001f08 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001ede:	4b1a      	ldr	r3, [pc, #104]	; (8001f48 <HAL_TIM_Base_MspInit+0xe0>)
 8001ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee2:	4a19      	ldr	r2, [pc, #100]	; (8001f48 <HAL_TIM_Base_MspInit+0xe0>)
 8001ee4:	f043 0310 	orr.w	r3, r3, #16
 8001ee8:	6593      	str	r3, [r2, #88]	; 0x58
 8001eea:	4b17      	ldr	r3, [pc, #92]	; (8001f48 <HAL_TIM_Base_MspInit+0xe0>)
 8001eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eee:	f003 0310 	and.w	r3, r3, #16
 8001ef2:	613b      	str	r3, [r7, #16]
 8001ef4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	2100      	movs	r1, #0
 8001efa:	2036      	movs	r0, #54	; 0x36
 8001efc:	f000 fb8f 	bl	800261e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001f00:	2036      	movs	r0, #54	; 0x36
 8001f02:	f000 fba8 	bl	8002656 <HAL_NVIC_EnableIRQ>
}
 8001f06:	e018      	b.n	8001f3a <HAL_TIM_Base_MspInit+0xd2>
  else if(htim_base->Instance==TIM16)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a10      	ldr	r2, [pc, #64]	; (8001f50 <HAL_TIM_Base_MspInit+0xe8>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d113      	bne.n	8001f3a <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001f12:	4b0d      	ldr	r3, [pc, #52]	; (8001f48 <HAL_TIM_Base_MspInit+0xe0>)
 8001f14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f16:	4a0c      	ldr	r2, [pc, #48]	; (8001f48 <HAL_TIM_Base_MspInit+0xe0>)
 8001f18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f1c:	6613      	str	r3, [r2, #96]	; 0x60
 8001f1e:	4b0a      	ldr	r3, [pc, #40]	; (8001f48 <HAL_TIM_Base_MspInit+0xe0>)
 8001f20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f26:	60fb      	str	r3, [r7, #12]
 8001f28:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	2100      	movs	r1, #0
 8001f2e:	2019      	movs	r0, #25
 8001f30:	f000 fb75 	bl	800261e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001f34:	2019      	movs	r0, #25
 8001f36:	f000 fb8e 	bl	8002656 <HAL_NVIC_EnableIRQ>
}
 8001f3a:	bf00      	nop
 8001f3c:	3718      	adds	r7, #24
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	40012c00 	.word	0x40012c00
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	40001000 	.word	0x40001000
 8001f50:	40014400 	.word	0x40014400

08001f54 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b08a      	sub	sp, #40	; 0x28
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f5c:	f107 0314 	add.w	r3, r7, #20
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	605a      	str	r2, [r3, #4]
 8001f66:	609a      	str	r2, [r3, #8]
 8001f68:	60da      	str	r2, [r3, #12]
 8001f6a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a22      	ldr	r2, [pc, #136]	; (8001ffc <HAL_TIM_MspPostInit+0xa8>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d11c      	bne.n	8001fb0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f76:	4b22      	ldr	r3, [pc, #136]	; (8002000 <HAL_TIM_MspPostInit+0xac>)
 8001f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f7a:	4a21      	ldr	r2, [pc, #132]	; (8002000 <HAL_TIM_MspPostInit+0xac>)
 8001f7c:	f043 0302 	orr.w	r3, r3, #2
 8001f80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f82:	4b1f      	ldr	r3, [pc, #124]	; (8002000 <HAL_TIM_MspPostInit+0xac>)
 8001f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f86:	f003 0302 	and.w	r3, r3, #2
 8001f8a:	613b      	str	r3, [r7, #16]
 8001f8c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PB1     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001f8e:	2302      	movs	r3, #2
 8001f90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f92:	2302      	movs	r3, #2
 8001f94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f96:	2300      	movs	r3, #0
 8001f98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fa2:	f107 0314 	add.w	r3, r7, #20
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	4816      	ldr	r0, [pc, #88]	; (8002004 <HAL_TIM_MspPostInit+0xb0>)
 8001faa:	f000 fb6f 	bl	800268c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8001fae:	e020      	b.n	8001ff2 <HAL_TIM_MspPostInit+0x9e>
  else if(htim->Instance==TIM16)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a14      	ldr	r2, [pc, #80]	; (8002008 <HAL_TIM_MspPostInit+0xb4>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d11b      	bne.n	8001ff2 <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fba:	4b11      	ldr	r3, [pc, #68]	; (8002000 <HAL_TIM_MspPostInit+0xac>)
 8001fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fbe:	4a10      	ldr	r2, [pc, #64]	; (8002000 <HAL_TIM_MspPostInit+0xac>)
 8001fc0:	f043 0302 	orr.w	r3, r3, #2
 8001fc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fc6:	4b0e      	ldr	r3, [pc, #56]	; (8002000 <HAL_TIM_MspPostInit+0xac>)
 8001fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	60fb      	str	r3, [r7, #12]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001fd2:	2340      	movs	r3, #64	; 0x40
 8001fd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 8001fe2:	230e      	movs	r3, #14
 8001fe4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fe6:	f107 0314 	add.w	r3, r7, #20
 8001fea:	4619      	mov	r1, r3
 8001fec:	4805      	ldr	r0, [pc, #20]	; (8002004 <HAL_TIM_MspPostInit+0xb0>)
 8001fee:	f000 fb4d 	bl	800268c <HAL_GPIO_Init>
}
 8001ff2:	bf00      	nop
 8001ff4:	3728      	adds	r7, #40	; 0x28
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	40012c00 	.word	0x40012c00
 8002000:	40021000 	.word	0x40021000
 8002004:	48000400 	.word	0x48000400
 8002008:	40014400 	.word	0x40014400

0800200c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b09e      	sub	sp, #120	; 0x78
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002014:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	605a      	str	r2, [r3, #4]
 800201e:	609a      	str	r2, [r3, #8]
 8002020:	60da      	str	r2, [r3, #12]
 8002022:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002024:	f107 0310 	add.w	r3, r7, #16
 8002028:	2254      	movs	r2, #84	; 0x54
 800202a:	2100      	movs	r1, #0
 800202c:	4618      	mov	r0, r3
 800202e:	f004 fb33 	bl	8006698 <memset>
  if(huart->Instance==USART2)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a1f      	ldr	r2, [pc, #124]	; (80020b4 <HAL_UART_MspInit+0xa8>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d136      	bne.n	80020aa <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800203c:	2302      	movs	r3, #2
 800203e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002040:	2300      	movs	r3, #0
 8002042:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002044:	f107 0310 	add.w	r3, r7, #16
 8002048:	4618      	mov	r0, r3
 800204a:	f002 f949 	bl	80042e0 <HAL_RCCEx_PeriphCLKConfig>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002054:	f7ff fe86 	bl	8001d64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002058:	4b17      	ldr	r3, [pc, #92]	; (80020b8 <HAL_UART_MspInit+0xac>)
 800205a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800205c:	4a16      	ldr	r2, [pc, #88]	; (80020b8 <HAL_UART_MspInit+0xac>)
 800205e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002062:	6593      	str	r3, [r2, #88]	; 0x58
 8002064:	4b14      	ldr	r3, [pc, #80]	; (80020b8 <HAL_UART_MspInit+0xac>)
 8002066:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002068:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800206c:	60fb      	str	r3, [r7, #12]
 800206e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002070:	4b11      	ldr	r3, [pc, #68]	; (80020b8 <HAL_UART_MspInit+0xac>)
 8002072:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002074:	4a10      	ldr	r2, [pc, #64]	; (80020b8 <HAL_UART_MspInit+0xac>)
 8002076:	f043 0301 	orr.w	r3, r3, #1
 800207a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800207c:	4b0e      	ldr	r3, [pc, #56]	; (80020b8 <HAL_UART_MspInit+0xac>)
 800207e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002080:	f003 0301 	and.w	r3, r3, #1
 8002084:	60bb      	str	r3, [r7, #8]
 8002086:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|GPIO_PIN_3;
 8002088:	230c      	movs	r3, #12
 800208a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800208c:	2302      	movs	r3, #2
 800208e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002090:	2300      	movs	r3, #0
 8002092:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002094:	2303      	movs	r3, #3
 8002096:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002098:	2307      	movs	r3, #7
 800209a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800209c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80020a0:	4619      	mov	r1, r3
 80020a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020a6:	f000 faf1 	bl	800268c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80020aa:	bf00      	nop
 80020ac:	3778      	adds	r7, #120	; 0x78
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	40004400 	.word	0x40004400
 80020b8:	40021000 	.word	0x40021000

080020bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020c0:	e7fe      	b.n	80020c0 <NMI_Handler+0x4>

080020c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020c2:	b480      	push	{r7}
 80020c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020c6:	e7fe      	b.n	80020c6 <HardFault_Handler+0x4>

080020c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020cc:	e7fe      	b.n	80020cc <MemManage_Handler+0x4>

080020ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020ce:	b480      	push	{r7}
 80020d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020d2:	e7fe      	b.n	80020d2 <BusFault_Handler+0x4>

080020d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020d8:	e7fe      	b.n	80020d8 <UsageFault_Handler+0x4>

080020da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020da:	b480      	push	{r7}
 80020dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020de:	bf00      	nop
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020ec:	bf00      	nop
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr

080020f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020f6:	b480      	push	{r7}
 80020f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020fa:	bf00      	nop
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002108:	f000 f98e 	bl	8002428 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800210c:	bf00      	nop
 800210e:	bd80      	pop	{r7, pc}

08002110 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002114:	4802      	ldr	r0, [pc, #8]	; (8002120 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8002116:	f002 fe13 	bl	8004d40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 800211a:	bf00      	nop
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	2000024c 	.word	0x2000024c

08002124 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002128:	4803      	ldr	r0, [pc, #12]	; (8002138 <TIM1_UP_TIM16_IRQHandler+0x14>)
 800212a:	f002 fe09 	bl	8004d40 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 800212e:	4803      	ldr	r0, [pc, #12]	; (800213c <TIM1_UP_TIM16_IRQHandler+0x18>)
 8002130:	f002 fe06 	bl	8004d40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002134:	bf00      	nop
 8002136:	bd80      	pop	{r7, pc}
 8002138:	2000024c 	.word	0x2000024c
 800213c:	200002e4 	.word	0x200002e4

08002140 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002144:	4802      	ldr	r0, [pc, #8]	; (8002150 <TIM1_TRG_COM_IRQHandler+0x10>)
 8002146:	f002 fdfb 	bl	8004d40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 800214a:	bf00      	nop
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	2000024c 	.word	0x2000024c

08002154 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002158:	4802      	ldr	r0, [pc, #8]	; (8002164 <TIM1_CC_IRQHandler+0x10>)
 800215a:	f002 fdf1 	bl	8004d40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800215e:	bf00      	nop
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	2000024c 	.word	0x2000024c

08002168 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800216c:	4802      	ldr	r0, [pc, #8]	; (8002178 <TIM6_DAC_IRQHandler+0x10>)
 800216e:	f002 fde7 	bl	8004d40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002172:	bf00      	nop
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	20000298 	.word	0x20000298

0800217c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  return 1;
 8002180:	2301      	movs	r3, #1
}
 8002182:	4618      	mov	r0, r3
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr

0800218c <_kill>:

int _kill(int pid, int sig)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002196:	f004 fa55 	bl	8006644 <__errno>
 800219a:	4603      	mov	r3, r0
 800219c:	2216      	movs	r2, #22
 800219e:	601a      	str	r2, [r3, #0]
  return -1;
 80021a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3708      	adds	r7, #8
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}

080021ac <_exit>:

void _exit (int status)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80021b4:	f04f 31ff 	mov.w	r1, #4294967295
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f7ff ffe7 	bl	800218c <_kill>
  while (1) {}    /* Make sure we hang here */
 80021be:	e7fe      	b.n	80021be <_exit+0x12>

080021c0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b086      	sub	sp, #24
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	60b9      	str	r1, [r7, #8]
 80021ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021cc:	2300      	movs	r3, #0
 80021ce:	617b      	str	r3, [r7, #20]
 80021d0:	e00a      	b.n	80021e8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80021d2:	f3af 8000 	nop.w
 80021d6:	4601      	mov	r1, r0
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	1c5a      	adds	r2, r3, #1
 80021dc:	60ba      	str	r2, [r7, #8]
 80021de:	b2ca      	uxtb	r2, r1
 80021e0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	3301      	adds	r3, #1
 80021e6:	617b      	str	r3, [r7, #20]
 80021e8:	697a      	ldr	r2, [r7, #20]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	dbf0      	blt.n	80021d2 <_read+0x12>
  }

  return len;
 80021f0:	687b      	ldr	r3, [r7, #4]
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3718      	adds	r7, #24
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021fa:	b580      	push	{r7, lr}
 80021fc:	b086      	sub	sp, #24
 80021fe:	af00      	add	r7, sp, #0
 8002200:	60f8      	str	r0, [r7, #12]
 8002202:	60b9      	str	r1, [r7, #8]
 8002204:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002206:	2300      	movs	r3, #0
 8002208:	617b      	str	r3, [r7, #20]
 800220a:	e009      	b.n	8002220 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	1c5a      	adds	r2, r3, #1
 8002210:	60ba      	str	r2, [r7, #8]
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	4618      	mov	r0, r3
 8002216:	f7fe fe99 	bl	8000f4c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	3301      	adds	r3, #1
 800221e:	617b      	str	r3, [r7, #20]
 8002220:	697a      	ldr	r2, [r7, #20]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	429a      	cmp	r2, r3
 8002226:	dbf1      	blt.n	800220c <_write+0x12>
  }
  return len;
 8002228:	687b      	ldr	r3, [r7, #4]
}
 800222a:	4618      	mov	r0, r3
 800222c:	3718      	adds	r7, #24
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}

08002232 <_close>:

int _close(int file)
{
 8002232:	b480      	push	{r7}
 8002234:	b083      	sub	sp, #12
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800223a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800223e:	4618      	mov	r0, r3
 8002240:	370c      	adds	r7, #12
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr

0800224a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800224a:	b480      	push	{r7}
 800224c:	b083      	sub	sp, #12
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]
 8002252:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800225a:	605a      	str	r2, [r3, #4]
  return 0;
 800225c:	2300      	movs	r3, #0
}
 800225e:	4618      	mov	r0, r3
 8002260:	370c      	adds	r7, #12
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr

0800226a <_isatty>:

int _isatty(int file)
{
 800226a:	b480      	push	{r7}
 800226c:	b083      	sub	sp, #12
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002272:	2301      	movs	r3, #1
}
 8002274:	4618      	mov	r0, r3
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002280:	b480      	push	{r7}
 8002282:	b085      	sub	sp, #20
 8002284:	af00      	add	r7, sp, #0
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	60b9      	str	r1, [r7, #8]
 800228a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800228c:	2300      	movs	r3, #0
}
 800228e:	4618      	mov	r0, r3
 8002290:	3714      	adds	r7, #20
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
	...

0800229c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b086      	sub	sp, #24
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022a4:	4a14      	ldr	r2, [pc, #80]	; (80022f8 <_sbrk+0x5c>)
 80022a6:	4b15      	ldr	r3, [pc, #84]	; (80022fc <_sbrk+0x60>)
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022b0:	4b13      	ldr	r3, [pc, #76]	; (8002300 <_sbrk+0x64>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d102      	bne.n	80022be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022b8:	4b11      	ldr	r3, [pc, #68]	; (8002300 <_sbrk+0x64>)
 80022ba:	4a12      	ldr	r2, [pc, #72]	; (8002304 <_sbrk+0x68>)
 80022bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022be:	4b10      	ldr	r3, [pc, #64]	; (8002300 <_sbrk+0x64>)
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4413      	add	r3, r2
 80022c6:	693a      	ldr	r2, [r7, #16]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d207      	bcs.n	80022dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022cc:	f004 f9ba 	bl	8006644 <__errno>
 80022d0:	4603      	mov	r3, r0
 80022d2:	220c      	movs	r2, #12
 80022d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022d6:	f04f 33ff 	mov.w	r3, #4294967295
 80022da:	e009      	b.n	80022f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022dc:	4b08      	ldr	r3, [pc, #32]	; (8002300 <_sbrk+0x64>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022e2:	4b07      	ldr	r3, [pc, #28]	; (8002300 <_sbrk+0x64>)
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4413      	add	r3, r2
 80022ea:	4a05      	ldr	r2, [pc, #20]	; (8002300 <_sbrk+0x64>)
 80022ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022ee:	68fb      	ldr	r3, [r7, #12]
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3718      	adds	r7, #24
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	20010000 	.word	0x20010000
 80022fc:	00000400 	.word	0x00000400
 8002300:	200003e8 	.word	0x200003e8
 8002304:	20000400 	.word	0x20000400

08002308 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800230c:	4b06      	ldr	r3, [pc, #24]	; (8002328 <SystemInit+0x20>)
 800230e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002312:	4a05      	ldr	r2, [pc, #20]	; (8002328 <SystemInit+0x20>)
 8002314:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002318:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800231c:	bf00      	nop
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	e000ed00 	.word	0xe000ed00

0800232c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800232c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002364 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002330:	f7ff ffea 	bl	8002308 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002334:	480c      	ldr	r0, [pc, #48]	; (8002368 <LoopForever+0x6>)
  ldr r1, =_edata
 8002336:	490d      	ldr	r1, [pc, #52]	; (800236c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002338:	4a0d      	ldr	r2, [pc, #52]	; (8002370 <LoopForever+0xe>)
  movs r3, #0
 800233a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800233c:	e002      	b.n	8002344 <LoopCopyDataInit>

0800233e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800233e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002340:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002342:	3304      	adds	r3, #4

08002344 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002344:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002346:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002348:	d3f9      	bcc.n	800233e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800234a:	4a0a      	ldr	r2, [pc, #40]	; (8002374 <LoopForever+0x12>)
  ldr r4, =_ebss
 800234c:	4c0a      	ldr	r4, [pc, #40]	; (8002378 <LoopForever+0x16>)
  movs r3, #0
 800234e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002350:	e001      	b.n	8002356 <LoopFillZerobss>

08002352 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002352:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002354:	3204      	adds	r2, #4

08002356 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002356:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002358:	d3fb      	bcc.n	8002352 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800235a:	f004 f979 	bl	8006650 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800235e:	f7ff f92f 	bl	80015c0 <main>

08002362 <LoopForever>:

LoopForever:
    b LoopForever
 8002362:	e7fe      	b.n	8002362 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002364:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002368:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800236c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002370:	08009a54 	.word	0x08009a54
  ldr r2, =_sbss
 8002374:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002378:	20000400 	.word	0x20000400

0800237c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800237c:	e7fe      	b.n	800237c <ADC1_IRQHandler>

0800237e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800237e:	b580      	push	{r7, lr}
 8002380:	b082      	sub	sp, #8
 8002382:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002384:	2300      	movs	r3, #0
 8002386:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002388:	2003      	movs	r0, #3
 800238a:	f000 f93d 	bl	8002608 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800238e:	2000      	movs	r0, #0
 8002390:	f000 f80e 	bl	80023b0 <HAL_InitTick>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d002      	beq.n	80023a0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	71fb      	strb	r3, [r7, #7]
 800239e:	e001      	b.n	80023a4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80023a0:	f7ff fce6 	bl	8001d70 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80023a4:	79fb      	ldrb	r3, [r7, #7]
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3708      	adds	r7, #8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
	...

080023b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80023b8:	2300      	movs	r3, #0
 80023ba:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80023bc:	4b17      	ldr	r3, [pc, #92]	; (800241c <HAL_InitTick+0x6c>)
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d023      	beq.n	800240c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80023c4:	4b16      	ldr	r3, [pc, #88]	; (8002420 <HAL_InitTick+0x70>)
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	4b14      	ldr	r3, [pc, #80]	; (800241c <HAL_InitTick+0x6c>)
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	4619      	mov	r1, r3
 80023ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80023d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80023da:	4618      	mov	r0, r3
 80023dc:	f000 f949 	bl	8002672 <HAL_SYSTICK_Config>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d10f      	bne.n	8002406 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2b0f      	cmp	r3, #15
 80023ea:	d809      	bhi.n	8002400 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023ec:	2200      	movs	r2, #0
 80023ee:	6879      	ldr	r1, [r7, #4]
 80023f0:	f04f 30ff 	mov.w	r0, #4294967295
 80023f4:	f000 f913 	bl	800261e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80023f8:	4a0a      	ldr	r2, [pc, #40]	; (8002424 <HAL_InitTick+0x74>)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6013      	str	r3, [r2, #0]
 80023fe:	e007      	b.n	8002410 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	73fb      	strb	r3, [r7, #15]
 8002404:	e004      	b.n	8002410 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	73fb      	strb	r3, [r7, #15]
 800240a:	e001      	b.n	8002410 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002410:	7bfb      	ldrb	r3, [r7, #15]
}
 8002412:	4618      	mov	r0, r3
 8002414:	3710      	adds	r7, #16
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	20000008 	.word	0x20000008
 8002420:	20000000 	.word	0x20000000
 8002424:	20000004 	.word	0x20000004

08002428 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800242c:	4b06      	ldr	r3, [pc, #24]	; (8002448 <HAL_IncTick+0x20>)
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	461a      	mov	r2, r3
 8002432:	4b06      	ldr	r3, [pc, #24]	; (800244c <HAL_IncTick+0x24>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4413      	add	r3, r2
 8002438:	4a04      	ldr	r2, [pc, #16]	; (800244c <HAL_IncTick+0x24>)
 800243a:	6013      	str	r3, [r2, #0]
}
 800243c:	bf00      	nop
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	20000008 	.word	0x20000008
 800244c:	200003ec 	.word	0x200003ec

08002450 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  return uwTick;
 8002454:	4b03      	ldr	r3, [pc, #12]	; (8002464 <HAL_GetTick+0x14>)
 8002456:	681b      	ldr	r3, [r3, #0]
}
 8002458:	4618      	mov	r0, r3
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	200003ec 	.word	0x200003ec

08002468 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002468:	b480      	push	{r7}
 800246a:	b085      	sub	sp, #20
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f003 0307 	and.w	r3, r3, #7
 8002476:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002478:	4b0c      	ldr	r3, [pc, #48]	; (80024ac <__NVIC_SetPriorityGrouping+0x44>)
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800247e:	68ba      	ldr	r2, [r7, #8]
 8002480:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002484:	4013      	ands	r3, r2
 8002486:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002490:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002494:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002498:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800249a:	4a04      	ldr	r2, [pc, #16]	; (80024ac <__NVIC_SetPriorityGrouping+0x44>)
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	60d3      	str	r3, [r2, #12]
}
 80024a0:	bf00      	nop
 80024a2:	3714      	adds	r7, #20
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr
 80024ac:	e000ed00 	.word	0xe000ed00

080024b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024b4:	4b04      	ldr	r3, [pc, #16]	; (80024c8 <__NVIC_GetPriorityGrouping+0x18>)
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	0a1b      	lsrs	r3, r3, #8
 80024ba:	f003 0307 	and.w	r3, r3, #7
}
 80024be:	4618      	mov	r0, r3
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr
 80024c8:	e000ed00 	.word	0xe000ed00

080024cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	4603      	mov	r3, r0
 80024d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	db0b      	blt.n	80024f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024de:	79fb      	ldrb	r3, [r7, #7]
 80024e0:	f003 021f 	and.w	r2, r3, #31
 80024e4:	4907      	ldr	r1, [pc, #28]	; (8002504 <__NVIC_EnableIRQ+0x38>)
 80024e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ea:	095b      	lsrs	r3, r3, #5
 80024ec:	2001      	movs	r0, #1
 80024ee:	fa00 f202 	lsl.w	r2, r0, r2
 80024f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80024f6:	bf00      	nop
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	e000e100 	.word	0xe000e100

08002508 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	4603      	mov	r3, r0
 8002510:	6039      	str	r1, [r7, #0]
 8002512:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002514:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002518:	2b00      	cmp	r3, #0
 800251a:	db0a      	blt.n	8002532 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	b2da      	uxtb	r2, r3
 8002520:	490c      	ldr	r1, [pc, #48]	; (8002554 <__NVIC_SetPriority+0x4c>)
 8002522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002526:	0112      	lsls	r2, r2, #4
 8002528:	b2d2      	uxtb	r2, r2
 800252a:	440b      	add	r3, r1
 800252c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002530:	e00a      	b.n	8002548 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	b2da      	uxtb	r2, r3
 8002536:	4908      	ldr	r1, [pc, #32]	; (8002558 <__NVIC_SetPriority+0x50>)
 8002538:	79fb      	ldrb	r3, [r7, #7]
 800253a:	f003 030f 	and.w	r3, r3, #15
 800253e:	3b04      	subs	r3, #4
 8002540:	0112      	lsls	r2, r2, #4
 8002542:	b2d2      	uxtb	r2, r2
 8002544:	440b      	add	r3, r1
 8002546:	761a      	strb	r2, [r3, #24]
}
 8002548:	bf00      	nop
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr
 8002554:	e000e100 	.word	0xe000e100
 8002558:	e000ed00 	.word	0xe000ed00

0800255c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800255c:	b480      	push	{r7}
 800255e:	b089      	sub	sp, #36	; 0x24
 8002560:	af00      	add	r7, sp, #0
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f003 0307 	and.w	r3, r3, #7
 800256e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	f1c3 0307 	rsb	r3, r3, #7
 8002576:	2b04      	cmp	r3, #4
 8002578:	bf28      	it	cs
 800257a:	2304      	movcs	r3, #4
 800257c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	3304      	adds	r3, #4
 8002582:	2b06      	cmp	r3, #6
 8002584:	d902      	bls.n	800258c <NVIC_EncodePriority+0x30>
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	3b03      	subs	r3, #3
 800258a:	e000      	b.n	800258e <NVIC_EncodePriority+0x32>
 800258c:	2300      	movs	r3, #0
 800258e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002590:	f04f 32ff 	mov.w	r2, #4294967295
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	fa02 f303 	lsl.w	r3, r2, r3
 800259a:	43da      	mvns	r2, r3
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	401a      	ands	r2, r3
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025a4:	f04f 31ff 	mov.w	r1, #4294967295
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	fa01 f303 	lsl.w	r3, r1, r3
 80025ae:	43d9      	mvns	r1, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025b4:	4313      	orrs	r3, r2
         );
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3724      	adds	r7, #36	; 0x24
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
	...

080025c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	3b01      	subs	r3, #1
 80025d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025d4:	d301      	bcc.n	80025da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025d6:	2301      	movs	r3, #1
 80025d8:	e00f      	b.n	80025fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025da:	4a0a      	ldr	r2, [pc, #40]	; (8002604 <SysTick_Config+0x40>)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	3b01      	subs	r3, #1
 80025e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025e2:	210f      	movs	r1, #15
 80025e4:	f04f 30ff 	mov.w	r0, #4294967295
 80025e8:	f7ff ff8e 	bl	8002508 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025ec:	4b05      	ldr	r3, [pc, #20]	; (8002604 <SysTick_Config+0x40>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025f2:	4b04      	ldr	r3, [pc, #16]	; (8002604 <SysTick_Config+0x40>)
 80025f4:	2207      	movs	r2, #7
 80025f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025f8:	2300      	movs	r3, #0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3708      	adds	r7, #8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	e000e010 	.word	0xe000e010

08002608 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f7ff ff29 	bl	8002468 <__NVIC_SetPriorityGrouping>
}
 8002616:	bf00      	nop
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}

0800261e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800261e:	b580      	push	{r7, lr}
 8002620:	b086      	sub	sp, #24
 8002622:	af00      	add	r7, sp, #0
 8002624:	4603      	mov	r3, r0
 8002626:	60b9      	str	r1, [r7, #8]
 8002628:	607a      	str	r2, [r7, #4]
 800262a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800262c:	2300      	movs	r3, #0
 800262e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002630:	f7ff ff3e 	bl	80024b0 <__NVIC_GetPriorityGrouping>
 8002634:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	68b9      	ldr	r1, [r7, #8]
 800263a:	6978      	ldr	r0, [r7, #20]
 800263c:	f7ff ff8e 	bl	800255c <NVIC_EncodePriority>
 8002640:	4602      	mov	r2, r0
 8002642:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002646:	4611      	mov	r1, r2
 8002648:	4618      	mov	r0, r3
 800264a:	f7ff ff5d 	bl	8002508 <__NVIC_SetPriority>
}
 800264e:	bf00      	nop
 8002650:	3718      	adds	r7, #24
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}

08002656 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002656:	b580      	push	{r7, lr}
 8002658:	b082      	sub	sp, #8
 800265a:	af00      	add	r7, sp, #0
 800265c:	4603      	mov	r3, r0
 800265e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002660:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002664:	4618      	mov	r0, r3
 8002666:	f7ff ff31 	bl	80024cc <__NVIC_EnableIRQ>
}
 800266a:	bf00      	nop
 800266c:	3708      	adds	r7, #8
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}

08002672 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002672:	b580      	push	{r7, lr}
 8002674:	b082      	sub	sp, #8
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f7ff ffa2 	bl	80025c4 <SysTick_Config>
 8002680:	4603      	mov	r3, r0
}
 8002682:	4618      	mov	r0, r3
 8002684:	3708      	adds	r7, #8
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
	...

0800268c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800268c:	b480      	push	{r7}
 800268e:	b087      	sub	sp, #28
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002696:	2300      	movs	r3, #0
 8002698:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800269a:	e148      	b.n	800292e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	2101      	movs	r1, #1
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	fa01 f303 	lsl.w	r3, r1, r3
 80026a8:	4013      	ands	r3, r2
 80026aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	f000 813a 	beq.w	8002928 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f003 0303 	and.w	r3, r3, #3
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d005      	beq.n	80026cc <HAL_GPIO_Init+0x40>
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f003 0303 	and.w	r3, r3, #3
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d130      	bne.n	800272e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	005b      	lsls	r3, r3, #1
 80026d6:	2203      	movs	r2, #3
 80026d8:	fa02 f303 	lsl.w	r3, r2, r3
 80026dc:	43db      	mvns	r3, r3
 80026de:	693a      	ldr	r2, [r7, #16]
 80026e0:	4013      	ands	r3, r2
 80026e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	68da      	ldr	r2, [r3, #12]
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	fa02 f303 	lsl.w	r3, r2, r3
 80026f0:	693a      	ldr	r2, [r7, #16]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	693a      	ldr	r2, [r7, #16]
 80026fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002702:	2201      	movs	r2, #1
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	fa02 f303 	lsl.w	r3, r2, r3
 800270a:	43db      	mvns	r3, r3
 800270c:	693a      	ldr	r2, [r7, #16]
 800270e:	4013      	ands	r3, r2
 8002710:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	091b      	lsrs	r3, r3, #4
 8002718:	f003 0201 	and.w	r2, r3, #1
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	fa02 f303 	lsl.w	r3, r2, r3
 8002722:	693a      	ldr	r2, [r7, #16]
 8002724:	4313      	orrs	r3, r2
 8002726:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	693a      	ldr	r2, [r7, #16]
 800272c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f003 0303 	and.w	r3, r3, #3
 8002736:	2b03      	cmp	r3, #3
 8002738:	d017      	beq.n	800276a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	005b      	lsls	r3, r3, #1
 8002744:	2203      	movs	r2, #3
 8002746:	fa02 f303 	lsl.w	r3, r2, r3
 800274a:	43db      	mvns	r3, r3
 800274c:	693a      	ldr	r2, [r7, #16]
 800274e:	4013      	ands	r3, r2
 8002750:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	689a      	ldr	r2, [r3, #8]
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	005b      	lsls	r3, r3, #1
 800275a:	fa02 f303 	lsl.w	r3, r2, r3
 800275e:	693a      	ldr	r2, [r7, #16]
 8002760:	4313      	orrs	r3, r2
 8002762:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	693a      	ldr	r2, [r7, #16]
 8002768:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f003 0303 	and.w	r3, r3, #3
 8002772:	2b02      	cmp	r3, #2
 8002774:	d123      	bne.n	80027be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	08da      	lsrs	r2, r3, #3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	3208      	adds	r2, #8
 800277e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002782:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	f003 0307 	and.w	r3, r3, #7
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	220f      	movs	r2, #15
 800278e:	fa02 f303 	lsl.w	r3, r2, r3
 8002792:	43db      	mvns	r3, r3
 8002794:	693a      	ldr	r2, [r7, #16]
 8002796:	4013      	ands	r3, r2
 8002798:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	691a      	ldr	r2, [r3, #16]
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	f003 0307 	and.w	r3, r3, #7
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	fa02 f303 	lsl.w	r3, r2, r3
 80027aa:	693a      	ldr	r2, [r7, #16]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	08da      	lsrs	r2, r3, #3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	3208      	adds	r2, #8
 80027b8:	6939      	ldr	r1, [r7, #16]
 80027ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	005b      	lsls	r3, r3, #1
 80027c8:	2203      	movs	r2, #3
 80027ca:	fa02 f303 	lsl.w	r3, r2, r3
 80027ce:	43db      	mvns	r3, r3
 80027d0:	693a      	ldr	r2, [r7, #16]
 80027d2:	4013      	ands	r3, r2
 80027d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f003 0203 	and.w	r2, r3, #3
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	fa02 f303 	lsl.w	r3, r2, r3
 80027e6:	693a      	ldr	r2, [r7, #16]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	693a      	ldr	r2, [r7, #16]
 80027f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	f000 8094 	beq.w	8002928 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002800:	4b52      	ldr	r3, [pc, #328]	; (800294c <HAL_GPIO_Init+0x2c0>)
 8002802:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002804:	4a51      	ldr	r2, [pc, #324]	; (800294c <HAL_GPIO_Init+0x2c0>)
 8002806:	f043 0301 	orr.w	r3, r3, #1
 800280a:	6613      	str	r3, [r2, #96]	; 0x60
 800280c:	4b4f      	ldr	r3, [pc, #316]	; (800294c <HAL_GPIO_Init+0x2c0>)
 800280e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002810:	f003 0301 	and.w	r3, r3, #1
 8002814:	60bb      	str	r3, [r7, #8]
 8002816:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002818:	4a4d      	ldr	r2, [pc, #308]	; (8002950 <HAL_GPIO_Init+0x2c4>)
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	089b      	lsrs	r3, r3, #2
 800281e:	3302      	adds	r3, #2
 8002820:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002824:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	f003 0303 	and.w	r3, r3, #3
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	220f      	movs	r2, #15
 8002830:	fa02 f303 	lsl.w	r3, r2, r3
 8002834:	43db      	mvns	r3, r3
 8002836:	693a      	ldr	r2, [r7, #16]
 8002838:	4013      	ands	r3, r2
 800283a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002842:	d00d      	beq.n	8002860 <HAL_GPIO_Init+0x1d4>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	4a43      	ldr	r2, [pc, #268]	; (8002954 <HAL_GPIO_Init+0x2c8>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d007      	beq.n	800285c <HAL_GPIO_Init+0x1d0>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	4a42      	ldr	r2, [pc, #264]	; (8002958 <HAL_GPIO_Init+0x2cc>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d101      	bne.n	8002858 <HAL_GPIO_Init+0x1cc>
 8002854:	2302      	movs	r3, #2
 8002856:	e004      	b.n	8002862 <HAL_GPIO_Init+0x1d6>
 8002858:	2307      	movs	r3, #7
 800285a:	e002      	b.n	8002862 <HAL_GPIO_Init+0x1d6>
 800285c:	2301      	movs	r3, #1
 800285e:	e000      	b.n	8002862 <HAL_GPIO_Init+0x1d6>
 8002860:	2300      	movs	r3, #0
 8002862:	697a      	ldr	r2, [r7, #20]
 8002864:	f002 0203 	and.w	r2, r2, #3
 8002868:	0092      	lsls	r2, r2, #2
 800286a:	4093      	lsls	r3, r2
 800286c:	693a      	ldr	r2, [r7, #16]
 800286e:	4313      	orrs	r3, r2
 8002870:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002872:	4937      	ldr	r1, [pc, #220]	; (8002950 <HAL_GPIO_Init+0x2c4>)
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	089b      	lsrs	r3, r3, #2
 8002878:	3302      	adds	r3, #2
 800287a:	693a      	ldr	r2, [r7, #16]
 800287c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002880:	4b36      	ldr	r3, [pc, #216]	; (800295c <HAL_GPIO_Init+0x2d0>)
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	43db      	mvns	r3, r3
 800288a:	693a      	ldr	r2, [r7, #16]
 800288c:	4013      	ands	r3, r2
 800288e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d003      	beq.n	80028a4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800289c:	693a      	ldr	r2, [r7, #16]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80028a4:	4a2d      	ldr	r2, [pc, #180]	; (800295c <HAL_GPIO_Init+0x2d0>)
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80028aa:	4b2c      	ldr	r3, [pc, #176]	; (800295c <HAL_GPIO_Init+0x2d0>)
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	43db      	mvns	r3, r3
 80028b4:	693a      	ldr	r2, [r7, #16]
 80028b6:	4013      	ands	r3, r2
 80028b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d003      	beq.n	80028ce <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80028c6:	693a      	ldr	r2, [r7, #16]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80028ce:	4a23      	ldr	r2, [pc, #140]	; (800295c <HAL_GPIO_Init+0x2d0>)
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80028d4:	4b21      	ldr	r3, [pc, #132]	; (800295c <HAL_GPIO_Init+0x2d0>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	43db      	mvns	r3, r3
 80028de:	693a      	ldr	r2, [r7, #16]
 80028e0:	4013      	ands	r3, r2
 80028e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d003      	beq.n	80028f8 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80028f0:	693a      	ldr	r2, [r7, #16]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80028f8:	4a18      	ldr	r2, [pc, #96]	; (800295c <HAL_GPIO_Init+0x2d0>)
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80028fe:	4b17      	ldr	r3, [pc, #92]	; (800295c <HAL_GPIO_Init+0x2d0>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	43db      	mvns	r3, r3
 8002908:	693a      	ldr	r2, [r7, #16]
 800290a:	4013      	ands	r3, r2
 800290c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d003      	beq.n	8002922 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800291a:	693a      	ldr	r2, [r7, #16]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	4313      	orrs	r3, r2
 8002920:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002922:	4a0e      	ldr	r2, [pc, #56]	; (800295c <HAL_GPIO_Init+0x2d0>)
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	3301      	adds	r3, #1
 800292c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	fa22 f303 	lsr.w	r3, r2, r3
 8002938:	2b00      	cmp	r3, #0
 800293a:	f47f aeaf 	bne.w	800269c <HAL_GPIO_Init+0x10>
  }
}
 800293e:	bf00      	nop
 8002940:	bf00      	nop
 8002942:	371c      	adds	r7, #28
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr
 800294c:	40021000 	.word	0x40021000
 8002950:	40010000 	.word	0x40010000
 8002954:	48000400 	.word	0x48000400
 8002958:	48000800 	.word	0x48000800
 800295c:	40010400 	.word	0x40010400

08002960 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	460b      	mov	r3, r1
 800296a:	807b      	strh	r3, [r7, #2]
 800296c:	4613      	mov	r3, r2
 800296e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002970:	787b      	ldrb	r3, [r7, #1]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d003      	beq.n	800297e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002976:	887a      	ldrh	r2, [r7, #2]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800297c:	e002      	b.n	8002984 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800297e:	887a      	ldrh	r2, [r7, #2]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002984:	bf00      	nop
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d101      	bne.n	80029a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e081      	b.n	8002aa6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d106      	bne.n	80029bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f7ff f9fe 	bl	8001db8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2224      	movs	r2, #36	; 0x24
 80029c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f022 0201 	bic.w	r2, r2, #1
 80029d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	685a      	ldr	r2, [r3, #4]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029e0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	689a      	ldr	r2, [r3, #8]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029f0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d107      	bne.n	8002a0a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	689a      	ldr	r2, [r3, #8]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a06:	609a      	str	r2, [r3, #8]
 8002a08:	e006      	b.n	8002a18 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	689a      	ldr	r2, [r3, #8]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002a16:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d104      	bne.n	8002a2a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a28:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	6812      	ldr	r2, [r2, #0]
 8002a34:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a3c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	68da      	ldr	r2, [r3, #12]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a4c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	691a      	ldr	r2, [r3, #16]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	695b      	ldr	r3, [r3, #20]
 8002a56:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	699b      	ldr	r3, [r3, #24]
 8002a5e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	430a      	orrs	r2, r1
 8002a66:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	69d9      	ldr	r1, [r3, #28]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6a1a      	ldr	r2, [r3, #32]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	430a      	orrs	r2, r1
 8002a76:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f042 0201 	orr.w	r2, r2, #1
 8002a86:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2220      	movs	r2, #32
 8002a92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3708      	adds	r7, #8
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
	...

08002ab0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b088      	sub	sp, #32
 8002ab4:	af02      	add	r7, sp, #8
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	4608      	mov	r0, r1
 8002aba:	4611      	mov	r1, r2
 8002abc:	461a      	mov	r2, r3
 8002abe:	4603      	mov	r3, r0
 8002ac0:	817b      	strh	r3, [r7, #10]
 8002ac2:	460b      	mov	r3, r1
 8002ac4:	813b      	strh	r3, [r7, #8]
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	2b20      	cmp	r3, #32
 8002ad4:	f040 80f9 	bne.w	8002cca <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ad8:	6a3b      	ldr	r3, [r7, #32]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d002      	beq.n	8002ae4 <HAL_I2C_Mem_Write+0x34>
 8002ade:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d105      	bne.n	8002af0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002aea:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e0ed      	b.n	8002ccc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d101      	bne.n	8002afe <HAL_I2C_Mem_Write+0x4e>
 8002afa:	2302      	movs	r3, #2
 8002afc:	e0e6      	b.n	8002ccc <HAL_I2C_Mem_Write+0x21c>
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2201      	movs	r2, #1
 8002b02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002b06:	f7ff fca3 	bl	8002450 <HAL_GetTick>
 8002b0a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	9300      	str	r3, [sp, #0]
 8002b10:	2319      	movs	r3, #25
 8002b12:	2201      	movs	r2, #1
 8002b14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b18:	68f8      	ldr	r0, [r7, #12]
 8002b1a:	f000 fac3 	bl	80030a4 <I2C_WaitOnFlagUntilTimeout>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d001      	beq.n	8002b28 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e0d1      	b.n	8002ccc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2221      	movs	r2, #33	; 0x21
 8002b2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2240      	movs	r2, #64	; 0x40
 8002b34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	6a3a      	ldr	r2, [r7, #32]
 8002b42:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002b48:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b50:	88f8      	ldrh	r0, [r7, #6]
 8002b52:	893a      	ldrh	r2, [r7, #8]
 8002b54:	8979      	ldrh	r1, [r7, #10]
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	9301      	str	r3, [sp, #4]
 8002b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b5c:	9300      	str	r3, [sp, #0]
 8002b5e:	4603      	mov	r3, r0
 8002b60:	68f8      	ldr	r0, [r7, #12]
 8002b62:	f000 f9d3 	bl	8002f0c <I2C_RequestMemoryWrite>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d005      	beq.n	8002b78 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e0a9      	b.n	8002ccc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	2bff      	cmp	r3, #255	; 0xff
 8002b80:	d90e      	bls.n	8002ba0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	22ff      	movs	r2, #255	; 0xff
 8002b86:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b8c:	b2da      	uxtb	r2, r3
 8002b8e:	8979      	ldrh	r1, [r7, #10]
 8002b90:	2300      	movs	r3, #0
 8002b92:	9300      	str	r3, [sp, #0]
 8002b94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b98:	68f8      	ldr	r0, [r7, #12]
 8002b9a:	f000 fc2b 	bl	80033f4 <I2C_TransferConfig>
 8002b9e:	e00f      	b.n	8002bc0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ba4:	b29a      	uxth	r2, r3
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bae:	b2da      	uxtb	r2, r3
 8002bb0:	8979      	ldrh	r1, [r7, #10]
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	9300      	str	r3, [sp, #0]
 8002bb6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bba:	68f8      	ldr	r0, [r7, #12]
 8002bbc:	f000 fc1a 	bl	80033f4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bc0:	697a      	ldr	r2, [r7, #20]
 8002bc2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002bc4:	68f8      	ldr	r0, [r7, #12]
 8002bc6:	f000 faad 	bl	8003124 <I2C_WaitOnTXISFlagUntilTimeout>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d001      	beq.n	8002bd4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e07b      	b.n	8002ccc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd8:	781a      	ldrb	r2, [r3, #0]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be4:	1c5a      	adds	r2, r3, #1
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	3b01      	subs	r3, #1
 8002bf2:	b29a      	uxth	r2, r3
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bfc:	3b01      	subs	r3, #1
 8002bfe:	b29a      	uxth	r2, r3
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d034      	beq.n	8002c78 <HAL_I2C_Mem_Write+0x1c8>
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d130      	bne.n	8002c78 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	9300      	str	r3, [sp, #0]
 8002c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	2180      	movs	r1, #128	; 0x80
 8002c20:	68f8      	ldr	r0, [r7, #12]
 8002c22:	f000 fa3f 	bl	80030a4 <I2C_WaitOnFlagUntilTimeout>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d001      	beq.n	8002c30 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e04d      	b.n	8002ccc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	2bff      	cmp	r3, #255	; 0xff
 8002c38:	d90e      	bls.n	8002c58 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	22ff      	movs	r2, #255	; 0xff
 8002c3e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c44:	b2da      	uxtb	r2, r3
 8002c46:	8979      	ldrh	r1, [r7, #10]
 8002c48:	2300      	movs	r3, #0
 8002c4a:	9300      	str	r3, [sp, #0]
 8002c4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c50:	68f8      	ldr	r0, [r7, #12]
 8002c52:	f000 fbcf 	bl	80033f4 <I2C_TransferConfig>
 8002c56:	e00f      	b.n	8002c78 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c5c:	b29a      	uxth	r2, r3
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c66:	b2da      	uxtb	r2, r3
 8002c68:	8979      	ldrh	r1, [r7, #10]
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	9300      	str	r3, [sp, #0]
 8002c6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c72:	68f8      	ldr	r0, [r7, #12]
 8002c74:	f000 fbbe 	bl	80033f4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d19e      	bne.n	8002bc0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c82:	697a      	ldr	r2, [r7, #20]
 8002c84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c86:	68f8      	ldr	r0, [r7, #12]
 8002c88:	f000 fa8c 	bl	80031a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d001      	beq.n	8002c96 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e01a      	b.n	8002ccc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	2220      	movs	r2, #32
 8002c9c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	6859      	ldr	r1, [r3, #4]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	4b0a      	ldr	r3, [pc, #40]	; (8002cd4 <HAL_I2C_Mem_Write+0x224>)
 8002caa:	400b      	ands	r3, r1
 8002cac:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2220      	movs	r2, #32
 8002cb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	e000      	b.n	8002ccc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002cca:	2302      	movs	r3, #2
  }
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3718      	adds	r7, #24
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	fe00e800 	.word	0xfe00e800

08002cd8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b088      	sub	sp, #32
 8002cdc:	af02      	add	r7, sp, #8
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	4608      	mov	r0, r1
 8002ce2:	4611      	mov	r1, r2
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	817b      	strh	r3, [r7, #10]
 8002cea:	460b      	mov	r3, r1
 8002cec:	813b      	strh	r3, [r7, #8]
 8002cee:	4613      	mov	r3, r2
 8002cf0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	2b20      	cmp	r3, #32
 8002cfc:	f040 80fd 	bne.w	8002efa <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d00:	6a3b      	ldr	r3, [r7, #32]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d002      	beq.n	8002d0c <HAL_I2C_Mem_Read+0x34>
 8002d06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d105      	bne.n	8002d18 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d12:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e0f1      	b.n	8002efc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d101      	bne.n	8002d26 <HAL_I2C_Mem_Read+0x4e>
 8002d22:	2302      	movs	r3, #2
 8002d24:	e0ea      	b.n	8002efc <HAL_I2C_Mem_Read+0x224>
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2201      	movs	r2, #1
 8002d2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002d2e:	f7ff fb8f 	bl	8002450 <HAL_GetTick>
 8002d32:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	9300      	str	r3, [sp, #0]
 8002d38:	2319      	movs	r3, #25
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d40:	68f8      	ldr	r0, [r7, #12]
 8002d42:	f000 f9af 	bl	80030a4 <I2C_WaitOnFlagUntilTimeout>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d001      	beq.n	8002d50 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e0d5      	b.n	8002efc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2222      	movs	r2, #34	; 0x22
 8002d54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2240      	movs	r2, #64	; 0x40
 8002d5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2200      	movs	r2, #0
 8002d64:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6a3a      	ldr	r2, [r7, #32]
 8002d6a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002d70:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2200      	movs	r2, #0
 8002d76:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d78:	88f8      	ldrh	r0, [r7, #6]
 8002d7a:	893a      	ldrh	r2, [r7, #8]
 8002d7c:	8979      	ldrh	r1, [r7, #10]
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	9301      	str	r3, [sp, #4]
 8002d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d84:	9300      	str	r3, [sp, #0]
 8002d86:	4603      	mov	r3, r0
 8002d88:	68f8      	ldr	r0, [r7, #12]
 8002d8a:	f000 f913 	bl	8002fb4 <I2C_RequestMemoryRead>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d005      	beq.n	8002da0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e0ad      	b.n	8002efc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	2bff      	cmp	r3, #255	; 0xff
 8002da8:	d90e      	bls.n	8002dc8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	22ff      	movs	r2, #255	; 0xff
 8002dae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002db4:	b2da      	uxtb	r2, r3
 8002db6:	8979      	ldrh	r1, [r7, #10]
 8002db8:	4b52      	ldr	r3, [pc, #328]	; (8002f04 <HAL_I2C_Mem_Read+0x22c>)
 8002dba:	9300      	str	r3, [sp, #0]
 8002dbc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002dc0:	68f8      	ldr	r0, [r7, #12]
 8002dc2:	f000 fb17 	bl	80033f4 <I2C_TransferConfig>
 8002dc6:	e00f      	b.n	8002de8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dcc:	b29a      	uxth	r2, r3
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dd6:	b2da      	uxtb	r2, r3
 8002dd8:	8979      	ldrh	r1, [r7, #10]
 8002dda:	4b4a      	ldr	r3, [pc, #296]	; (8002f04 <HAL_I2C_Mem_Read+0x22c>)
 8002ddc:	9300      	str	r3, [sp, #0]
 8002dde:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002de2:	68f8      	ldr	r0, [r7, #12]
 8002de4:	f000 fb06 	bl	80033f4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	9300      	str	r3, [sp, #0]
 8002dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dee:	2200      	movs	r2, #0
 8002df0:	2104      	movs	r1, #4
 8002df2:	68f8      	ldr	r0, [r7, #12]
 8002df4:	f000 f956 	bl	80030a4 <I2C_WaitOnFlagUntilTimeout>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d001      	beq.n	8002e02 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e07c      	b.n	8002efc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0c:	b2d2      	uxtb	r2, r2
 8002e0e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e14:	1c5a      	adds	r2, r3, #1
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e1e:	3b01      	subs	r3, #1
 8002e20:	b29a      	uxth	r2, r3
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	3b01      	subs	r3, #1
 8002e2e:	b29a      	uxth	r2, r3
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d034      	beq.n	8002ea8 <HAL_I2C_Mem_Read+0x1d0>
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d130      	bne.n	8002ea8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	9300      	str	r3, [sp, #0]
 8002e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	2180      	movs	r1, #128	; 0x80
 8002e50:	68f8      	ldr	r0, [r7, #12]
 8002e52:	f000 f927 	bl	80030a4 <I2C_WaitOnFlagUntilTimeout>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d001      	beq.n	8002e60 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e04d      	b.n	8002efc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	2bff      	cmp	r3, #255	; 0xff
 8002e68:	d90e      	bls.n	8002e88 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	22ff      	movs	r2, #255	; 0xff
 8002e6e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e74:	b2da      	uxtb	r2, r3
 8002e76:	8979      	ldrh	r1, [r7, #10]
 8002e78:	2300      	movs	r3, #0
 8002e7a:	9300      	str	r3, [sp, #0]
 8002e7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e80:	68f8      	ldr	r0, [r7, #12]
 8002e82:	f000 fab7 	bl	80033f4 <I2C_TransferConfig>
 8002e86:	e00f      	b.n	8002ea8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e8c:	b29a      	uxth	r2, r3
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e96:	b2da      	uxtb	r2, r3
 8002e98:	8979      	ldrh	r1, [r7, #10]
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	9300      	str	r3, [sp, #0]
 8002e9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ea2:	68f8      	ldr	r0, [r7, #12]
 8002ea4:	f000 faa6 	bl	80033f4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d19a      	bne.n	8002de8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002eb2:	697a      	ldr	r2, [r7, #20]
 8002eb4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002eb6:	68f8      	ldr	r0, [r7, #12]
 8002eb8:	f000 f974 	bl	80031a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d001      	beq.n	8002ec6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e01a      	b.n	8002efc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2220      	movs	r2, #32
 8002ecc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	6859      	ldr	r1, [r3, #4]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	4b0b      	ldr	r3, [pc, #44]	; (8002f08 <HAL_I2C_Mem_Read+0x230>)
 8002eda:	400b      	ands	r3, r1
 8002edc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2220      	movs	r2, #32
 8002ee2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	e000      	b.n	8002efc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002efa:	2302      	movs	r3, #2
  }
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3718      	adds	r7, #24
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	80002400 	.word	0x80002400
 8002f08:	fe00e800 	.word	0xfe00e800

08002f0c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b086      	sub	sp, #24
 8002f10:	af02      	add	r7, sp, #8
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	4608      	mov	r0, r1
 8002f16:	4611      	mov	r1, r2
 8002f18:	461a      	mov	r2, r3
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	817b      	strh	r3, [r7, #10]
 8002f1e:	460b      	mov	r3, r1
 8002f20:	813b      	strh	r3, [r7, #8]
 8002f22:	4613      	mov	r3, r2
 8002f24:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002f26:	88fb      	ldrh	r3, [r7, #6]
 8002f28:	b2da      	uxtb	r2, r3
 8002f2a:	8979      	ldrh	r1, [r7, #10]
 8002f2c:	4b20      	ldr	r3, [pc, #128]	; (8002fb0 <I2C_RequestMemoryWrite+0xa4>)
 8002f2e:	9300      	str	r3, [sp, #0]
 8002f30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f34:	68f8      	ldr	r0, [r7, #12]
 8002f36:	f000 fa5d 	bl	80033f4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f3a:	69fa      	ldr	r2, [r7, #28]
 8002f3c:	69b9      	ldr	r1, [r7, #24]
 8002f3e:	68f8      	ldr	r0, [r7, #12]
 8002f40:	f000 f8f0 	bl	8003124 <I2C_WaitOnTXISFlagUntilTimeout>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d001      	beq.n	8002f4e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e02c      	b.n	8002fa8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f4e:	88fb      	ldrh	r3, [r7, #6]
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d105      	bne.n	8002f60 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f54:	893b      	ldrh	r3, [r7, #8]
 8002f56:	b2da      	uxtb	r2, r3
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	629a      	str	r2, [r3, #40]	; 0x28
 8002f5e:	e015      	b.n	8002f8c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002f60:	893b      	ldrh	r3, [r7, #8]
 8002f62:	0a1b      	lsrs	r3, r3, #8
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	b2da      	uxtb	r2, r3
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f6e:	69fa      	ldr	r2, [r7, #28]
 8002f70:	69b9      	ldr	r1, [r7, #24]
 8002f72:	68f8      	ldr	r0, [r7, #12]
 8002f74:	f000 f8d6 	bl	8003124 <I2C_WaitOnTXISFlagUntilTimeout>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d001      	beq.n	8002f82 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e012      	b.n	8002fa8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f82:	893b      	ldrh	r3, [r7, #8]
 8002f84:	b2da      	uxtb	r2, r3
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	9300      	str	r3, [sp, #0]
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	2200      	movs	r2, #0
 8002f94:	2180      	movs	r1, #128	; 0x80
 8002f96:	68f8      	ldr	r0, [r7, #12]
 8002f98:	f000 f884 	bl	80030a4 <I2C_WaitOnFlagUntilTimeout>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d001      	beq.n	8002fa6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e000      	b.n	8002fa8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002fa6:	2300      	movs	r3, #0
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3710      	adds	r7, #16
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	80002000 	.word	0x80002000

08002fb4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b086      	sub	sp, #24
 8002fb8:	af02      	add	r7, sp, #8
 8002fba:	60f8      	str	r0, [r7, #12]
 8002fbc:	4608      	mov	r0, r1
 8002fbe:	4611      	mov	r1, r2
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	817b      	strh	r3, [r7, #10]
 8002fc6:	460b      	mov	r3, r1
 8002fc8:	813b      	strh	r3, [r7, #8]
 8002fca:	4613      	mov	r3, r2
 8002fcc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002fce:	88fb      	ldrh	r3, [r7, #6]
 8002fd0:	b2da      	uxtb	r2, r3
 8002fd2:	8979      	ldrh	r1, [r7, #10]
 8002fd4:	4b20      	ldr	r3, [pc, #128]	; (8003058 <I2C_RequestMemoryRead+0xa4>)
 8002fd6:	9300      	str	r3, [sp, #0]
 8002fd8:	2300      	movs	r3, #0
 8002fda:	68f8      	ldr	r0, [r7, #12]
 8002fdc:	f000 fa0a 	bl	80033f4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fe0:	69fa      	ldr	r2, [r7, #28]
 8002fe2:	69b9      	ldr	r1, [r7, #24]
 8002fe4:	68f8      	ldr	r0, [r7, #12]
 8002fe6:	f000 f89d 	bl	8003124 <I2C_WaitOnTXISFlagUntilTimeout>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d001      	beq.n	8002ff4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e02c      	b.n	800304e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ff4:	88fb      	ldrh	r3, [r7, #6]
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d105      	bne.n	8003006 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ffa:	893b      	ldrh	r3, [r7, #8]
 8002ffc:	b2da      	uxtb	r2, r3
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	629a      	str	r2, [r3, #40]	; 0x28
 8003004:	e015      	b.n	8003032 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003006:	893b      	ldrh	r3, [r7, #8]
 8003008:	0a1b      	lsrs	r3, r3, #8
 800300a:	b29b      	uxth	r3, r3
 800300c:	b2da      	uxtb	r2, r3
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003014:	69fa      	ldr	r2, [r7, #28]
 8003016:	69b9      	ldr	r1, [r7, #24]
 8003018:	68f8      	ldr	r0, [r7, #12]
 800301a:	f000 f883 	bl	8003124 <I2C_WaitOnTXISFlagUntilTimeout>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d001      	beq.n	8003028 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e012      	b.n	800304e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003028:	893b      	ldrh	r3, [r7, #8]
 800302a:	b2da      	uxtb	r2, r3
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	9300      	str	r3, [sp, #0]
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	2200      	movs	r2, #0
 800303a:	2140      	movs	r1, #64	; 0x40
 800303c:	68f8      	ldr	r0, [r7, #12]
 800303e:	f000 f831 	bl	80030a4 <I2C_WaitOnFlagUntilTimeout>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d001      	beq.n	800304c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e000      	b.n	800304e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800304c:	2300      	movs	r3, #0
}
 800304e:	4618      	mov	r0, r3
 8003050:	3710      	adds	r7, #16
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	80002000 	.word	0x80002000

0800305c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	699b      	ldr	r3, [r3, #24]
 800306a:	f003 0302 	and.w	r3, r3, #2
 800306e:	2b02      	cmp	r3, #2
 8003070:	d103      	bne.n	800307a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2200      	movs	r2, #0
 8003078:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	699b      	ldr	r3, [r3, #24]
 8003080:	f003 0301 	and.w	r3, r3, #1
 8003084:	2b01      	cmp	r3, #1
 8003086:	d007      	beq.n	8003098 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	699a      	ldr	r2, [r3, #24]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f042 0201 	orr.w	r2, r2, #1
 8003096:	619a      	str	r2, [r3, #24]
  }
}
 8003098:	bf00      	nop
 800309a:	370c      	adds	r7, #12
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	60b9      	str	r1, [r7, #8]
 80030ae:	603b      	str	r3, [r7, #0]
 80030b0:	4613      	mov	r3, r2
 80030b2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030b4:	e022      	b.n	80030fc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030bc:	d01e      	beq.n	80030fc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030be:	f7ff f9c7 	bl	8002450 <HAL_GetTick>
 80030c2:	4602      	mov	r2, r0
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	683a      	ldr	r2, [r7, #0]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d302      	bcc.n	80030d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d113      	bne.n	80030fc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030d8:	f043 0220 	orr.w	r2, r3, #32
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2220      	movs	r2, #32
 80030e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e00f      	b.n	800311c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	699a      	ldr	r2, [r3, #24]
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	4013      	ands	r3, r2
 8003106:	68ba      	ldr	r2, [r7, #8]
 8003108:	429a      	cmp	r2, r3
 800310a:	bf0c      	ite	eq
 800310c:	2301      	moveq	r3, #1
 800310e:	2300      	movne	r3, #0
 8003110:	b2db      	uxtb	r3, r3
 8003112:	461a      	mov	r2, r3
 8003114:	79fb      	ldrb	r3, [r7, #7]
 8003116:	429a      	cmp	r2, r3
 8003118:	d0cd      	beq.n	80030b6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800311a:	2300      	movs	r3, #0
}
 800311c:	4618      	mov	r0, r3
 800311e:	3710      	adds	r7, #16
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003130:	e02c      	b.n	800318c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	68b9      	ldr	r1, [r7, #8]
 8003136:	68f8      	ldr	r0, [r7, #12]
 8003138:	f000 f870 	bl	800321c <I2C_IsErrorOccurred>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d001      	beq.n	8003146 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e02a      	b.n	800319c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800314c:	d01e      	beq.n	800318c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800314e:	f7ff f97f 	bl	8002450 <HAL_GetTick>
 8003152:	4602      	mov	r2, r0
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	68ba      	ldr	r2, [r7, #8]
 800315a:	429a      	cmp	r2, r3
 800315c:	d302      	bcc.n	8003164 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d113      	bne.n	800318c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003168:	f043 0220 	orr.w	r2, r3, #32
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2220      	movs	r2, #32
 8003174:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2200      	movs	r2, #0
 800317c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2200      	movs	r2, #0
 8003184:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e007      	b.n	800319c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	f003 0302 	and.w	r3, r3, #2
 8003196:	2b02      	cmp	r3, #2
 8003198:	d1cb      	bne.n	8003132 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800319a:	2300      	movs	r3, #0
}
 800319c:	4618      	mov	r0, r3
 800319e:	3710      	adds	r7, #16
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	60b9      	str	r1, [r7, #8]
 80031ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031b0:	e028      	b.n	8003204 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	68b9      	ldr	r1, [r7, #8]
 80031b6:	68f8      	ldr	r0, [r7, #12]
 80031b8:	f000 f830 	bl	800321c <I2C_IsErrorOccurred>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d001      	beq.n	80031c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e026      	b.n	8003214 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031c6:	f7ff f943 	bl	8002450 <HAL_GetTick>
 80031ca:	4602      	mov	r2, r0
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	68ba      	ldr	r2, [r7, #8]
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d302      	bcc.n	80031dc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d113      	bne.n	8003204 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e0:	f043 0220 	orr.w	r2, r3, #32
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2220      	movs	r2, #32
 80031ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e007      	b.n	8003214 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	699b      	ldr	r3, [r3, #24]
 800320a:	f003 0320 	and.w	r3, r3, #32
 800320e:	2b20      	cmp	r3, #32
 8003210:	d1cf      	bne.n	80031b2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003212:	2300      	movs	r3, #0
}
 8003214:	4618      	mov	r0, r3
 8003216:	3710      	adds	r7, #16
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}

0800321c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b08a      	sub	sp, #40	; 0x28
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003228:	2300      	movs	r3, #0
 800322a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	699b      	ldr	r3, [r3, #24]
 8003234:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003236:	2300      	movs	r3, #0
 8003238:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	f003 0310 	and.w	r3, r3, #16
 8003244:	2b00      	cmp	r3, #0
 8003246:	d075      	beq.n	8003334 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	2210      	movs	r2, #16
 800324e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003250:	e056      	b.n	8003300 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003258:	d052      	beq.n	8003300 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800325a:	f7ff f8f9 	bl	8002450 <HAL_GetTick>
 800325e:	4602      	mov	r2, r0
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	68ba      	ldr	r2, [r7, #8]
 8003266:	429a      	cmp	r2, r3
 8003268:	d302      	bcc.n	8003270 <I2C_IsErrorOccurred+0x54>
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d147      	bne.n	8003300 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800327a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003282:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	699b      	ldr	r3, [r3, #24]
 800328a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800328e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003292:	d12e      	bne.n	80032f2 <I2C_IsErrorOccurred+0xd6>
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800329a:	d02a      	beq.n	80032f2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800329c:	7cfb      	ldrb	r3, [r7, #19]
 800329e:	2b20      	cmp	r3, #32
 80032a0:	d027      	beq.n	80032f2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	685a      	ldr	r2, [r3, #4]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032b0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80032b2:	f7ff f8cd 	bl	8002450 <HAL_GetTick>
 80032b6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032b8:	e01b      	b.n	80032f2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80032ba:	f7ff f8c9 	bl	8002450 <HAL_GetTick>
 80032be:	4602      	mov	r2, r0
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	2b19      	cmp	r3, #25
 80032c6:	d914      	bls.n	80032f2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032cc:	f043 0220 	orr.w	r2, r3, #32
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2220      	movs	r2, #32
 80032d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2200      	movs	r2, #0
 80032e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	699b      	ldr	r3, [r3, #24]
 80032f8:	f003 0320 	and.w	r3, r3, #32
 80032fc:	2b20      	cmp	r3, #32
 80032fe:	d1dc      	bne.n	80032ba <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	699b      	ldr	r3, [r3, #24]
 8003306:	f003 0320 	and.w	r3, r3, #32
 800330a:	2b20      	cmp	r3, #32
 800330c:	d003      	beq.n	8003316 <I2C_IsErrorOccurred+0xfa>
 800330e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003312:	2b00      	cmp	r3, #0
 8003314:	d09d      	beq.n	8003252 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003316:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800331a:	2b00      	cmp	r3, #0
 800331c:	d103      	bne.n	8003326 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2220      	movs	r2, #32
 8003324:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003326:	6a3b      	ldr	r3, [r7, #32]
 8003328:	f043 0304 	orr.w	r3, r3, #4
 800332c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	699b      	ldr	r3, [r3, #24]
 800333a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003342:	2b00      	cmp	r3, #0
 8003344:	d00b      	beq.n	800335e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003346:	6a3b      	ldr	r3, [r7, #32]
 8003348:	f043 0301 	orr.w	r3, r3, #1
 800334c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003356:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800335e:	69bb      	ldr	r3, [r7, #24]
 8003360:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003364:	2b00      	cmp	r3, #0
 8003366:	d00b      	beq.n	8003380 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003368:	6a3b      	ldr	r3, [r7, #32]
 800336a:	f043 0308 	orr.w	r3, r3, #8
 800336e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003378:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003386:	2b00      	cmp	r3, #0
 8003388:	d00b      	beq.n	80033a2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800338a:	6a3b      	ldr	r3, [r7, #32]
 800338c:	f043 0302 	orr.w	r3, r3, #2
 8003390:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f44f 7200 	mov.w	r2, #512	; 0x200
 800339a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80033a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d01c      	beq.n	80033e4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80033aa:	68f8      	ldr	r0, [r7, #12]
 80033ac:	f7ff fe56 	bl	800305c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	6859      	ldr	r1, [r3, #4]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	4b0d      	ldr	r3, [pc, #52]	; (80033f0 <I2C_IsErrorOccurred+0x1d4>)
 80033bc:	400b      	ands	r3, r1
 80033be:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033c4:	6a3b      	ldr	r3, [r7, #32]
 80033c6:	431a      	orrs	r2, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2220      	movs	r2, #32
 80033d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2200      	movs	r2, #0
 80033e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80033e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3728      	adds	r7, #40	; 0x28
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	fe00e800 	.word	0xfe00e800

080033f4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b087      	sub	sp, #28
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	607b      	str	r3, [r7, #4]
 80033fe:	460b      	mov	r3, r1
 8003400:	817b      	strh	r3, [r7, #10]
 8003402:	4613      	mov	r3, r2
 8003404:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003406:	897b      	ldrh	r3, [r7, #10]
 8003408:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800340c:	7a7b      	ldrb	r3, [r7, #9]
 800340e:	041b      	lsls	r3, r3, #16
 8003410:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003414:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800341a:	6a3b      	ldr	r3, [r7, #32]
 800341c:	4313      	orrs	r3, r2
 800341e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003422:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	685a      	ldr	r2, [r3, #4]
 800342a:	6a3b      	ldr	r3, [r7, #32]
 800342c:	0d5b      	lsrs	r3, r3, #21
 800342e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003432:	4b08      	ldr	r3, [pc, #32]	; (8003454 <I2C_TransferConfig+0x60>)
 8003434:	430b      	orrs	r3, r1
 8003436:	43db      	mvns	r3, r3
 8003438:	ea02 0103 	and.w	r1, r2, r3
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	697a      	ldr	r2, [r7, #20]
 8003442:	430a      	orrs	r2, r1
 8003444:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003446:	bf00      	nop
 8003448:	371c      	adds	r7, #28
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr
 8003452:	bf00      	nop
 8003454:	03ff63ff 	.word	0x03ff63ff

08003458 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003468:	b2db      	uxtb	r3, r3
 800346a:	2b20      	cmp	r3, #32
 800346c:	d138      	bne.n	80034e0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003474:	2b01      	cmp	r3, #1
 8003476:	d101      	bne.n	800347c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003478:	2302      	movs	r3, #2
 800347a:	e032      	b.n	80034e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2224      	movs	r2, #36	; 0x24
 8003488:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f022 0201 	bic.w	r2, r2, #1
 800349a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80034aa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	6819      	ldr	r1, [r3, #0]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	683a      	ldr	r2, [r7, #0]
 80034b8:	430a      	orrs	r2, r1
 80034ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f042 0201 	orr.w	r2, r2, #1
 80034ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2220      	movs	r2, #32
 80034d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80034dc:	2300      	movs	r3, #0
 80034de:	e000      	b.n	80034e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80034e0:	2302      	movs	r3, #2
  }
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	370c      	adds	r7, #12
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr

080034ee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80034ee:	b480      	push	{r7}
 80034f0:	b085      	sub	sp, #20
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
 80034f6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	2b20      	cmp	r3, #32
 8003502:	d139      	bne.n	8003578 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800350a:	2b01      	cmp	r3, #1
 800350c:	d101      	bne.n	8003512 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800350e:	2302      	movs	r3, #2
 8003510:	e033      	b.n	800357a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2201      	movs	r2, #1
 8003516:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2224      	movs	r2, #36	; 0x24
 800351e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f022 0201 	bic.w	r2, r2, #1
 8003530:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003540:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	021b      	lsls	r3, r3, #8
 8003546:	68fa      	ldr	r2, [r7, #12]
 8003548:	4313      	orrs	r3, r2
 800354a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	68fa      	ldr	r2, [r7, #12]
 8003552:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f042 0201 	orr.w	r2, r2, #1
 8003562:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2220      	movs	r2, #32
 8003568:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003574:	2300      	movs	r3, #0
 8003576:	e000      	b.n	800357a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003578:	2302      	movs	r3, #2
  }
}
 800357a:	4618      	mov	r0, r3
 800357c:	3714      	adds	r7, #20
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr
	...

08003588 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003588:	b480      	push	{r7}
 800358a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800358c:	4b05      	ldr	r3, [pc, #20]	; (80035a4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a04      	ldr	r2, [pc, #16]	; (80035a4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003592:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003596:	6013      	str	r3, [r2, #0]
}
 8003598:	bf00      	nop
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop
 80035a4:	40007000 	.word	0x40007000

080035a8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80035a8:	b480      	push	{r7}
 80035aa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80035ac:	4b04      	ldr	r3, [pc, #16]	; (80035c0 <HAL_PWREx_GetVoltageRange+0x18>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr
 80035be:	bf00      	nop
 80035c0:	40007000 	.word	0x40007000

080035c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b085      	sub	sp, #20
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035d2:	d130      	bne.n	8003636 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80035d4:	4b23      	ldr	r3, [pc, #140]	; (8003664 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80035dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035e0:	d038      	beq.n	8003654 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80035e2:	4b20      	ldr	r3, [pc, #128]	; (8003664 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80035ea:	4a1e      	ldr	r2, [pc, #120]	; (8003664 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035f0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80035f2:	4b1d      	ldr	r3, [pc, #116]	; (8003668 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	2232      	movs	r2, #50	; 0x32
 80035f8:	fb02 f303 	mul.w	r3, r2, r3
 80035fc:	4a1b      	ldr	r2, [pc, #108]	; (800366c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80035fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003602:	0c9b      	lsrs	r3, r3, #18
 8003604:	3301      	adds	r3, #1
 8003606:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003608:	e002      	b.n	8003610 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	3b01      	subs	r3, #1
 800360e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003610:	4b14      	ldr	r3, [pc, #80]	; (8003664 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003612:	695b      	ldr	r3, [r3, #20]
 8003614:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003618:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800361c:	d102      	bne.n	8003624 <HAL_PWREx_ControlVoltageScaling+0x60>
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d1f2      	bne.n	800360a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003624:	4b0f      	ldr	r3, [pc, #60]	; (8003664 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003626:	695b      	ldr	r3, [r3, #20]
 8003628:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800362c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003630:	d110      	bne.n	8003654 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e00f      	b.n	8003656 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003636:	4b0b      	ldr	r3, [pc, #44]	; (8003664 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800363e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003642:	d007      	beq.n	8003654 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003644:	4b07      	ldr	r3, [pc, #28]	; (8003664 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800364c:	4a05      	ldr	r2, [pc, #20]	; (8003664 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800364e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003652:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	3714      	adds	r7, #20
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr
 8003662:	bf00      	nop
 8003664:	40007000 	.word	0x40007000
 8003668:	20000000 	.word	0x20000000
 800366c:	431bde83 	.word	0x431bde83

08003670 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b088      	sub	sp, #32
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d102      	bne.n	8003684 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	f000 bc02 	b.w	8003e88 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003684:	4b96      	ldr	r3, [pc, #600]	; (80038e0 <HAL_RCC_OscConfig+0x270>)
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	f003 030c 	and.w	r3, r3, #12
 800368c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800368e:	4b94      	ldr	r3, [pc, #592]	; (80038e0 <HAL_RCC_OscConfig+0x270>)
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	f003 0303 	and.w	r3, r3, #3
 8003696:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0310 	and.w	r3, r3, #16
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	f000 80e4 	beq.w	800386e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d007      	beq.n	80036bc <HAL_RCC_OscConfig+0x4c>
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	2b0c      	cmp	r3, #12
 80036b0:	f040 808b 	bne.w	80037ca <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	f040 8087 	bne.w	80037ca <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80036bc:	4b88      	ldr	r3, [pc, #544]	; (80038e0 <HAL_RCC_OscConfig+0x270>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0302 	and.w	r3, r3, #2
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d005      	beq.n	80036d4 <HAL_RCC_OscConfig+0x64>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	699b      	ldr	r3, [r3, #24]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d101      	bne.n	80036d4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e3d9      	b.n	8003e88 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a1a      	ldr	r2, [r3, #32]
 80036d8:	4b81      	ldr	r3, [pc, #516]	; (80038e0 <HAL_RCC_OscConfig+0x270>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0308 	and.w	r3, r3, #8
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d004      	beq.n	80036ee <HAL_RCC_OscConfig+0x7e>
 80036e4:	4b7e      	ldr	r3, [pc, #504]	; (80038e0 <HAL_RCC_OscConfig+0x270>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036ec:	e005      	b.n	80036fa <HAL_RCC_OscConfig+0x8a>
 80036ee:	4b7c      	ldr	r3, [pc, #496]	; (80038e0 <HAL_RCC_OscConfig+0x270>)
 80036f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036f4:	091b      	lsrs	r3, r3, #4
 80036f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d223      	bcs.n	8003746 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a1b      	ldr	r3, [r3, #32]
 8003702:	4618      	mov	r0, r3
 8003704:	f000 fd8c 	bl	8004220 <RCC_SetFlashLatencyFromMSIRange>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d001      	beq.n	8003712 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e3ba      	b.n	8003e88 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003712:	4b73      	ldr	r3, [pc, #460]	; (80038e0 <HAL_RCC_OscConfig+0x270>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a72      	ldr	r2, [pc, #456]	; (80038e0 <HAL_RCC_OscConfig+0x270>)
 8003718:	f043 0308 	orr.w	r3, r3, #8
 800371c:	6013      	str	r3, [r2, #0]
 800371e:	4b70      	ldr	r3, [pc, #448]	; (80038e0 <HAL_RCC_OscConfig+0x270>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a1b      	ldr	r3, [r3, #32]
 800372a:	496d      	ldr	r1, [pc, #436]	; (80038e0 <HAL_RCC_OscConfig+0x270>)
 800372c:	4313      	orrs	r3, r2
 800372e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003730:	4b6b      	ldr	r3, [pc, #428]	; (80038e0 <HAL_RCC_OscConfig+0x270>)
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	69db      	ldr	r3, [r3, #28]
 800373c:	021b      	lsls	r3, r3, #8
 800373e:	4968      	ldr	r1, [pc, #416]	; (80038e0 <HAL_RCC_OscConfig+0x270>)
 8003740:	4313      	orrs	r3, r2
 8003742:	604b      	str	r3, [r1, #4]
 8003744:	e025      	b.n	8003792 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003746:	4b66      	ldr	r3, [pc, #408]	; (80038e0 <HAL_RCC_OscConfig+0x270>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a65      	ldr	r2, [pc, #404]	; (80038e0 <HAL_RCC_OscConfig+0x270>)
 800374c:	f043 0308 	orr.w	r3, r3, #8
 8003750:	6013      	str	r3, [r2, #0]
 8003752:	4b63      	ldr	r3, [pc, #396]	; (80038e0 <HAL_RCC_OscConfig+0x270>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a1b      	ldr	r3, [r3, #32]
 800375e:	4960      	ldr	r1, [pc, #384]	; (80038e0 <HAL_RCC_OscConfig+0x270>)
 8003760:	4313      	orrs	r3, r2
 8003762:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003764:	4b5e      	ldr	r3, [pc, #376]	; (80038e0 <HAL_RCC_OscConfig+0x270>)
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	69db      	ldr	r3, [r3, #28]
 8003770:	021b      	lsls	r3, r3, #8
 8003772:	495b      	ldr	r1, [pc, #364]	; (80038e0 <HAL_RCC_OscConfig+0x270>)
 8003774:	4313      	orrs	r3, r2
 8003776:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d109      	bne.n	8003792 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a1b      	ldr	r3, [r3, #32]
 8003782:	4618      	mov	r0, r3
 8003784:	f000 fd4c 	bl	8004220 <RCC_SetFlashLatencyFromMSIRange>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d001      	beq.n	8003792 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e37a      	b.n	8003e88 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003792:	f000 fc81 	bl	8004098 <HAL_RCC_GetSysClockFreq>
 8003796:	4602      	mov	r2, r0
 8003798:	4b51      	ldr	r3, [pc, #324]	; (80038e0 <HAL_RCC_OscConfig+0x270>)
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	091b      	lsrs	r3, r3, #4
 800379e:	f003 030f 	and.w	r3, r3, #15
 80037a2:	4950      	ldr	r1, [pc, #320]	; (80038e4 <HAL_RCC_OscConfig+0x274>)
 80037a4:	5ccb      	ldrb	r3, [r1, r3]
 80037a6:	f003 031f 	and.w	r3, r3, #31
 80037aa:	fa22 f303 	lsr.w	r3, r2, r3
 80037ae:	4a4e      	ldr	r2, [pc, #312]	; (80038e8 <HAL_RCC_OscConfig+0x278>)
 80037b0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80037b2:	4b4e      	ldr	r3, [pc, #312]	; (80038ec <HAL_RCC_OscConfig+0x27c>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4618      	mov	r0, r3
 80037b8:	f7fe fdfa 	bl	80023b0 <HAL_InitTick>
 80037bc:	4603      	mov	r3, r0
 80037be:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80037c0:	7bfb      	ldrb	r3, [r7, #15]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d052      	beq.n	800386c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80037c6:	7bfb      	ldrb	r3, [r7, #15]
 80037c8:	e35e      	b.n	8003e88 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	699b      	ldr	r3, [r3, #24]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d032      	beq.n	8003838 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80037d2:	4b43      	ldr	r3, [pc, #268]	; (80038e0 <HAL_RCC_OscConfig+0x270>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a42      	ldr	r2, [pc, #264]	; (80038e0 <HAL_RCC_OscConfig+0x270>)
 80037d8:	f043 0301 	orr.w	r3, r3, #1
 80037dc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80037de:	f7fe fe37 	bl	8002450 <HAL_GetTick>
 80037e2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80037e4:	e008      	b.n	80037f8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80037e6:	f7fe fe33 	bl	8002450 <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d901      	bls.n	80037f8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	e347      	b.n	8003e88 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80037f8:	4b39      	ldr	r3, [pc, #228]	; (80038e0 <HAL_RCC_OscConfig+0x270>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0302 	and.w	r3, r3, #2
 8003800:	2b00      	cmp	r3, #0
 8003802:	d0f0      	beq.n	80037e6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003804:	4b36      	ldr	r3, [pc, #216]	; (80038e0 <HAL_RCC_OscConfig+0x270>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a35      	ldr	r2, [pc, #212]	; (80038e0 <HAL_RCC_OscConfig+0x270>)
 800380a:	f043 0308 	orr.w	r3, r3, #8
 800380e:	6013      	str	r3, [r2, #0]
 8003810:	4b33      	ldr	r3, [pc, #204]	; (80038e0 <HAL_RCC_OscConfig+0x270>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6a1b      	ldr	r3, [r3, #32]
 800381c:	4930      	ldr	r1, [pc, #192]	; (80038e0 <HAL_RCC_OscConfig+0x270>)
 800381e:	4313      	orrs	r3, r2
 8003820:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003822:	4b2f      	ldr	r3, [pc, #188]	; (80038e0 <HAL_RCC_OscConfig+0x270>)
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	69db      	ldr	r3, [r3, #28]
 800382e:	021b      	lsls	r3, r3, #8
 8003830:	492b      	ldr	r1, [pc, #172]	; (80038e0 <HAL_RCC_OscConfig+0x270>)
 8003832:	4313      	orrs	r3, r2
 8003834:	604b      	str	r3, [r1, #4]
 8003836:	e01a      	b.n	800386e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003838:	4b29      	ldr	r3, [pc, #164]	; (80038e0 <HAL_RCC_OscConfig+0x270>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a28      	ldr	r2, [pc, #160]	; (80038e0 <HAL_RCC_OscConfig+0x270>)
 800383e:	f023 0301 	bic.w	r3, r3, #1
 8003842:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003844:	f7fe fe04 	bl	8002450 <HAL_GetTick>
 8003848:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800384a:	e008      	b.n	800385e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800384c:	f7fe fe00 	bl	8002450 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	2b02      	cmp	r3, #2
 8003858:	d901      	bls.n	800385e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e314      	b.n	8003e88 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800385e:	4b20      	ldr	r3, [pc, #128]	; (80038e0 <HAL_RCC_OscConfig+0x270>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0302 	and.w	r3, r3, #2
 8003866:	2b00      	cmp	r3, #0
 8003868:	d1f0      	bne.n	800384c <HAL_RCC_OscConfig+0x1dc>
 800386a:	e000      	b.n	800386e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800386c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0301 	and.w	r3, r3, #1
 8003876:	2b00      	cmp	r3, #0
 8003878:	d073      	beq.n	8003962 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800387a:	69bb      	ldr	r3, [r7, #24]
 800387c:	2b08      	cmp	r3, #8
 800387e:	d005      	beq.n	800388c <HAL_RCC_OscConfig+0x21c>
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	2b0c      	cmp	r3, #12
 8003884:	d10e      	bne.n	80038a4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	2b03      	cmp	r3, #3
 800388a:	d10b      	bne.n	80038a4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800388c:	4b14      	ldr	r3, [pc, #80]	; (80038e0 <HAL_RCC_OscConfig+0x270>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003894:	2b00      	cmp	r3, #0
 8003896:	d063      	beq.n	8003960 <HAL_RCC_OscConfig+0x2f0>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d15f      	bne.n	8003960 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e2f1      	b.n	8003e88 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038ac:	d106      	bne.n	80038bc <HAL_RCC_OscConfig+0x24c>
 80038ae:	4b0c      	ldr	r3, [pc, #48]	; (80038e0 <HAL_RCC_OscConfig+0x270>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a0b      	ldr	r2, [pc, #44]	; (80038e0 <HAL_RCC_OscConfig+0x270>)
 80038b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038b8:	6013      	str	r3, [r2, #0]
 80038ba:	e025      	b.n	8003908 <HAL_RCC_OscConfig+0x298>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038c4:	d114      	bne.n	80038f0 <HAL_RCC_OscConfig+0x280>
 80038c6:	4b06      	ldr	r3, [pc, #24]	; (80038e0 <HAL_RCC_OscConfig+0x270>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a05      	ldr	r2, [pc, #20]	; (80038e0 <HAL_RCC_OscConfig+0x270>)
 80038cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038d0:	6013      	str	r3, [r2, #0]
 80038d2:	4b03      	ldr	r3, [pc, #12]	; (80038e0 <HAL_RCC_OscConfig+0x270>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a02      	ldr	r2, [pc, #8]	; (80038e0 <HAL_RCC_OscConfig+0x270>)
 80038d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038dc:	6013      	str	r3, [r2, #0]
 80038de:	e013      	b.n	8003908 <HAL_RCC_OscConfig+0x298>
 80038e0:	40021000 	.word	0x40021000
 80038e4:	080095ec 	.word	0x080095ec
 80038e8:	20000000 	.word	0x20000000
 80038ec:	20000004 	.word	0x20000004
 80038f0:	4ba0      	ldr	r3, [pc, #640]	; (8003b74 <HAL_RCC_OscConfig+0x504>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a9f      	ldr	r2, [pc, #636]	; (8003b74 <HAL_RCC_OscConfig+0x504>)
 80038f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038fa:	6013      	str	r3, [r2, #0]
 80038fc:	4b9d      	ldr	r3, [pc, #628]	; (8003b74 <HAL_RCC_OscConfig+0x504>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a9c      	ldr	r2, [pc, #624]	; (8003b74 <HAL_RCC_OscConfig+0x504>)
 8003902:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003906:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d013      	beq.n	8003938 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003910:	f7fe fd9e 	bl	8002450 <HAL_GetTick>
 8003914:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003916:	e008      	b.n	800392a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003918:	f7fe fd9a 	bl	8002450 <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	2b64      	cmp	r3, #100	; 0x64
 8003924:	d901      	bls.n	800392a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e2ae      	b.n	8003e88 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800392a:	4b92      	ldr	r3, [pc, #584]	; (8003b74 <HAL_RCC_OscConfig+0x504>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d0f0      	beq.n	8003918 <HAL_RCC_OscConfig+0x2a8>
 8003936:	e014      	b.n	8003962 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003938:	f7fe fd8a 	bl	8002450 <HAL_GetTick>
 800393c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800393e:	e008      	b.n	8003952 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003940:	f7fe fd86 	bl	8002450 <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	2b64      	cmp	r3, #100	; 0x64
 800394c:	d901      	bls.n	8003952 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e29a      	b.n	8003e88 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003952:	4b88      	ldr	r3, [pc, #544]	; (8003b74 <HAL_RCC_OscConfig+0x504>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d1f0      	bne.n	8003940 <HAL_RCC_OscConfig+0x2d0>
 800395e:	e000      	b.n	8003962 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003960:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0302 	and.w	r3, r3, #2
 800396a:	2b00      	cmp	r3, #0
 800396c:	d060      	beq.n	8003a30 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	2b04      	cmp	r3, #4
 8003972:	d005      	beq.n	8003980 <HAL_RCC_OscConfig+0x310>
 8003974:	69bb      	ldr	r3, [r7, #24]
 8003976:	2b0c      	cmp	r3, #12
 8003978:	d119      	bne.n	80039ae <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	2b02      	cmp	r3, #2
 800397e:	d116      	bne.n	80039ae <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003980:	4b7c      	ldr	r3, [pc, #496]	; (8003b74 <HAL_RCC_OscConfig+0x504>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003988:	2b00      	cmp	r3, #0
 800398a:	d005      	beq.n	8003998 <HAL_RCC_OscConfig+0x328>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d101      	bne.n	8003998 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e277      	b.n	8003e88 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003998:	4b76      	ldr	r3, [pc, #472]	; (8003b74 <HAL_RCC_OscConfig+0x504>)
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	691b      	ldr	r3, [r3, #16]
 80039a4:	061b      	lsls	r3, r3, #24
 80039a6:	4973      	ldr	r1, [pc, #460]	; (8003b74 <HAL_RCC_OscConfig+0x504>)
 80039a8:	4313      	orrs	r3, r2
 80039aa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039ac:	e040      	b.n	8003a30 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d023      	beq.n	80039fe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039b6:	4b6f      	ldr	r3, [pc, #444]	; (8003b74 <HAL_RCC_OscConfig+0x504>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a6e      	ldr	r2, [pc, #440]	; (8003b74 <HAL_RCC_OscConfig+0x504>)
 80039bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c2:	f7fe fd45 	bl	8002450 <HAL_GetTick>
 80039c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039c8:	e008      	b.n	80039dc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039ca:	f7fe fd41 	bl	8002450 <HAL_GetTick>
 80039ce:	4602      	mov	r2, r0
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	d901      	bls.n	80039dc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	e255      	b.n	8003e88 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039dc:	4b65      	ldr	r3, [pc, #404]	; (8003b74 <HAL_RCC_OscConfig+0x504>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d0f0      	beq.n	80039ca <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039e8:	4b62      	ldr	r3, [pc, #392]	; (8003b74 <HAL_RCC_OscConfig+0x504>)
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	691b      	ldr	r3, [r3, #16]
 80039f4:	061b      	lsls	r3, r3, #24
 80039f6:	495f      	ldr	r1, [pc, #380]	; (8003b74 <HAL_RCC_OscConfig+0x504>)
 80039f8:	4313      	orrs	r3, r2
 80039fa:	604b      	str	r3, [r1, #4]
 80039fc:	e018      	b.n	8003a30 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039fe:	4b5d      	ldr	r3, [pc, #372]	; (8003b74 <HAL_RCC_OscConfig+0x504>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a5c      	ldr	r2, [pc, #368]	; (8003b74 <HAL_RCC_OscConfig+0x504>)
 8003a04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a0a:	f7fe fd21 	bl	8002450 <HAL_GetTick>
 8003a0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a10:	e008      	b.n	8003a24 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a12:	f7fe fd1d 	bl	8002450 <HAL_GetTick>
 8003a16:	4602      	mov	r2, r0
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	1ad3      	subs	r3, r2, r3
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	d901      	bls.n	8003a24 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003a20:	2303      	movs	r3, #3
 8003a22:	e231      	b.n	8003e88 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a24:	4b53      	ldr	r3, [pc, #332]	; (8003b74 <HAL_RCC_OscConfig+0x504>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d1f0      	bne.n	8003a12 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0308 	and.w	r3, r3, #8
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d03c      	beq.n	8003ab6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	695b      	ldr	r3, [r3, #20]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d01c      	beq.n	8003a7e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a44:	4b4b      	ldr	r3, [pc, #300]	; (8003b74 <HAL_RCC_OscConfig+0x504>)
 8003a46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a4a:	4a4a      	ldr	r2, [pc, #296]	; (8003b74 <HAL_RCC_OscConfig+0x504>)
 8003a4c:	f043 0301 	orr.w	r3, r3, #1
 8003a50:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a54:	f7fe fcfc 	bl	8002450 <HAL_GetTick>
 8003a58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a5a:	e008      	b.n	8003a6e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a5c:	f7fe fcf8 	bl	8002450 <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	d901      	bls.n	8003a6e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e20c      	b.n	8003e88 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a6e:	4b41      	ldr	r3, [pc, #260]	; (8003b74 <HAL_RCC_OscConfig+0x504>)
 8003a70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a74:	f003 0302 	and.w	r3, r3, #2
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d0ef      	beq.n	8003a5c <HAL_RCC_OscConfig+0x3ec>
 8003a7c:	e01b      	b.n	8003ab6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a7e:	4b3d      	ldr	r3, [pc, #244]	; (8003b74 <HAL_RCC_OscConfig+0x504>)
 8003a80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a84:	4a3b      	ldr	r2, [pc, #236]	; (8003b74 <HAL_RCC_OscConfig+0x504>)
 8003a86:	f023 0301 	bic.w	r3, r3, #1
 8003a8a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a8e:	f7fe fcdf 	bl	8002450 <HAL_GetTick>
 8003a92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a94:	e008      	b.n	8003aa8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a96:	f7fe fcdb 	bl	8002450 <HAL_GetTick>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	2b02      	cmp	r3, #2
 8003aa2:	d901      	bls.n	8003aa8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	e1ef      	b.n	8003e88 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003aa8:	4b32      	ldr	r3, [pc, #200]	; (8003b74 <HAL_RCC_OscConfig+0x504>)
 8003aaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003aae:	f003 0302 	and.w	r3, r3, #2
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d1ef      	bne.n	8003a96 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0304 	and.w	r3, r3, #4
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	f000 80a6 	beq.w	8003c10 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003ac8:	4b2a      	ldr	r3, [pc, #168]	; (8003b74 <HAL_RCC_OscConfig+0x504>)
 8003aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003acc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d10d      	bne.n	8003af0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ad4:	4b27      	ldr	r3, [pc, #156]	; (8003b74 <HAL_RCC_OscConfig+0x504>)
 8003ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ad8:	4a26      	ldr	r2, [pc, #152]	; (8003b74 <HAL_RCC_OscConfig+0x504>)
 8003ada:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ade:	6593      	str	r3, [r2, #88]	; 0x58
 8003ae0:	4b24      	ldr	r3, [pc, #144]	; (8003b74 <HAL_RCC_OscConfig+0x504>)
 8003ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ae4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ae8:	60bb      	str	r3, [r7, #8]
 8003aea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003aec:	2301      	movs	r3, #1
 8003aee:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003af0:	4b21      	ldr	r3, [pc, #132]	; (8003b78 <HAL_RCC_OscConfig+0x508>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d118      	bne.n	8003b2e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003afc:	4b1e      	ldr	r3, [pc, #120]	; (8003b78 <HAL_RCC_OscConfig+0x508>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a1d      	ldr	r2, [pc, #116]	; (8003b78 <HAL_RCC_OscConfig+0x508>)
 8003b02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b06:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b08:	f7fe fca2 	bl	8002450 <HAL_GetTick>
 8003b0c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b0e:	e008      	b.n	8003b22 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b10:	f7fe fc9e 	bl	8002450 <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d901      	bls.n	8003b22 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e1b2      	b.n	8003e88 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b22:	4b15      	ldr	r3, [pc, #84]	; (8003b78 <HAL_RCC_OscConfig+0x508>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d0f0      	beq.n	8003b10 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d108      	bne.n	8003b48 <HAL_RCC_OscConfig+0x4d8>
 8003b36:	4b0f      	ldr	r3, [pc, #60]	; (8003b74 <HAL_RCC_OscConfig+0x504>)
 8003b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b3c:	4a0d      	ldr	r2, [pc, #52]	; (8003b74 <HAL_RCC_OscConfig+0x504>)
 8003b3e:	f043 0301 	orr.w	r3, r3, #1
 8003b42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b46:	e029      	b.n	8003b9c <HAL_RCC_OscConfig+0x52c>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	2b05      	cmp	r3, #5
 8003b4e:	d115      	bne.n	8003b7c <HAL_RCC_OscConfig+0x50c>
 8003b50:	4b08      	ldr	r3, [pc, #32]	; (8003b74 <HAL_RCC_OscConfig+0x504>)
 8003b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b56:	4a07      	ldr	r2, [pc, #28]	; (8003b74 <HAL_RCC_OscConfig+0x504>)
 8003b58:	f043 0304 	orr.w	r3, r3, #4
 8003b5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b60:	4b04      	ldr	r3, [pc, #16]	; (8003b74 <HAL_RCC_OscConfig+0x504>)
 8003b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b66:	4a03      	ldr	r2, [pc, #12]	; (8003b74 <HAL_RCC_OscConfig+0x504>)
 8003b68:	f043 0301 	orr.w	r3, r3, #1
 8003b6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b70:	e014      	b.n	8003b9c <HAL_RCC_OscConfig+0x52c>
 8003b72:	bf00      	nop
 8003b74:	40021000 	.word	0x40021000
 8003b78:	40007000 	.word	0x40007000
 8003b7c:	4b9a      	ldr	r3, [pc, #616]	; (8003de8 <HAL_RCC_OscConfig+0x778>)
 8003b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b82:	4a99      	ldr	r2, [pc, #612]	; (8003de8 <HAL_RCC_OscConfig+0x778>)
 8003b84:	f023 0301 	bic.w	r3, r3, #1
 8003b88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b8c:	4b96      	ldr	r3, [pc, #600]	; (8003de8 <HAL_RCC_OscConfig+0x778>)
 8003b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b92:	4a95      	ldr	r2, [pc, #596]	; (8003de8 <HAL_RCC_OscConfig+0x778>)
 8003b94:	f023 0304 	bic.w	r3, r3, #4
 8003b98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d016      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ba4:	f7fe fc54 	bl	8002450 <HAL_GetTick>
 8003ba8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003baa:	e00a      	b.n	8003bc2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bac:	f7fe fc50 	bl	8002450 <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d901      	bls.n	8003bc2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e162      	b.n	8003e88 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bc2:	4b89      	ldr	r3, [pc, #548]	; (8003de8 <HAL_RCC_OscConfig+0x778>)
 8003bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bc8:	f003 0302 	and.w	r3, r3, #2
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d0ed      	beq.n	8003bac <HAL_RCC_OscConfig+0x53c>
 8003bd0:	e015      	b.n	8003bfe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bd2:	f7fe fc3d 	bl	8002450 <HAL_GetTick>
 8003bd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003bd8:	e00a      	b.n	8003bf0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bda:	f7fe fc39 	bl	8002450 <HAL_GetTick>
 8003bde:	4602      	mov	r2, r0
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d901      	bls.n	8003bf0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003bec:	2303      	movs	r3, #3
 8003bee:	e14b      	b.n	8003e88 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003bf0:	4b7d      	ldr	r3, [pc, #500]	; (8003de8 <HAL_RCC_OscConfig+0x778>)
 8003bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bf6:	f003 0302 	and.w	r3, r3, #2
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d1ed      	bne.n	8003bda <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bfe:	7ffb      	ldrb	r3, [r7, #31]
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d105      	bne.n	8003c10 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c04:	4b78      	ldr	r3, [pc, #480]	; (8003de8 <HAL_RCC_OscConfig+0x778>)
 8003c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c08:	4a77      	ldr	r2, [pc, #476]	; (8003de8 <HAL_RCC_OscConfig+0x778>)
 8003c0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c0e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0320 	and.w	r3, r3, #32
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d03c      	beq.n	8003c96 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d01c      	beq.n	8003c5e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003c24:	4b70      	ldr	r3, [pc, #448]	; (8003de8 <HAL_RCC_OscConfig+0x778>)
 8003c26:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c2a:	4a6f      	ldr	r2, [pc, #444]	; (8003de8 <HAL_RCC_OscConfig+0x778>)
 8003c2c:	f043 0301 	orr.w	r3, r3, #1
 8003c30:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c34:	f7fe fc0c 	bl	8002450 <HAL_GetTick>
 8003c38:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003c3a:	e008      	b.n	8003c4e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c3c:	f7fe fc08 	bl	8002450 <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d901      	bls.n	8003c4e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e11c      	b.n	8003e88 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003c4e:	4b66      	ldr	r3, [pc, #408]	; (8003de8 <HAL_RCC_OscConfig+0x778>)
 8003c50:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c54:	f003 0302 	and.w	r3, r3, #2
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d0ef      	beq.n	8003c3c <HAL_RCC_OscConfig+0x5cc>
 8003c5c:	e01b      	b.n	8003c96 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003c5e:	4b62      	ldr	r3, [pc, #392]	; (8003de8 <HAL_RCC_OscConfig+0x778>)
 8003c60:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c64:	4a60      	ldr	r2, [pc, #384]	; (8003de8 <HAL_RCC_OscConfig+0x778>)
 8003c66:	f023 0301 	bic.w	r3, r3, #1
 8003c6a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c6e:	f7fe fbef 	bl	8002450 <HAL_GetTick>
 8003c72:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003c74:	e008      	b.n	8003c88 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c76:	f7fe fbeb 	bl	8002450 <HAL_GetTick>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	d901      	bls.n	8003c88 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003c84:	2303      	movs	r3, #3
 8003c86:	e0ff      	b.n	8003e88 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003c88:	4b57      	ldr	r3, [pc, #348]	; (8003de8 <HAL_RCC_OscConfig+0x778>)
 8003c8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c8e:	f003 0302 	and.w	r3, r3, #2
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d1ef      	bne.n	8003c76 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	f000 80f3 	beq.w	8003e86 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca4:	2b02      	cmp	r3, #2
 8003ca6:	f040 80c9 	bne.w	8003e3c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003caa:	4b4f      	ldr	r3, [pc, #316]	; (8003de8 <HAL_RCC_OscConfig+0x778>)
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	f003 0203 	and.w	r2, r3, #3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d12c      	bne.n	8003d18 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc8:	3b01      	subs	r3, #1
 8003cca:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d123      	bne.n	8003d18 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cda:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d11b      	bne.n	8003d18 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cea:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d113      	bne.n	8003d18 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cfa:	085b      	lsrs	r3, r3, #1
 8003cfc:	3b01      	subs	r3, #1
 8003cfe:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d109      	bne.n	8003d18 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0e:	085b      	lsrs	r3, r3, #1
 8003d10:	3b01      	subs	r3, #1
 8003d12:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d06b      	beq.n	8003df0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	2b0c      	cmp	r3, #12
 8003d1c:	d062      	beq.n	8003de4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003d1e:	4b32      	ldr	r3, [pc, #200]	; (8003de8 <HAL_RCC_OscConfig+0x778>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d001      	beq.n	8003d2e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e0ac      	b.n	8003e88 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003d2e:	4b2e      	ldr	r3, [pc, #184]	; (8003de8 <HAL_RCC_OscConfig+0x778>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a2d      	ldr	r2, [pc, #180]	; (8003de8 <HAL_RCC_OscConfig+0x778>)
 8003d34:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d38:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003d3a:	f7fe fb89 	bl	8002450 <HAL_GetTick>
 8003d3e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d40:	e008      	b.n	8003d54 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d42:	f7fe fb85 	bl	8002450 <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d901      	bls.n	8003d54 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	e099      	b.n	8003e88 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d54:	4b24      	ldr	r3, [pc, #144]	; (8003de8 <HAL_RCC_OscConfig+0x778>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d1f0      	bne.n	8003d42 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d60:	4b21      	ldr	r3, [pc, #132]	; (8003de8 <HAL_RCC_OscConfig+0x778>)
 8003d62:	68da      	ldr	r2, [r3, #12]
 8003d64:	4b21      	ldr	r3, [pc, #132]	; (8003dec <HAL_RCC_OscConfig+0x77c>)
 8003d66:	4013      	ands	r3, r2
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003d70:	3a01      	subs	r2, #1
 8003d72:	0112      	lsls	r2, r2, #4
 8003d74:	4311      	orrs	r1, r2
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003d7a:	0212      	lsls	r2, r2, #8
 8003d7c:	4311      	orrs	r1, r2
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003d82:	0852      	lsrs	r2, r2, #1
 8003d84:	3a01      	subs	r2, #1
 8003d86:	0552      	lsls	r2, r2, #21
 8003d88:	4311      	orrs	r1, r2
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003d8e:	0852      	lsrs	r2, r2, #1
 8003d90:	3a01      	subs	r2, #1
 8003d92:	0652      	lsls	r2, r2, #25
 8003d94:	4311      	orrs	r1, r2
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d9a:	06d2      	lsls	r2, r2, #27
 8003d9c:	430a      	orrs	r2, r1
 8003d9e:	4912      	ldr	r1, [pc, #72]	; (8003de8 <HAL_RCC_OscConfig+0x778>)
 8003da0:	4313      	orrs	r3, r2
 8003da2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003da4:	4b10      	ldr	r3, [pc, #64]	; (8003de8 <HAL_RCC_OscConfig+0x778>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a0f      	ldr	r2, [pc, #60]	; (8003de8 <HAL_RCC_OscConfig+0x778>)
 8003daa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003dae:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003db0:	4b0d      	ldr	r3, [pc, #52]	; (8003de8 <HAL_RCC_OscConfig+0x778>)
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	4a0c      	ldr	r2, [pc, #48]	; (8003de8 <HAL_RCC_OscConfig+0x778>)
 8003db6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003dba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003dbc:	f7fe fb48 	bl	8002450 <HAL_GetTick>
 8003dc0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dc2:	e008      	b.n	8003dd6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dc4:	f7fe fb44 	bl	8002450 <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e058      	b.n	8003e88 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dd6:	4b04      	ldr	r3, [pc, #16]	; (8003de8 <HAL_RCC_OscConfig+0x778>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d0f0      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003de2:	e050      	b.n	8003e86 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e04f      	b.n	8003e88 <HAL_RCC_OscConfig+0x818>
 8003de8:	40021000 	.word	0x40021000
 8003dec:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003df0:	4b27      	ldr	r3, [pc, #156]	; (8003e90 <HAL_RCC_OscConfig+0x820>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d144      	bne.n	8003e86 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003dfc:	4b24      	ldr	r3, [pc, #144]	; (8003e90 <HAL_RCC_OscConfig+0x820>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a23      	ldr	r2, [pc, #140]	; (8003e90 <HAL_RCC_OscConfig+0x820>)
 8003e02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e06:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e08:	4b21      	ldr	r3, [pc, #132]	; (8003e90 <HAL_RCC_OscConfig+0x820>)
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	4a20      	ldr	r2, [pc, #128]	; (8003e90 <HAL_RCC_OscConfig+0x820>)
 8003e0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e12:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003e14:	f7fe fb1c 	bl	8002450 <HAL_GetTick>
 8003e18:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e1a:	e008      	b.n	8003e2e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e1c:	f7fe fb18 	bl	8002450 <HAL_GetTick>
 8003e20:	4602      	mov	r2, r0
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d901      	bls.n	8003e2e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e02c      	b.n	8003e88 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e2e:	4b18      	ldr	r3, [pc, #96]	; (8003e90 <HAL_RCC_OscConfig+0x820>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d0f0      	beq.n	8003e1c <HAL_RCC_OscConfig+0x7ac>
 8003e3a:	e024      	b.n	8003e86 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e3c:	69bb      	ldr	r3, [r7, #24]
 8003e3e:	2b0c      	cmp	r3, #12
 8003e40:	d01f      	beq.n	8003e82 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e42:	4b13      	ldr	r3, [pc, #76]	; (8003e90 <HAL_RCC_OscConfig+0x820>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a12      	ldr	r2, [pc, #72]	; (8003e90 <HAL_RCC_OscConfig+0x820>)
 8003e48:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e4e:	f7fe faff 	bl	8002450 <HAL_GetTick>
 8003e52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e54:	e008      	b.n	8003e68 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e56:	f7fe fafb 	bl	8002450 <HAL_GetTick>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d901      	bls.n	8003e68 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003e64:	2303      	movs	r3, #3
 8003e66:	e00f      	b.n	8003e88 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e68:	4b09      	ldr	r3, [pc, #36]	; (8003e90 <HAL_RCC_OscConfig+0x820>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d1f0      	bne.n	8003e56 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003e74:	4b06      	ldr	r3, [pc, #24]	; (8003e90 <HAL_RCC_OscConfig+0x820>)
 8003e76:	68da      	ldr	r2, [r3, #12]
 8003e78:	4905      	ldr	r1, [pc, #20]	; (8003e90 <HAL_RCC_OscConfig+0x820>)
 8003e7a:	4b06      	ldr	r3, [pc, #24]	; (8003e94 <HAL_RCC_OscConfig+0x824>)
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	60cb      	str	r3, [r1, #12]
 8003e80:	e001      	b.n	8003e86 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e000      	b.n	8003e88 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003e86:	2300      	movs	r3, #0
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3720      	adds	r7, #32
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	40021000 	.word	0x40021000
 8003e94:	feeefffc 	.word	0xfeeefffc

08003e98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d101      	bne.n	8003eac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e0e7      	b.n	800407c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003eac:	4b75      	ldr	r3, [pc, #468]	; (8004084 <HAL_RCC_ClockConfig+0x1ec>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0307 	and.w	r3, r3, #7
 8003eb4:	683a      	ldr	r2, [r7, #0]
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d910      	bls.n	8003edc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eba:	4b72      	ldr	r3, [pc, #456]	; (8004084 <HAL_RCC_ClockConfig+0x1ec>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f023 0207 	bic.w	r2, r3, #7
 8003ec2:	4970      	ldr	r1, [pc, #448]	; (8004084 <HAL_RCC_ClockConfig+0x1ec>)
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eca:	4b6e      	ldr	r3, [pc, #440]	; (8004084 <HAL_RCC_ClockConfig+0x1ec>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0307 	and.w	r3, r3, #7
 8003ed2:	683a      	ldr	r2, [r7, #0]
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d001      	beq.n	8003edc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e0cf      	b.n	800407c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0302 	and.w	r3, r3, #2
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d010      	beq.n	8003f0a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	689a      	ldr	r2, [r3, #8]
 8003eec:	4b66      	ldr	r3, [pc, #408]	; (8004088 <HAL_RCC_ClockConfig+0x1f0>)
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d908      	bls.n	8003f0a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ef8:	4b63      	ldr	r3, [pc, #396]	; (8004088 <HAL_RCC_ClockConfig+0x1f0>)
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	4960      	ldr	r1, [pc, #384]	; (8004088 <HAL_RCC_ClockConfig+0x1f0>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0301 	and.w	r3, r3, #1
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d04c      	beq.n	8003fb0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	2b03      	cmp	r3, #3
 8003f1c:	d107      	bne.n	8003f2e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f1e:	4b5a      	ldr	r3, [pc, #360]	; (8004088 <HAL_RCC_ClockConfig+0x1f0>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d121      	bne.n	8003f6e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e0a6      	b.n	800407c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d107      	bne.n	8003f46 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f36:	4b54      	ldr	r3, [pc, #336]	; (8004088 <HAL_RCC_ClockConfig+0x1f0>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d115      	bne.n	8003f6e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e09a      	b.n	800407c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d107      	bne.n	8003f5e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f4e:	4b4e      	ldr	r3, [pc, #312]	; (8004088 <HAL_RCC_ClockConfig+0x1f0>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0302 	and.w	r3, r3, #2
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d109      	bne.n	8003f6e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e08e      	b.n	800407c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f5e:	4b4a      	ldr	r3, [pc, #296]	; (8004088 <HAL_RCC_ClockConfig+0x1f0>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d101      	bne.n	8003f6e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e086      	b.n	800407c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003f6e:	4b46      	ldr	r3, [pc, #280]	; (8004088 <HAL_RCC_ClockConfig+0x1f0>)
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f023 0203 	bic.w	r2, r3, #3
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	4943      	ldr	r1, [pc, #268]	; (8004088 <HAL_RCC_ClockConfig+0x1f0>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f80:	f7fe fa66 	bl	8002450 <HAL_GetTick>
 8003f84:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f86:	e00a      	b.n	8003f9e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f88:	f7fe fa62 	bl	8002450 <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d901      	bls.n	8003f9e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e06e      	b.n	800407c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f9e:	4b3a      	ldr	r3, [pc, #232]	; (8004088 <HAL_RCC_ClockConfig+0x1f0>)
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	f003 020c 	and.w	r2, r3, #12
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d1eb      	bne.n	8003f88 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0302 	and.w	r3, r3, #2
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d010      	beq.n	8003fde <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	689a      	ldr	r2, [r3, #8]
 8003fc0:	4b31      	ldr	r3, [pc, #196]	; (8004088 <HAL_RCC_ClockConfig+0x1f0>)
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d208      	bcs.n	8003fde <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fcc:	4b2e      	ldr	r3, [pc, #184]	; (8004088 <HAL_RCC_ClockConfig+0x1f0>)
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	492b      	ldr	r1, [pc, #172]	; (8004088 <HAL_RCC_ClockConfig+0x1f0>)
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003fde:	4b29      	ldr	r3, [pc, #164]	; (8004084 <HAL_RCC_ClockConfig+0x1ec>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0307 	and.w	r3, r3, #7
 8003fe6:	683a      	ldr	r2, [r7, #0]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d210      	bcs.n	800400e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fec:	4b25      	ldr	r3, [pc, #148]	; (8004084 <HAL_RCC_ClockConfig+0x1ec>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f023 0207 	bic.w	r2, r3, #7
 8003ff4:	4923      	ldr	r1, [pc, #140]	; (8004084 <HAL_RCC_ClockConfig+0x1ec>)
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ffc:	4b21      	ldr	r3, [pc, #132]	; (8004084 <HAL_RCC_ClockConfig+0x1ec>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0307 	and.w	r3, r3, #7
 8004004:	683a      	ldr	r2, [r7, #0]
 8004006:	429a      	cmp	r2, r3
 8004008:	d001      	beq.n	800400e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e036      	b.n	800407c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0304 	and.w	r3, r3, #4
 8004016:	2b00      	cmp	r3, #0
 8004018:	d008      	beq.n	800402c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800401a:	4b1b      	ldr	r3, [pc, #108]	; (8004088 <HAL_RCC_ClockConfig+0x1f0>)
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	4918      	ldr	r1, [pc, #96]	; (8004088 <HAL_RCC_ClockConfig+0x1f0>)
 8004028:	4313      	orrs	r3, r2
 800402a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0308 	and.w	r3, r3, #8
 8004034:	2b00      	cmp	r3, #0
 8004036:	d009      	beq.n	800404c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004038:	4b13      	ldr	r3, [pc, #76]	; (8004088 <HAL_RCC_ClockConfig+0x1f0>)
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	691b      	ldr	r3, [r3, #16]
 8004044:	00db      	lsls	r3, r3, #3
 8004046:	4910      	ldr	r1, [pc, #64]	; (8004088 <HAL_RCC_ClockConfig+0x1f0>)
 8004048:	4313      	orrs	r3, r2
 800404a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800404c:	f000 f824 	bl	8004098 <HAL_RCC_GetSysClockFreq>
 8004050:	4602      	mov	r2, r0
 8004052:	4b0d      	ldr	r3, [pc, #52]	; (8004088 <HAL_RCC_ClockConfig+0x1f0>)
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	091b      	lsrs	r3, r3, #4
 8004058:	f003 030f 	and.w	r3, r3, #15
 800405c:	490b      	ldr	r1, [pc, #44]	; (800408c <HAL_RCC_ClockConfig+0x1f4>)
 800405e:	5ccb      	ldrb	r3, [r1, r3]
 8004060:	f003 031f 	and.w	r3, r3, #31
 8004064:	fa22 f303 	lsr.w	r3, r2, r3
 8004068:	4a09      	ldr	r2, [pc, #36]	; (8004090 <HAL_RCC_ClockConfig+0x1f8>)
 800406a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800406c:	4b09      	ldr	r3, [pc, #36]	; (8004094 <HAL_RCC_ClockConfig+0x1fc>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4618      	mov	r0, r3
 8004072:	f7fe f99d 	bl	80023b0 <HAL_InitTick>
 8004076:	4603      	mov	r3, r0
 8004078:	72fb      	strb	r3, [r7, #11]

  return status;
 800407a:	7afb      	ldrb	r3, [r7, #11]
}
 800407c:	4618      	mov	r0, r3
 800407e:	3710      	adds	r7, #16
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}
 8004084:	40022000 	.word	0x40022000
 8004088:	40021000 	.word	0x40021000
 800408c:	080095ec 	.word	0x080095ec
 8004090:	20000000 	.word	0x20000000
 8004094:	20000004 	.word	0x20000004

08004098 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004098:	b480      	push	{r7}
 800409a:	b089      	sub	sp, #36	; 0x24
 800409c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800409e:	2300      	movs	r3, #0
 80040a0:	61fb      	str	r3, [r7, #28]
 80040a2:	2300      	movs	r3, #0
 80040a4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040a6:	4b3e      	ldr	r3, [pc, #248]	; (80041a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	f003 030c 	and.w	r3, r3, #12
 80040ae:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040b0:	4b3b      	ldr	r3, [pc, #236]	; (80041a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	f003 0303 	and.w	r3, r3, #3
 80040b8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d005      	beq.n	80040cc <HAL_RCC_GetSysClockFreq+0x34>
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	2b0c      	cmp	r3, #12
 80040c4:	d121      	bne.n	800410a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d11e      	bne.n	800410a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80040cc:	4b34      	ldr	r3, [pc, #208]	; (80041a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0308 	and.w	r3, r3, #8
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d107      	bne.n	80040e8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80040d8:	4b31      	ldr	r3, [pc, #196]	; (80041a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80040da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040de:	0a1b      	lsrs	r3, r3, #8
 80040e0:	f003 030f 	and.w	r3, r3, #15
 80040e4:	61fb      	str	r3, [r7, #28]
 80040e6:	e005      	b.n	80040f4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80040e8:	4b2d      	ldr	r3, [pc, #180]	; (80041a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	091b      	lsrs	r3, r3, #4
 80040ee:	f003 030f 	and.w	r3, r3, #15
 80040f2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80040f4:	4a2b      	ldr	r2, [pc, #172]	; (80041a4 <HAL_RCC_GetSysClockFreq+0x10c>)
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040fc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d10d      	bne.n	8004120 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004108:	e00a      	b.n	8004120 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	2b04      	cmp	r3, #4
 800410e:	d102      	bne.n	8004116 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004110:	4b25      	ldr	r3, [pc, #148]	; (80041a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004112:	61bb      	str	r3, [r7, #24]
 8004114:	e004      	b.n	8004120 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	2b08      	cmp	r3, #8
 800411a:	d101      	bne.n	8004120 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800411c:	4b23      	ldr	r3, [pc, #140]	; (80041ac <HAL_RCC_GetSysClockFreq+0x114>)
 800411e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	2b0c      	cmp	r3, #12
 8004124:	d134      	bne.n	8004190 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004126:	4b1e      	ldr	r3, [pc, #120]	; (80041a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	f003 0303 	and.w	r3, r3, #3
 800412e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	2b02      	cmp	r3, #2
 8004134:	d003      	beq.n	800413e <HAL_RCC_GetSysClockFreq+0xa6>
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	2b03      	cmp	r3, #3
 800413a:	d003      	beq.n	8004144 <HAL_RCC_GetSysClockFreq+0xac>
 800413c:	e005      	b.n	800414a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800413e:	4b1a      	ldr	r3, [pc, #104]	; (80041a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004140:	617b      	str	r3, [r7, #20]
      break;
 8004142:	e005      	b.n	8004150 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004144:	4b19      	ldr	r3, [pc, #100]	; (80041ac <HAL_RCC_GetSysClockFreq+0x114>)
 8004146:	617b      	str	r3, [r7, #20]
      break;
 8004148:	e002      	b.n	8004150 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	617b      	str	r3, [r7, #20]
      break;
 800414e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004150:	4b13      	ldr	r3, [pc, #76]	; (80041a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	091b      	lsrs	r3, r3, #4
 8004156:	f003 0307 	and.w	r3, r3, #7
 800415a:	3301      	adds	r3, #1
 800415c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800415e:	4b10      	ldr	r3, [pc, #64]	; (80041a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	0a1b      	lsrs	r3, r3, #8
 8004164:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004168:	697a      	ldr	r2, [r7, #20]
 800416a:	fb03 f202 	mul.w	r2, r3, r2
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	fbb2 f3f3 	udiv	r3, r2, r3
 8004174:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004176:	4b0a      	ldr	r3, [pc, #40]	; (80041a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	0e5b      	lsrs	r3, r3, #25
 800417c:	f003 0303 	and.w	r3, r3, #3
 8004180:	3301      	adds	r3, #1
 8004182:	005b      	lsls	r3, r3, #1
 8004184:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004186:	697a      	ldr	r2, [r7, #20]
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	fbb2 f3f3 	udiv	r3, r2, r3
 800418e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004190:	69bb      	ldr	r3, [r7, #24]
}
 8004192:	4618      	mov	r0, r3
 8004194:	3724      	adds	r7, #36	; 0x24
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr
 800419e:	bf00      	nop
 80041a0:	40021000 	.word	0x40021000
 80041a4:	08009604 	.word	0x08009604
 80041a8:	00f42400 	.word	0x00f42400
 80041ac:	007a1200 	.word	0x007a1200

080041b0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041b0:	b480      	push	{r7}
 80041b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041b4:	4b03      	ldr	r3, [pc, #12]	; (80041c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80041b6:	681b      	ldr	r3, [r3, #0]
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr
 80041c2:	bf00      	nop
 80041c4:	20000000 	.word	0x20000000

080041c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80041cc:	f7ff fff0 	bl	80041b0 <HAL_RCC_GetHCLKFreq>
 80041d0:	4602      	mov	r2, r0
 80041d2:	4b06      	ldr	r3, [pc, #24]	; (80041ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	0a1b      	lsrs	r3, r3, #8
 80041d8:	f003 0307 	and.w	r3, r3, #7
 80041dc:	4904      	ldr	r1, [pc, #16]	; (80041f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80041de:	5ccb      	ldrb	r3, [r1, r3]
 80041e0:	f003 031f 	and.w	r3, r3, #31
 80041e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	40021000 	.word	0x40021000
 80041f0:	080095fc 	.word	0x080095fc

080041f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80041f8:	f7ff ffda 	bl	80041b0 <HAL_RCC_GetHCLKFreq>
 80041fc:	4602      	mov	r2, r0
 80041fe:	4b06      	ldr	r3, [pc, #24]	; (8004218 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	0adb      	lsrs	r3, r3, #11
 8004204:	f003 0307 	and.w	r3, r3, #7
 8004208:	4904      	ldr	r1, [pc, #16]	; (800421c <HAL_RCC_GetPCLK2Freq+0x28>)
 800420a:	5ccb      	ldrb	r3, [r1, r3]
 800420c:	f003 031f 	and.w	r3, r3, #31
 8004210:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004214:	4618      	mov	r0, r3
 8004216:	bd80      	pop	{r7, pc}
 8004218:	40021000 	.word	0x40021000
 800421c:	080095fc 	.word	0x080095fc

08004220 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b086      	sub	sp, #24
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004228:	2300      	movs	r3, #0
 800422a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800422c:	4b2a      	ldr	r3, [pc, #168]	; (80042d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800422e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004230:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d003      	beq.n	8004240 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004238:	f7ff f9b6 	bl	80035a8 <HAL_PWREx_GetVoltageRange>
 800423c:	6178      	str	r0, [r7, #20]
 800423e:	e014      	b.n	800426a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004240:	4b25      	ldr	r3, [pc, #148]	; (80042d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004244:	4a24      	ldr	r2, [pc, #144]	; (80042d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004246:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800424a:	6593      	str	r3, [r2, #88]	; 0x58
 800424c:	4b22      	ldr	r3, [pc, #136]	; (80042d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800424e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004250:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004254:	60fb      	str	r3, [r7, #12]
 8004256:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004258:	f7ff f9a6 	bl	80035a8 <HAL_PWREx_GetVoltageRange>
 800425c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800425e:	4b1e      	ldr	r3, [pc, #120]	; (80042d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004262:	4a1d      	ldr	r2, [pc, #116]	; (80042d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004264:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004268:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004270:	d10b      	bne.n	800428a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2b80      	cmp	r3, #128	; 0x80
 8004276:	d919      	bls.n	80042ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2ba0      	cmp	r3, #160	; 0xa0
 800427c:	d902      	bls.n	8004284 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800427e:	2302      	movs	r3, #2
 8004280:	613b      	str	r3, [r7, #16]
 8004282:	e013      	b.n	80042ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004284:	2301      	movs	r3, #1
 8004286:	613b      	str	r3, [r7, #16]
 8004288:	e010      	b.n	80042ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2b80      	cmp	r3, #128	; 0x80
 800428e:	d902      	bls.n	8004296 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004290:	2303      	movs	r3, #3
 8004292:	613b      	str	r3, [r7, #16]
 8004294:	e00a      	b.n	80042ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2b80      	cmp	r3, #128	; 0x80
 800429a:	d102      	bne.n	80042a2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800429c:	2302      	movs	r3, #2
 800429e:	613b      	str	r3, [r7, #16]
 80042a0:	e004      	b.n	80042ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2b70      	cmp	r3, #112	; 0x70
 80042a6:	d101      	bne.n	80042ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80042a8:	2301      	movs	r3, #1
 80042aa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80042ac:	4b0b      	ldr	r3, [pc, #44]	; (80042dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f023 0207 	bic.w	r2, r3, #7
 80042b4:	4909      	ldr	r1, [pc, #36]	; (80042dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80042bc:	4b07      	ldr	r3, [pc, #28]	; (80042dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0307 	and.w	r3, r3, #7
 80042c4:	693a      	ldr	r2, [r7, #16]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d001      	beq.n	80042ce <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e000      	b.n	80042d0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3718      	adds	r7, #24
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	40021000 	.word	0x40021000
 80042dc:	40022000 	.word	0x40022000

080042e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b086      	sub	sp, #24
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80042e8:	2300      	movs	r3, #0
 80042ea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80042ec:	2300      	movs	r3, #0
 80042ee:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d031      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004300:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004304:	d01a      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004306:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800430a:	d814      	bhi.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800430c:	2b00      	cmp	r3, #0
 800430e:	d009      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004310:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004314:	d10f      	bne.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004316:	4b5d      	ldr	r3, [pc, #372]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	4a5c      	ldr	r2, [pc, #368]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800431c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004320:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004322:	e00c      	b.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	3304      	adds	r3, #4
 8004328:	2100      	movs	r1, #0
 800432a:	4618      	mov	r0, r3
 800432c:	f000 f9de 	bl	80046ec <RCCEx_PLLSAI1_Config>
 8004330:	4603      	mov	r3, r0
 8004332:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004334:	e003      	b.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	74fb      	strb	r3, [r7, #19]
      break;
 800433a:	e000      	b.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800433c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800433e:	7cfb      	ldrb	r3, [r7, #19]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d10b      	bne.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004344:	4b51      	ldr	r3, [pc, #324]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800434a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004352:	494e      	ldr	r1, [pc, #312]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004354:	4313      	orrs	r3, r2
 8004356:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800435a:	e001      	b.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800435c:	7cfb      	ldrb	r3, [r7, #19]
 800435e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004368:	2b00      	cmp	r3, #0
 800436a:	f000 809e 	beq.w	80044aa <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800436e:	2300      	movs	r3, #0
 8004370:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004372:	4b46      	ldr	r3, [pc, #280]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d101      	bne.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800437e:	2301      	movs	r3, #1
 8004380:	e000      	b.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004382:	2300      	movs	r3, #0
 8004384:	2b00      	cmp	r3, #0
 8004386:	d00d      	beq.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004388:	4b40      	ldr	r3, [pc, #256]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800438a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800438c:	4a3f      	ldr	r2, [pc, #252]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800438e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004392:	6593      	str	r3, [r2, #88]	; 0x58
 8004394:	4b3d      	ldr	r3, [pc, #244]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004398:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800439c:	60bb      	str	r3, [r7, #8]
 800439e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043a0:	2301      	movs	r3, #1
 80043a2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043a4:	4b3a      	ldr	r3, [pc, #232]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a39      	ldr	r2, [pc, #228]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80043aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043ae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80043b0:	f7fe f84e 	bl	8002450 <HAL_GetTick>
 80043b4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80043b6:	e009      	b.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043b8:	f7fe f84a 	bl	8002450 <HAL_GetTick>
 80043bc:	4602      	mov	r2, r0
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	2b02      	cmp	r3, #2
 80043c4:	d902      	bls.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80043c6:	2303      	movs	r3, #3
 80043c8:	74fb      	strb	r3, [r7, #19]
        break;
 80043ca:	e005      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80043cc:	4b30      	ldr	r3, [pc, #192]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d0ef      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80043d8:	7cfb      	ldrb	r3, [r7, #19]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d15a      	bne.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80043de:	4b2b      	ldr	r3, [pc, #172]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043e8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d01e      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043f4:	697a      	ldr	r2, [r7, #20]
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d019      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80043fa:	4b24      	ldr	r3, [pc, #144]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004400:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004404:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004406:	4b21      	ldr	r3, [pc, #132]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004408:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800440c:	4a1f      	ldr	r2, [pc, #124]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800440e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004412:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004416:	4b1d      	ldr	r3, [pc, #116]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004418:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800441c:	4a1b      	ldr	r2, [pc, #108]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800441e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004422:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004426:	4a19      	ldr	r2, [pc, #100]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	f003 0301 	and.w	r3, r3, #1
 8004434:	2b00      	cmp	r3, #0
 8004436:	d016      	beq.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004438:	f7fe f80a 	bl	8002450 <HAL_GetTick>
 800443c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800443e:	e00b      	b.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004440:	f7fe f806 	bl	8002450 <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	f241 3288 	movw	r2, #5000	; 0x1388
 800444e:	4293      	cmp	r3, r2
 8004450:	d902      	bls.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	74fb      	strb	r3, [r7, #19]
            break;
 8004456:	e006      	b.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004458:	4b0c      	ldr	r3, [pc, #48]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800445a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800445e:	f003 0302 	and.w	r3, r3, #2
 8004462:	2b00      	cmp	r3, #0
 8004464:	d0ec      	beq.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004466:	7cfb      	ldrb	r3, [r7, #19]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d10b      	bne.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800446c:	4b07      	ldr	r3, [pc, #28]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800446e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004472:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800447a:	4904      	ldr	r1, [pc, #16]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800447c:	4313      	orrs	r3, r2
 800447e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004482:	e009      	b.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004484:	7cfb      	ldrb	r3, [r7, #19]
 8004486:	74bb      	strb	r3, [r7, #18]
 8004488:	e006      	b.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800448a:	bf00      	nop
 800448c:	40021000 	.word	0x40021000
 8004490:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004494:	7cfb      	ldrb	r3, [r7, #19]
 8004496:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004498:	7c7b      	ldrb	r3, [r7, #17]
 800449a:	2b01      	cmp	r3, #1
 800449c:	d105      	bne.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800449e:	4b8a      	ldr	r3, [pc, #552]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80044a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044a2:	4a89      	ldr	r2, [pc, #548]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80044a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044a8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0301 	and.w	r3, r3, #1
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d00a      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80044b6:	4b84      	ldr	r3, [pc, #528]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80044b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044bc:	f023 0203 	bic.w	r2, r3, #3
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a1b      	ldr	r3, [r3, #32]
 80044c4:	4980      	ldr	r1, [pc, #512]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80044c6:	4313      	orrs	r3, r2
 80044c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 0302 	and.w	r3, r3, #2
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d00a      	beq.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80044d8:	4b7b      	ldr	r3, [pc, #492]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80044da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044de:	f023 020c 	bic.w	r2, r3, #12
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e6:	4978      	ldr	r1, [pc, #480]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80044e8:	4313      	orrs	r3, r2
 80044ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 0320 	and.w	r3, r3, #32
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d00a      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80044fa:	4b73      	ldr	r3, [pc, #460]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80044fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004500:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004508:	496f      	ldr	r1, [pc, #444]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800450a:	4313      	orrs	r3, r2
 800450c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004518:	2b00      	cmp	r3, #0
 800451a:	d00a      	beq.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800451c:	4b6a      	ldr	r3, [pc, #424]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800451e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004522:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800452a:	4967      	ldr	r1, [pc, #412]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800452c:	4313      	orrs	r3, r2
 800452e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800453a:	2b00      	cmp	r3, #0
 800453c:	d00a      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800453e:	4b62      	ldr	r3, [pc, #392]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004540:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004544:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800454c:	495e      	ldr	r1, [pc, #376]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800454e:	4313      	orrs	r3, r2
 8004550:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800455c:	2b00      	cmp	r3, #0
 800455e:	d00a      	beq.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004560:	4b59      	ldr	r3, [pc, #356]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004566:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800456e:	4956      	ldr	r1, [pc, #344]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004570:	4313      	orrs	r3, r2
 8004572:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800457e:	2b00      	cmp	r3, #0
 8004580:	d00a      	beq.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004582:	4b51      	ldr	r3, [pc, #324]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004584:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004588:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004590:	494d      	ldr	r1, [pc, #308]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004592:	4313      	orrs	r3, r2
 8004594:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d028      	beq.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80045a4:	4b48      	ldr	r3, [pc, #288]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b2:	4945      	ldr	r1, [pc, #276]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045b4:	4313      	orrs	r3, r2
 80045b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045c2:	d106      	bne.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045c4:	4b40      	ldr	r3, [pc, #256]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	4a3f      	ldr	r2, [pc, #252]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045ce:	60d3      	str	r3, [r2, #12]
 80045d0:	e011      	b.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80045da:	d10c      	bne.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	3304      	adds	r3, #4
 80045e0:	2101      	movs	r1, #1
 80045e2:	4618      	mov	r0, r3
 80045e4:	f000 f882 	bl	80046ec <RCCEx_PLLSAI1_Config>
 80045e8:	4603      	mov	r3, r0
 80045ea:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80045ec:	7cfb      	ldrb	r3, [r7, #19]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d001      	beq.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80045f2:	7cfb      	ldrb	r3, [r7, #19]
 80045f4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d028      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004602:	4b31      	ldr	r3, [pc, #196]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004604:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004608:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004610:	492d      	ldr	r1, [pc, #180]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004612:	4313      	orrs	r3, r2
 8004614:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800461c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004620:	d106      	bne.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004622:	4b29      	ldr	r3, [pc, #164]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	4a28      	ldr	r2, [pc, #160]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004628:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800462c:	60d3      	str	r3, [r2, #12]
 800462e:	e011      	b.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004634:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004638:	d10c      	bne.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	3304      	adds	r3, #4
 800463e:	2101      	movs	r1, #1
 8004640:	4618      	mov	r0, r3
 8004642:	f000 f853 	bl	80046ec <RCCEx_PLLSAI1_Config>
 8004646:	4603      	mov	r3, r0
 8004648:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800464a:	7cfb      	ldrb	r3, [r7, #19]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d001      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8004650:	7cfb      	ldrb	r3, [r7, #19]
 8004652:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800465c:	2b00      	cmp	r3, #0
 800465e:	d01c      	beq.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004660:	4b19      	ldr	r3, [pc, #100]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004666:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800466e:	4916      	ldr	r1, [pc, #88]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004670:	4313      	orrs	r3, r2
 8004672:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800467a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800467e:	d10c      	bne.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	3304      	adds	r3, #4
 8004684:	2102      	movs	r1, #2
 8004686:	4618      	mov	r0, r3
 8004688:	f000 f830 	bl	80046ec <RCCEx_PLLSAI1_Config>
 800468c:	4603      	mov	r3, r0
 800468e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004690:	7cfb      	ldrb	r3, [r7, #19]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d001      	beq.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8004696:	7cfb      	ldrb	r3, [r7, #19]
 8004698:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00a      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80046a6:	4b08      	ldr	r3, [pc, #32]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ac:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046b4:	4904      	ldr	r1, [pc, #16]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046b6:	4313      	orrs	r3, r2
 80046b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80046bc:	7cbb      	ldrb	r3, [r7, #18]
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3718      	adds	r7, #24
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	bf00      	nop
 80046c8:	40021000 	.word	0x40021000

080046cc <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80046cc:	b480      	push	{r7}
 80046ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80046d0:	4b05      	ldr	r3, [pc, #20]	; (80046e8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a04      	ldr	r2, [pc, #16]	; (80046e8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80046d6:	f043 0304 	orr.w	r3, r3, #4
 80046da:	6013      	str	r3, [r2, #0]
}
 80046dc:	bf00      	nop
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	40021000 	.word	0x40021000

080046ec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80046f6:	2300      	movs	r3, #0
 80046f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80046fa:	4b74      	ldr	r3, [pc, #464]	; (80048cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	f003 0303 	and.w	r3, r3, #3
 8004702:	2b00      	cmp	r3, #0
 8004704:	d018      	beq.n	8004738 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004706:	4b71      	ldr	r3, [pc, #452]	; (80048cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004708:	68db      	ldr	r3, [r3, #12]
 800470a:	f003 0203 	and.w	r2, r3, #3
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	429a      	cmp	r2, r3
 8004714:	d10d      	bne.n	8004732 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
       ||
 800471a:	2b00      	cmp	r3, #0
 800471c:	d009      	beq.n	8004732 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800471e:	4b6b      	ldr	r3, [pc, #428]	; (80048cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	091b      	lsrs	r3, r3, #4
 8004724:	f003 0307 	and.w	r3, r3, #7
 8004728:	1c5a      	adds	r2, r3, #1
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	685b      	ldr	r3, [r3, #4]
       ||
 800472e:	429a      	cmp	r2, r3
 8004730:	d047      	beq.n	80047c2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	73fb      	strb	r3, [r7, #15]
 8004736:	e044      	b.n	80047c2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2b03      	cmp	r3, #3
 800473e:	d018      	beq.n	8004772 <RCCEx_PLLSAI1_Config+0x86>
 8004740:	2b03      	cmp	r3, #3
 8004742:	d825      	bhi.n	8004790 <RCCEx_PLLSAI1_Config+0xa4>
 8004744:	2b01      	cmp	r3, #1
 8004746:	d002      	beq.n	800474e <RCCEx_PLLSAI1_Config+0x62>
 8004748:	2b02      	cmp	r3, #2
 800474a:	d009      	beq.n	8004760 <RCCEx_PLLSAI1_Config+0x74>
 800474c:	e020      	b.n	8004790 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800474e:	4b5f      	ldr	r3, [pc, #380]	; (80048cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 0302 	and.w	r3, r3, #2
 8004756:	2b00      	cmp	r3, #0
 8004758:	d11d      	bne.n	8004796 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800475e:	e01a      	b.n	8004796 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004760:	4b5a      	ldr	r3, [pc, #360]	; (80048cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004768:	2b00      	cmp	r3, #0
 800476a:	d116      	bne.n	800479a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004770:	e013      	b.n	800479a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004772:	4b56      	ldr	r3, [pc, #344]	; (80048cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d10f      	bne.n	800479e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800477e:	4b53      	ldr	r3, [pc, #332]	; (80048cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d109      	bne.n	800479e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800478e:	e006      	b.n	800479e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	73fb      	strb	r3, [r7, #15]
      break;
 8004794:	e004      	b.n	80047a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004796:	bf00      	nop
 8004798:	e002      	b.n	80047a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800479a:	bf00      	nop
 800479c:	e000      	b.n	80047a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800479e:	bf00      	nop
    }

    if(status == HAL_OK)
 80047a0:	7bfb      	ldrb	r3, [r7, #15]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d10d      	bne.n	80047c2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80047a6:	4b49      	ldr	r3, [pc, #292]	; (80048cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6819      	ldr	r1, [r3, #0]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	3b01      	subs	r3, #1
 80047b8:	011b      	lsls	r3, r3, #4
 80047ba:	430b      	orrs	r3, r1
 80047bc:	4943      	ldr	r1, [pc, #268]	; (80048cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80047be:	4313      	orrs	r3, r2
 80047c0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80047c2:	7bfb      	ldrb	r3, [r7, #15]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d17c      	bne.n	80048c2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80047c8:	4b40      	ldr	r3, [pc, #256]	; (80048cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a3f      	ldr	r2, [pc, #252]	; (80048cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80047ce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80047d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047d4:	f7fd fe3c 	bl	8002450 <HAL_GetTick>
 80047d8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80047da:	e009      	b.n	80047f0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80047dc:	f7fd fe38 	bl	8002450 <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d902      	bls.n	80047f0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	73fb      	strb	r3, [r7, #15]
        break;
 80047ee:	e005      	b.n	80047fc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80047f0:	4b36      	ldr	r3, [pc, #216]	; (80048cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d1ef      	bne.n	80047dc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80047fc:	7bfb      	ldrb	r3, [r7, #15]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d15f      	bne.n	80048c2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d110      	bne.n	800482a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004808:	4b30      	ldr	r3, [pc, #192]	; (80048cc <RCCEx_PLLSAI1_Config+0x1e0>)
 800480a:	691b      	ldr	r3, [r3, #16]
 800480c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004810:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	6892      	ldr	r2, [r2, #8]
 8004818:	0211      	lsls	r1, r2, #8
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	68d2      	ldr	r2, [r2, #12]
 800481e:	06d2      	lsls	r2, r2, #27
 8004820:	430a      	orrs	r2, r1
 8004822:	492a      	ldr	r1, [pc, #168]	; (80048cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004824:	4313      	orrs	r3, r2
 8004826:	610b      	str	r3, [r1, #16]
 8004828:	e027      	b.n	800487a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	2b01      	cmp	r3, #1
 800482e:	d112      	bne.n	8004856 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004830:	4b26      	ldr	r3, [pc, #152]	; (80048cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004832:	691b      	ldr	r3, [r3, #16]
 8004834:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004838:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	6892      	ldr	r2, [r2, #8]
 8004840:	0211      	lsls	r1, r2, #8
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	6912      	ldr	r2, [r2, #16]
 8004846:	0852      	lsrs	r2, r2, #1
 8004848:	3a01      	subs	r2, #1
 800484a:	0552      	lsls	r2, r2, #21
 800484c:	430a      	orrs	r2, r1
 800484e:	491f      	ldr	r1, [pc, #124]	; (80048cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004850:	4313      	orrs	r3, r2
 8004852:	610b      	str	r3, [r1, #16]
 8004854:	e011      	b.n	800487a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004856:	4b1d      	ldr	r3, [pc, #116]	; (80048cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004858:	691b      	ldr	r3, [r3, #16]
 800485a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800485e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	6892      	ldr	r2, [r2, #8]
 8004866:	0211      	lsls	r1, r2, #8
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	6952      	ldr	r2, [r2, #20]
 800486c:	0852      	lsrs	r2, r2, #1
 800486e:	3a01      	subs	r2, #1
 8004870:	0652      	lsls	r2, r2, #25
 8004872:	430a      	orrs	r2, r1
 8004874:	4915      	ldr	r1, [pc, #84]	; (80048cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004876:	4313      	orrs	r3, r2
 8004878:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800487a:	4b14      	ldr	r3, [pc, #80]	; (80048cc <RCCEx_PLLSAI1_Config+0x1e0>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a13      	ldr	r2, [pc, #76]	; (80048cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004880:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004884:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004886:	f7fd fde3 	bl	8002450 <HAL_GetTick>
 800488a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800488c:	e009      	b.n	80048a2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800488e:	f7fd fddf 	bl	8002450 <HAL_GetTick>
 8004892:	4602      	mov	r2, r0
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	1ad3      	subs	r3, r2, r3
 8004898:	2b02      	cmp	r3, #2
 800489a:	d902      	bls.n	80048a2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800489c:	2303      	movs	r3, #3
 800489e:	73fb      	strb	r3, [r7, #15]
          break;
 80048a0:	e005      	b.n	80048ae <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80048a2:	4b0a      	ldr	r3, [pc, #40]	; (80048cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d0ef      	beq.n	800488e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80048ae:	7bfb      	ldrb	r3, [r7, #15]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d106      	bne.n	80048c2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80048b4:	4b05      	ldr	r3, [pc, #20]	; (80048cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80048b6:	691a      	ldr	r2, [r3, #16]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	699b      	ldr	r3, [r3, #24]
 80048bc:	4903      	ldr	r1, [pc, #12]	; (80048cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80048be:	4313      	orrs	r3, r2
 80048c0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80048c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3710      	adds	r7, #16
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}
 80048cc:	40021000 	.word	0x40021000

080048d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b082      	sub	sp, #8
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d101      	bne.n	80048e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e049      	b.n	8004976 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d106      	bne.n	80048fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f7fd fab6 	bl	8001e68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2202      	movs	r2, #2
 8004900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	3304      	adds	r3, #4
 800490c:	4619      	mov	r1, r3
 800490e:	4610      	mov	r0, r2
 8004910:	f000 fd3c 	bl	800538c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004974:	2300      	movs	r3, #0
}
 8004976:	4618      	mov	r0, r3
 8004978:	3708      	adds	r7, #8
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
	...

08004980 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004980:	b480      	push	{r7}
 8004982:	b085      	sub	sp, #20
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800498e:	b2db      	uxtb	r3, r3
 8004990:	2b01      	cmp	r3, #1
 8004992:	d001      	beq.n	8004998 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e033      	b.n	8004a00 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2202      	movs	r2, #2
 800499c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a19      	ldr	r2, [pc, #100]	; (8004a0c <HAL_TIM_Base_Start+0x8c>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d009      	beq.n	80049be <HAL_TIM_Base_Start+0x3e>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049b2:	d004      	beq.n	80049be <HAL_TIM_Base_Start+0x3e>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a15      	ldr	r2, [pc, #84]	; (8004a10 <HAL_TIM_Base_Start+0x90>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d115      	bne.n	80049ea <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	689a      	ldr	r2, [r3, #8]
 80049c4:	4b13      	ldr	r3, [pc, #76]	; (8004a14 <HAL_TIM_Base_Start+0x94>)
 80049c6:	4013      	ands	r3, r2
 80049c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2b06      	cmp	r3, #6
 80049ce:	d015      	beq.n	80049fc <HAL_TIM_Base_Start+0x7c>
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049d6:	d011      	beq.n	80049fc <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f042 0201 	orr.w	r2, r2, #1
 80049e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049e8:	e008      	b.n	80049fc <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f042 0201 	orr.w	r2, r2, #1
 80049f8:	601a      	str	r2, [r3, #0]
 80049fa:	e000      	b.n	80049fe <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049fc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80049fe:	2300      	movs	r3, #0
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3714      	adds	r7, #20
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr
 8004a0c:	40012c00 	.word	0x40012c00
 8004a10:	40014000 	.word	0x40014000
 8004a14:	00010007 	.word	0x00010007

08004a18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b085      	sub	sp, #20
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d001      	beq.n	8004a30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e03b      	b.n	8004aa8 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2202      	movs	r2, #2
 8004a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	68da      	ldr	r2, [r3, #12]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f042 0201 	orr.w	r2, r2, #1
 8004a46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a19      	ldr	r2, [pc, #100]	; (8004ab4 <HAL_TIM_Base_Start_IT+0x9c>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d009      	beq.n	8004a66 <HAL_TIM_Base_Start_IT+0x4e>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a5a:	d004      	beq.n	8004a66 <HAL_TIM_Base_Start_IT+0x4e>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a15      	ldr	r2, [pc, #84]	; (8004ab8 <HAL_TIM_Base_Start_IT+0xa0>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d115      	bne.n	8004a92 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	689a      	ldr	r2, [r3, #8]
 8004a6c:	4b13      	ldr	r3, [pc, #76]	; (8004abc <HAL_TIM_Base_Start_IT+0xa4>)
 8004a6e:	4013      	ands	r3, r2
 8004a70:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2b06      	cmp	r3, #6
 8004a76:	d015      	beq.n	8004aa4 <HAL_TIM_Base_Start_IT+0x8c>
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a7e:	d011      	beq.n	8004aa4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f042 0201 	orr.w	r2, r2, #1
 8004a8e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a90:	e008      	b.n	8004aa4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f042 0201 	orr.w	r2, r2, #1
 8004aa0:	601a      	str	r2, [r3, #0]
 8004aa2:	e000      	b.n	8004aa6 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aa4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004aa6:	2300      	movs	r3, #0
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3714      	adds	r7, #20
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr
 8004ab4:	40012c00 	.word	0x40012c00
 8004ab8:	40014000 	.word	0x40014000
 8004abc:	00010007 	.word	0x00010007

08004ac0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b082      	sub	sp, #8
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d101      	bne.n	8004ad2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e049      	b.n	8004b66 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d106      	bne.n	8004aec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f000 f841 	bl	8004b6e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2202      	movs	r2, #2
 8004af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	3304      	adds	r3, #4
 8004afc:	4619      	mov	r1, r3
 8004afe:	4610      	mov	r0, r2
 8004b00:	f000 fc44 	bl	800538c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b64:	2300      	movs	r3, #0
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3708      	adds	r7, #8
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}

08004b6e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004b6e:	b480      	push	{r7}
 8004b70:	b083      	sub	sp, #12
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004b76:	bf00      	nop
 8004b78:	370c      	adds	r7, #12
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr
	...

08004b84 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d109      	bne.n	8004ba8 <HAL_TIM_PWM_Start+0x24>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	bf14      	ite	ne
 8004ba0:	2301      	movne	r3, #1
 8004ba2:	2300      	moveq	r3, #0
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	e03c      	b.n	8004c22 <HAL_TIM_PWM_Start+0x9e>
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	2b04      	cmp	r3, #4
 8004bac:	d109      	bne.n	8004bc2 <HAL_TIM_PWM_Start+0x3e>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	bf14      	ite	ne
 8004bba:	2301      	movne	r3, #1
 8004bbc:	2300      	moveq	r3, #0
 8004bbe:	b2db      	uxtb	r3, r3
 8004bc0:	e02f      	b.n	8004c22 <HAL_TIM_PWM_Start+0x9e>
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	2b08      	cmp	r3, #8
 8004bc6:	d109      	bne.n	8004bdc <HAL_TIM_PWM_Start+0x58>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004bce:	b2db      	uxtb	r3, r3
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	bf14      	ite	ne
 8004bd4:	2301      	movne	r3, #1
 8004bd6:	2300      	moveq	r3, #0
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	e022      	b.n	8004c22 <HAL_TIM_PWM_Start+0x9e>
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	2b0c      	cmp	r3, #12
 8004be0:	d109      	bne.n	8004bf6 <HAL_TIM_PWM_Start+0x72>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	bf14      	ite	ne
 8004bee:	2301      	movne	r3, #1
 8004bf0:	2300      	moveq	r3, #0
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	e015      	b.n	8004c22 <HAL_TIM_PWM_Start+0x9e>
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	2b10      	cmp	r3, #16
 8004bfa:	d109      	bne.n	8004c10 <HAL_TIM_PWM_Start+0x8c>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	bf14      	ite	ne
 8004c08:	2301      	movne	r3, #1
 8004c0a:	2300      	moveq	r3, #0
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	e008      	b.n	8004c22 <HAL_TIM_PWM_Start+0x9e>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	bf14      	ite	ne
 8004c1c:	2301      	movne	r3, #1
 8004c1e:	2300      	moveq	r3, #0
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d001      	beq.n	8004c2a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e07e      	b.n	8004d28 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d104      	bne.n	8004c3a <HAL_TIM_PWM_Start+0xb6>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2202      	movs	r2, #2
 8004c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c38:	e023      	b.n	8004c82 <HAL_TIM_PWM_Start+0xfe>
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	2b04      	cmp	r3, #4
 8004c3e:	d104      	bne.n	8004c4a <HAL_TIM_PWM_Start+0xc6>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2202      	movs	r2, #2
 8004c44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c48:	e01b      	b.n	8004c82 <HAL_TIM_PWM_Start+0xfe>
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	2b08      	cmp	r3, #8
 8004c4e:	d104      	bne.n	8004c5a <HAL_TIM_PWM_Start+0xd6>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2202      	movs	r2, #2
 8004c54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c58:	e013      	b.n	8004c82 <HAL_TIM_PWM_Start+0xfe>
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	2b0c      	cmp	r3, #12
 8004c5e:	d104      	bne.n	8004c6a <HAL_TIM_PWM_Start+0xe6>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2202      	movs	r2, #2
 8004c64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c68:	e00b      	b.n	8004c82 <HAL_TIM_PWM_Start+0xfe>
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	2b10      	cmp	r3, #16
 8004c6e:	d104      	bne.n	8004c7a <HAL_TIM_PWM_Start+0xf6>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2202      	movs	r2, #2
 8004c74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c78:	e003      	b.n	8004c82 <HAL_TIM_PWM_Start+0xfe>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2202      	movs	r2, #2
 8004c7e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	2201      	movs	r2, #1
 8004c88:	6839      	ldr	r1, [r7, #0]
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f000 fefa 	bl	8005a84 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a26      	ldr	r2, [pc, #152]	; (8004d30 <HAL_TIM_PWM_Start+0x1ac>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d009      	beq.n	8004cae <HAL_TIM_PWM_Start+0x12a>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a25      	ldr	r2, [pc, #148]	; (8004d34 <HAL_TIM_PWM_Start+0x1b0>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d004      	beq.n	8004cae <HAL_TIM_PWM_Start+0x12a>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a23      	ldr	r2, [pc, #140]	; (8004d38 <HAL_TIM_PWM_Start+0x1b4>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d101      	bne.n	8004cb2 <HAL_TIM_PWM_Start+0x12e>
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e000      	b.n	8004cb4 <HAL_TIM_PWM_Start+0x130>
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d007      	beq.n	8004cc8 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004cc6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a18      	ldr	r2, [pc, #96]	; (8004d30 <HAL_TIM_PWM_Start+0x1ac>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d009      	beq.n	8004ce6 <HAL_TIM_PWM_Start+0x162>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cda:	d004      	beq.n	8004ce6 <HAL_TIM_PWM_Start+0x162>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a14      	ldr	r2, [pc, #80]	; (8004d34 <HAL_TIM_PWM_Start+0x1b0>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d115      	bne.n	8004d12 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	689a      	ldr	r2, [r3, #8]
 8004cec:	4b13      	ldr	r3, [pc, #76]	; (8004d3c <HAL_TIM_PWM_Start+0x1b8>)
 8004cee:	4013      	ands	r3, r2
 8004cf0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2b06      	cmp	r3, #6
 8004cf6:	d015      	beq.n	8004d24 <HAL_TIM_PWM_Start+0x1a0>
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cfe:	d011      	beq.n	8004d24 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f042 0201 	orr.w	r2, r2, #1
 8004d0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d10:	e008      	b.n	8004d24 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f042 0201 	orr.w	r2, r2, #1
 8004d20:	601a      	str	r2, [r3, #0]
 8004d22:	e000      	b.n	8004d26 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d24:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004d26:	2300      	movs	r3, #0
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3710      	adds	r7, #16
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}
 8004d30:	40012c00 	.word	0x40012c00
 8004d34:	40014000 	.word	0x40014000
 8004d38:	40014400 	.word	0x40014400
 8004d3c:	00010007 	.word	0x00010007

08004d40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b082      	sub	sp, #8
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	691b      	ldr	r3, [r3, #16]
 8004d4e:	f003 0302 	and.w	r3, r3, #2
 8004d52:	2b02      	cmp	r3, #2
 8004d54:	d122      	bne.n	8004d9c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	f003 0302 	and.w	r3, r3, #2
 8004d60:	2b02      	cmp	r3, #2
 8004d62:	d11b      	bne.n	8004d9c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f06f 0202 	mvn.w	r2, #2
 8004d6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2201      	movs	r2, #1
 8004d72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	699b      	ldr	r3, [r3, #24]
 8004d7a:	f003 0303 	and.w	r3, r3, #3
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d003      	beq.n	8004d8a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f000 fae3 	bl	800534e <HAL_TIM_IC_CaptureCallback>
 8004d88:	e005      	b.n	8004d96 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f000 fad5 	bl	800533a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f000 fae6 	bl	8005362 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	f003 0304 	and.w	r3, r3, #4
 8004da6:	2b04      	cmp	r3, #4
 8004da8:	d122      	bne.n	8004df0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	f003 0304 	and.w	r3, r3, #4
 8004db4:	2b04      	cmp	r3, #4
 8004db6:	d11b      	bne.n	8004df0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f06f 0204 	mvn.w	r2, #4
 8004dc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2202      	movs	r2, #2
 8004dc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	699b      	ldr	r3, [r3, #24]
 8004dce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d003      	beq.n	8004dde <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f000 fab9 	bl	800534e <HAL_TIM_IC_CaptureCallback>
 8004ddc:	e005      	b.n	8004dea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f000 faab 	bl	800533a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f000 fabc 	bl	8005362 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2200      	movs	r2, #0
 8004dee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	691b      	ldr	r3, [r3, #16]
 8004df6:	f003 0308 	and.w	r3, r3, #8
 8004dfa:	2b08      	cmp	r3, #8
 8004dfc:	d122      	bne.n	8004e44 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	68db      	ldr	r3, [r3, #12]
 8004e04:	f003 0308 	and.w	r3, r3, #8
 8004e08:	2b08      	cmp	r3, #8
 8004e0a:	d11b      	bne.n	8004e44 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f06f 0208 	mvn.w	r2, #8
 8004e14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2204      	movs	r2, #4
 8004e1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	69db      	ldr	r3, [r3, #28]
 8004e22:	f003 0303 	and.w	r3, r3, #3
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d003      	beq.n	8004e32 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f000 fa8f 	bl	800534e <HAL_TIM_IC_CaptureCallback>
 8004e30:	e005      	b.n	8004e3e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f000 fa81 	bl	800533a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f000 fa92 	bl	8005362 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	691b      	ldr	r3, [r3, #16]
 8004e4a:	f003 0310 	and.w	r3, r3, #16
 8004e4e:	2b10      	cmp	r3, #16
 8004e50:	d122      	bne.n	8004e98 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	f003 0310 	and.w	r3, r3, #16
 8004e5c:	2b10      	cmp	r3, #16
 8004e5e:	d11b      	bne.n	8004e98 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f06f 0210 	mvn.w	r2, #16
 8004e68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2208      	movs	r2, #8
 8004e6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	69db      	ldr	r3, [r3, #28]
 8004e76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d003      	beq.n	8004e86 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 fa65 	bl	800534e <HAL_TIM_IC_CaptureCallback>
 8004e84:	e005      	b.n	8004e92 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f000 fa57 	bl	800533a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f000 fa68 	bl	8005362 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	691b      	ldr	r3, [r3, #16]
 8004e9e:	f003 0301 	and.w	r3, r3, #1
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d10e      	bne.n	8004ec4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	f003 0301 	and.w	r3, r3, #1
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d107      	bne.n	8004ec4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f06f 0201 	mvn.w	r2, #1
 8004ebc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f7fc fe52 	bl	8001b68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	691b      	ldr	r3, [r3, #16]
 8004eca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ece:	2b80      	cmp	r3, #128	; 0x80
 8004ed0:	d10e      	bne.n	8004ef0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004edc:	2b80      	cmp	r3, #128	; 0x80
 8004ede:	d107      	bne.n	8004ef0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ee8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f000 fed8 	bl	8005ca0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	691b      	ldr	r3, [r3, #16]
 8004ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004efa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004efe:	d10e      	bne.n	8004f1e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f0a:	2b80      	cmp	r3, #128	; 0x80
 8004f0c:	d107      	bne.n	8004f1e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004f16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f000 fecb 	bl	8005cb4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	691b      	ldr	r3, [r3, #16]
 8004f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f28:	2b40      	cmp	r3, #64	; 0x40
 8004f2a:	d10e      	bne.n	8004f4a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	68db      	ldr	r3, [r3, #12]
 8004f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f36:	2b40      	cmp	r3, #64	; 0x40
 8004f38:	d107      	bne.n	8004f4a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f000 fa16 	bl	8005376 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	691b      	ldr	r3, [r3, #16]
 8004f50:	f003 0320 	and.w	r3, r3, #32
 8004f54:	2b20      	cmp	r3, #32
 8004f56:	d10e      	bne.n	8004f76 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	f003 0320 	and.w	r3, r3, #32
 8004f62:	2b20      	cmp	r3, #32
 8004f64:	d107      	bne.n	8004f76 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f06f 0220 	mvn.w	r2, #32
 8004f6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f000 fe8b 	bl	8005c8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f76:	bf00      	nop
 8004f78:	3708      	adds	r7, #8
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
	...

08004f80 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b086      	sub	sp, #24
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	60f8      	str	r0, [r7, #12]
 8004f88:	60b9      	str	r1, [r7, #8]
 8004f8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d101      	bne.n	8004f9e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004f9a:	2302      	movs	r3, #2
 8004f9c:	e0ff      	b.n	800519e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2b14      	cmp	r3, #20
 8004faa:	f200 80f0 	bhi.w	800518e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004fae:	a201      	add	r2, pc, #4	; (adr r2, 8004fb4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fb4:	08005009 	.word	0x08005009
 8004fb8:	0800518f 	.word	0x0800518f
 8004fbc:	0800518f 	.word	0x0800518f
 8004fc0:	0800518f 	.word	0x0800518f
 8004fc4:	08005049 	.word	0x08005049
 8004fc8:	0800518f 	.word	0x0800518f
 8004fcc:	0800518f 	.word	0x0800518f
 8004fd0:	0800518f 	.word	0x0800518f
 8004fd4:	0800508b 	.word	0x0800508b
 8004fd8:	0800518f 	.word	0x0800518f
 8004fdc:	0800518f 	.word	0x0800518f
 8004fe0:	0800518f 	.word	0x0800518f
 8004fe4:	080050cb 	.word	0x080050cb
 8004fe8:	0800518f 	.word	0x0800518f
 8004fec:	0800518f 	.word	0x0800518f
 8004ff0:	0800518f 	.word	0x0800518f
 8004ff4:	0800510d 	.word	0x0800510d
 8004ff8:	0800518f 	.word	0x0800518f
 8004ffc:	0800518f 	.word	0x0800518f
 8005000:	0800518f 	.word	0x0800518f
 8005004:	0800514d 	.word	0x0800514d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	68b9      	ldr	r1, [r7, #8]
 800500e:	4618      	mov	r0, r3
 8005010:	f000 fa20 	bl	8005454 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	699a      	ldr	r2, [r3, #24]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f042 0208 	orr.w	r2, r2, #8
 8005022:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	699a      	ldr	r2, [r3, #24]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f022 0204 	bic.w	r2, r2, #4
 8005032:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	6999      	ldr	r1, [r3, #24]
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	691a      	ldr	r2, [r3, #16]
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	430a      	orrs	r2, r1
 8005044:	619a      	str	r2, [r3, #24]
      break;
 8005046:	e0a5      	b.n	8005194 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	68b9      	ldr	r1, [r7, #8]
 800504e:	4618      	mov	r0, r3
 8005050:	f000 fa7c 	bl	800554c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	699a      	ldr	r2, [r3, #24]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005062:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	699a      	ldr	r2, [r3, #24]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005072:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	6999      	ldr	r1, [r3, #24]
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	691b      	ldr	r3, [r3, #16]
 800507e:	021a      	lsls	r2, r3, #8
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	430a      	orrs	r2, r1
 8005086:	619a      	str	r2, [r3, #24]
      break;
 8005088:	e084      	b.n	8005194 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	68b9      	ldr	r1, [r7, #8]
 8005090:	4618      	mov	r0, r3
 8005092:	f000 fad5 	bl	8005640 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	69da      	ldr	r2, [r3, #28]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f042 0208 	orr.w	r2, r2, #8
 80050a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	69da      	ldr	r2, [r3, #28]
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f022 0204 	bic.w	r2, r2, #4
 80050b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	69d9      	ldr	r1, [r3, #28]
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	691a      	ldr	r2, [r3, #16]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	430a      	orrs	r2, r1
 80050c6:	61da      	str	r2, [r3, #28]
      break;
 80050c8:	e064      	b.n	8005194 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	68b9      	ldr	r1, [r7, #8]
 80050d0:	4618      	mov	r0, r3
 80050d2:	f000 fb2d 	bl	8005730 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	69da      	ldr	r2, [r3, #28]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	69da      	ldr	r2, [r3, #28]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	69d9      	ldr	r1, [r3, #28]
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	691b      	ldr	r3, [r3, #16]
 8005100:	021a      	lsls	r2, r3, #8
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	430a      	orrs	r2, r1
 8005108:	61da      	str	r2, [r3, #28]
      break;
 800510a:	e043      	b.n	8005194 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	68b9      	ldr	r1, [r7, #8]
 8005112:	4618      	mov	r0, r3
 8005114:	f000 fb6a 	bl	80057ec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f042 0208 	orr.w	r2, r2, #8
 8005126:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f022 0204 	bic.w	r2, r2, #4
 8005136:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	691a      	ldr	r2, [r3, #16]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	430a      	orrs	r2, r1
 8005148:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800514a:	e023      	b.n	8005194 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	68b9      	ldr	r1, [r7, #8]
 8005152:	4618      	mov	r0, r3
 8005154:	f000 fba2 	bl	800589c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005166:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005176:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	691b      	ldr	r3, [r3, #16]
 8005182:	021a      	lsls	r2, r3, #8
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	430a      	orrs	r2, r1
 800518a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800518c:	e002      	b.n	8005194 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	75fb      	strb	r3, [r7, #23]
      break;
 8005192:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2200      	movs	r2, #0
 8005198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800519c:	7dfb      	ldrb	r3, [r7, #23]
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3718      	adds	r7, #24
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
 80051a6:	bf00      	nop

080051a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b084      	sub	sp, #16
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051b2:	2300      	movs	r3, #0
 80051b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d101      	bne.n	80051c4 <HAL_TIM_ConfigClockSource+0x1c>
 80051c0:	2302      	movs	r3, #2
 80051c2:	e0b6      	b.n	8005332 <HAL_TIM_ConfigClockSource+0x18a>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2201      	movs	r2, #1
 80051c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2202      	movs	r2, #2
 80051d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80051e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	68ba      	ldr	r2, [r7, #8]
 80051f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005200:	d03e      	beq.n	8005280 <HAL_TIM_ConfigClockSource+0xd8>
 8005202:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005206:	f200 8087 	bhi.w	8005318 <HAL_TIM_ConfigClockSource+0x170>
 800520a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800520e:	f000 8086 	beq.w	800531e <HAL_TIM_ConfigClockSource+0x176>
 8005212:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005216:	d87f      	bhi.n	8005318 <HAL_TIM_ConfigClockSource+0x170>
 8005218:	2b70      	cmp	r3, #112	; 0x70
 800521a:	d01a      	beq.n	8005252 <HAL_TIM_ConfigClockSource+0xaa>
 800521c:	2b70      	cmp	r3, #112	; 0x70
 800521e:	d87b      	bhi.n	8005318 <HAL_TIM_ConfigClockSource+0x170>
 8005220:	2b60      	cmp	r3, #96	; 0x60
 8005222:	d050      	beq.n	80052c6 <HAL_TIM_ConfigClockSource+0x11e>
 8005224:	2b60      	cmp	r3, #96	; 0x60
 8005226:	d877      	bhi.n	8005318 <HAL_TIM_ConfigClockSource+0x170>
 8005228:	2b50      	cmp	r3, #80	; 0x50
 800522a:	d03c      	beq.n	80052a6 <HAL_TIM_ConfigClockSource+0xfe>
 800522c:	2b50      	cmp	r3, #80	; 0x50
 800522e:	d873      	bhi.n	8005318 <HAL_TIM_ConfigClockSource+0x170>
 8005230:	2b40      	cmp	r3, #64	; 0x40
 8005232:	d058      	beq.n	80052e6 <HAL_TIM_ConfigClockSource+0x13e>
 8005234:	2b40      	cmp	r3, #64	; 0x40
 8005236:	d86f      	bhi.n	8005318 <HAL_TIM_ConfigClockSource+0x170>
 8005238:	2b30      	cmp	r3, #48	; 0x30
 800523a:	d064      	beq.n	8005306 <HAL_TIM_ConfigClockSource+0x15e>
 800523c:	2b30      	cmp	r3, #48	; 0x30
 800523e:	d86b      	bhi.n	8005318 <HAL_TIM_ConfigClockSource+0x170>
 8005240:	2b20      	cmp	r3, #32
 8005242:	d060      	beq.n	8005306 <HAL_TIM_ConfigClockSource+0x15e>
 8005244:	2b20      	cmp	r3, #32
 8005246:	d867      	bhi.n	8005318 <HAL_TIM_ConfigClockSource+0x170>
 8005248:	2b00      	cmp	r3, #0
 800524a:	d05c      	beq.n	8005306 <HAL_TIM_ConfigClockSource+0x15e>
 800524c:	2b10      	cmp	r3, #16
 800524e:	d05a      	beq.n	8005306 <HAL_TIM_ConfigClockSource+0x15e>
 8005250:	e062      	b.n	8005318 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6818      	ldr	r0, [r3, #0]
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	6899      	ldr	r1, [r3, #8]
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	685a      	ldr	r2, [r3, #4]
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	f000 fbef 	bl	8005a44 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005274:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	68ba      	ldr	r2, [r7, #8]
 800527c:	609a      	str	r2, [r3, #8]
      break;
 800527e:	e04f      	b.n	8005320 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6818      	ldr	r0, [r3, #0]
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	6899      	ldr	r1, [r3, #8]
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	685a      	ldr	r2, [r3, #4]
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	f000 fbd8 	bl	8005a44 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	689a      	ldr	r2, [r3, #8]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052a2:	609a      	str	r2, [r3, #8]
      break;
 80052a4:	e03c      	b.n	8005320 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6818      	ldr	r0, [r3, #0]
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	6859      	ldr	r1, [r3, #4]
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	68db      	ldr	r3, [r3, #12]
 80052b2:	461a      	mov	r2, r3
 80052b4:	f000 fb4c 	bl	8005950 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	2150      	movs	r1, #80	; 0x50
 80052be:	4618      	mov	r0, r3
 80052c0:	f000 fba5 	bl	8005a0e <TIM_ITRx_SetConfig>
      break;
 80052c4:	e02c      	b.n	8005320 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6818      	ldr	r0, [r3, #0]
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	6859      	ldr	r1, [r3, #4]
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	68db      	ldr	r3, [r3, #12]
 80052d2:	461a      	mov	r2, r3
 80052d4:	f000 fb6b 	bl	80059ae <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	2160      	movs	r1, #96	; 0x60
 80052de:	4618      	mov	r0, r3
 80052e0:	f000 fb95 	bl	8005a0e <TIM_ITRx_SetConfig>
      break;
 80052e4:	e01c      	b.n	8005320 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6818      	ldr	r0, [r3, #0]
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	6859      	ldr	r1, [r3, #4]
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	461a      	mov	r2, r3
 80052f4:	f000 fb2c 	bl	8005950 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	2140      	movs	r1, #64	; 0x40
 80052fe:	4618      	mov	r0, r3
 8005300:	f000 fb85 	bl	8005a0e <TIM_ITRx_SetConfig>
      break;
 8005304:	e00c      	b.n	8005320 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4619      	mov	r1, r3
 8005310:	4610      	mov	r0, r2
 8005312:	f000 fb7c 	bl	8005a0e <TIM_ITRx_SetConfig>
      break;
 8005316:	e003      	b.n	8005320 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	73fb      	strb	r3, [r7, #15]
      break;
 800531c:	e000      	b.n	8005320 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800531e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2201      	movs	r2, #1
 8005324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2200      	movs	r2, #0
 800532c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005330:	7bfb      	ldrb	r3, [r7, #15]
}
 8005332:	4618      	mov	r0, r3
 8005334:	3710      	adds	r7, #16
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}

0800533a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800533a:	b480      	push	{r7}
 800533c:	b083      	sub	sp, #12
 800533e:	af00      	add	r7, sp, #0
 8005340:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005342:	bf00      	nop
 8005344:	370c      	adds	r7, #12
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr

0800534e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800534e:	b480      	push	{r7}
 8005350:	b083      	sub	sp, #12
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005356:	bf00      	nop
 8005358:	370c      	adds	r7, #12
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr

08005362 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005362:	b480      	push	{r7}
 8005364:	b083      	sub	sp, #12
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800536a:	bf00      	nop
 800536c:	370c      	adds	r7, #12
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr

08005376 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005376:	b480      	push	{r7}
 8005378:	b083      	sub	sp, #12
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800537e:	bf00      	nop
 8005380:	370c      	adds	r7, #12
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr
	...

0800538c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800538c:	b480      	push	{r7}
 800538e:	b085      	sub	sp, #20
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4a2a      	ldr	r2, [pc, #168]	; (8005448 <TIM_Base_SetConfig+0xbc>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d003      	beq.n	80053ac <TIM_Base_SetConfig+0x20>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053aa:	d108      	bne.n	80053be <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	68fa      	ldr	r2, [r7, #12]
 80053ba:	4313      	orrs	r3, r2
 80053bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a21      	ldr	r2, [pc, #132]	; (8005448 <TIM_Base_SetConfig+0xbc>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d00b      	beq.n	80053de <TIM_Base_SetConfig+0x52>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053cc:	d007      	beq.n	80053de <TIM_Base_SetConfig+0x52>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a1e      	ldr	r2, [pc, #120]	; (800544c <TIM_Base_SetConfig+0xc0>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d003      	beq.n	80053de <TIM_Base_SetConfig+0x52>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a1d      	ldr	r2, [pc, #116]	; (8005450 <TIM_Base_SetConfig+0xc4>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d108      	bne.n	80053f0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	68fa      	ldr	r2, [r7, #12]
 80053ec:	4313      	orrs	r3, r2
 80053ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	695b      	ldr	r3, [r3, #20]
 80053fa:	4313      	orrs	r3, r2
 80053fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	68fa      	ldr	r2, [r7, #12]
 8005402:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	689a      	ldr	r2, [r3, #8]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	4a0c      	ldr	r2, [pc, #48]	; (8005448 <TIM_Base_SetConfig+0xbc>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d007      	beq.n	800542c <TIM_Base_SetConfig+0xa0>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	4a0b      	ldr	r2, [pc, #44]	; (800544c <TIM_Base_SetConfig+0xc0>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d003      	beq.n	800542c <TIM_Base_SetConfig+0xa0>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	4a0a      	ldr	r2, [pc, #40]	; (8005450 <TIM_Base_SetConfig+0xc4>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d103      	bne.n	8005434 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	691a      	ldr	r2, [r3, #16]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2201      	movs	r2, #1
 8005438:	615a      	str	r2, [r3, #20]
}
 800543a:	bf00      	nop
 800543c:	3714      	adds	r7, #20
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr
 8005446:	bf00      	nop
 8005448:	40012c00 	.word	0x40012c00
 800544c:	40014000 	.word	0x40014000
 8005450:	40014400 	.word	0x40014400

08005454 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005454:	b480      	push	{r7}
 8005456:	b087      	sub	sp, #28
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a1b      	ldr	r3, [r3, #32]
 8005462:	f023 0201 	bic.w	r2, r3, #1
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a1b      	ldr	r3, [r3, #32]
 800546e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	699b      	ldr	r3, [r3, #24]
 800547a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005482:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005486:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f023 0303 	bic.w	r3, r3, #3
 800548e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	68fa      	ldr	r2, [r7, #12]
 8005496:	4313      	orrs	r3, r2
 8005498:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	f023 0302 	bic.w	r3, r3, #2
 80054a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	697a      	ldr	r2, [r7, #20]
 80054a8:	4313      	orrs	r3, r2
 80054aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4a24      	ldr	r2, [pc, #144]	; (8005540 <TIM_OC1_SetConfig+0xec>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d007      	beq.n	80054c4 <TIM_OC1_SetConfig+0x70>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	4a23      	ldr	r2, [pc, #140]	; (8005544 <TIM_OC1_SetConfig+0xf0>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d003      	beq.n	80054c4 <TIM_OC1_SetConfig+0x70>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	4a22      	ldr	r2, [pc, #136]	; (8005548 <TIM_OC1_SetConfig+0xf4>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d10c      	bne.n	80054de <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	f023 0308 	bic.w	r3, r3, #8
 80054ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	68db      	ldr	r3, [r3, #12]
 80054d0:	697a      	ldr	r2, [r7, #20]
 80054d2:	4313      	orrs	r3, r2
 80054d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	f023 0304 	bic.w	r3, r3, #4
 80054dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4a17      	ldr	r2, [pc, #92]	; (8005540 <TIM_OC1_SetConfig+0xec>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d007      	beq.n	80054f6 <TIM_OC1_SetConfig+0xa2>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	4a16      	ldr	r2, [pc, #88]	; (8005544 <TIM_OC1_SetConfig+0xf0>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d003      	beq.n	80054f6 <TIM_OC1_SetConfig+0xa2>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4a15      	ldr	r2, [pc, #84]	; (8005548 <TIM_OC1_SetConfig+0xf4>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d111      	bne.n	800551a <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005504:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	695b      	ldr	r3, [r3, #20]
 800550a:	693a      	ldr	r2, [r7, #16]
 800550c:	4313      	orrs	r3, r2
 800550e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	699b      	ldr	r3, [r3, #24]
 8005514:	693a      	ldr	r2, [r7, #16]
 8005516:	4313      	orrs	r3, r2
 8005518:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	693a      	ldr	r2, [r7, #16]
 800551e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	68fa      	ldr	r2, [r7, #12]
 8005524:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	685a      	ldr	r2, [r3, #4]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	697a      	ldr	r2, [r7, #20]
 8005532:	621a      	str	r2, [r3, #32]
}
 8005534:	bf00      	nop
 8005536:	371c      	adds	r7, #28
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr
 8005540:	40012c00 	.word	0x40012c00
 8005544:	40014000 	.word	0x40014000
 8005548:	40014400 	.word	0x40014400

0800554c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800554c:	b480      	push	{r7}
 800554e:	b087      	sub	sp, #28
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6a1b      	ldr	r3, [r3, #32]
 800555a:	f023 0210 	bic.w	r2, r3, #16
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6a1b      	ldr	r3, [r3, #32]
 8005566:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	699b      	ldr	r3, [r3, #24]
 8005572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800557a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800557e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005586:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	021b      	lsls	r3, r3, #8
 800558e:	68fa      	ldr	r2, [r7, #12]
 8005590:	4313      	orrs	r3, r2
 8005592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	f023 0320 	bic.w	r3, r3, #32
 800559a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	011b      	lsls	r3, r3, #4
 80055a2:	697a      	ldr	r2, [r7, #20]
 80055a4:	4313      	orrs	r3, r2
 80055a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	4a22      	ldr	r2, [pc, #136]	; (8005634 <TIM_OC2_SetConfig+0xe8>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d10d      	bne.n	80055cc <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	011b      	lsls	r3, r3, #4
 80055be:	697a      	ldr	r2, [r7, #20]
 80055c0:	4313      	orrs	r3, r2
 80055c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	4a19      	ldr	r2, [pc, #100]	; (8005634 <TIM_OC2_SetConfig+0xe8>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d007      	beq.n	80055e4 <TIM_OC2_SetConfig+0x98>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	4a18      	ldr	r2, [pc, #96]	; (8005638 <TIM_OC2_SetConfig+0xec>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d003      	beq.n	80055e4 <TIM_OC2_SetConfig+0x98>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	4a17      	ldr	r2, [pc, #92]	; (800563c <TIM_OC2_SetConfig+0xf0>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d113      	bne.n	800560c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80055ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	695b      	ldr	r3, [r3, #20]
 80055f8:	009b      	lsls	r3, r3, #2
 80055fa:	693a      	ldr	r2, [r7, #16]
 80055fc:	4313      	orrs	r3, r2
 80055fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	699b      	ldr	r3, [r3, #24]
 8005604:	009b      	lsls	r3, r3, #2
 8005606:	693a      	ldr	r2, [r7, #16]
 8005608:	4313      	orrs	r3, r2
 800560a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	693a      	ldr	r2, [r7, #16]
 8005610:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	68fa      	ldr	r2, [r7, #12]
 8005616:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	685a      	ldr	r2, [r3, #4]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	697a      	ldr	r2, [r7, #20]
 8005624:	621a      	str	r2, [r3, #32]
}
 8005626:	bf00      	nop
 8005628:	371c      	adds	r7, #28
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr
 8005632:	bf00      	nop
 8005634:	40012c00 	.word	0x40012c00
 8005638:	40014000 	.word	0x40014000
 800563c:	40014400 	.word	0x40014400

08005640 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005640:	b480      	push	{r7}
 8005642:	b087      	sub	sp, #28
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6a1b      	ldr	r3, [r3, #32]
 800564e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6a1b      	ldr	r3, [r3, #32]
 800565a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	69db      	ldr	r3, [r3, #28]
 8005666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800566e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005672:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f023 0303 	bic.w	r3, r3, #3
 800567a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	68fa      	ldr	r2, [r7, #12]
 8005682:	4313      	orrs	r3, r2
 8005684:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800568c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	021b      	lsls	r3, r3, #8
 8005694:	697a      	ldr	r2, [r7, #20]
 8005696:	4313      	orrs	r3, r2
 8005698:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4a21      	ldr	r2, [pc, #132]	; (8005724 <TIM_OC3_SetConfig+0xe4>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d10d      	bne.n	80056be <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80056a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	68db      	ldr	r3, [r3, #12]
 80056ae:	021b      	lsls	r3, r3, #8
 80056b0:	697a      	ldr	r2, [r7, #20]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80056bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	4a18      	ldr	r2, [pc, #96]	; (8005724 <TIM_OC3_SetConfig+0xe4>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d007      	beq.n	80056d6 <TIM_OC3_SetConfig+0x96>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4a17      	ldr	r2, [pc, #92]	; (8005728 <TIM_OC3_SetConfig+0xe8>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d003      	beq.n	80056d6 <TIM_OC3_SetConfig+0x96>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a16      	ldr	r2, [pc, #88]	; (800572c <TIM_OC3_SetConfig+0xec>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d113      	bne.n	80056fe <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80056dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80056e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	695b      	ldr	r3, [r3, #20]
 80056ea:	011b      	lsls	r3, r3, #4
 80056ec:	693a      	ldr	r2, [r7, #16]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	699b      	ldr	r3, [r3, #24]
 80056f6:	011b      	lsls	r3, r3, #4
 80056f8:	693a      	ldr	r2, [r7, #16]
 80056fa:	4313      	orrs	r3, r2
 80056fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	693a      	ldr	r2, [r7, #16]
 8005702:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	68fa      	ldr	r2, [r7, #12]
 8005708:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	685a      	ldr	r2, [r3, #4]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	697a      	ldr	r2, [r7, #20]
 8005716:	621a      	str	r2, [r3, #32]
}
 8005718:	bf00      	nop
 800571a:	371c      	adds	r7, #28
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr
 8005724:	40012c00 	.word	0x40012c00
 8005728:	40014000 	.word	0x40014000
 800572c:	40014400 	.word	0x40014400

08005730 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005730:	b480      	push	{r7}
 8005732:	b087      	sub	sp, #28
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6a1b      	ldr	r3, [r3, #32]
 800573e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6a1b      	ldr	r3, [r3, #32]
 800574a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	69db      	ldr	r3, [r3, #28]
 8005756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800575e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005762:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800576a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	021b      	lsls	r3, r3, #8
 8005772:	68fa      	ldr	r2, [r7, #12]
 8005774:	4313      	orrs	r3, r2
 8005776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800577e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	031b      	lsls	r3, r3, #12
 8005786:	693a      	ldr	r2, [r7, #16]
 8005788:	4313      	orrs	r3, r2
 800578a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	4a14      	ldr	r2, [pc, #80]	; (80057e0 <TIM_OC4_SetConfig+0xb0>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d007      	beq.n	80057a4 <TIM_OC4_SetConfig+0x74>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	4a13      	ldr	r2, [pc, #76]	; (80057e4 <TIM_OC4_SetConfig+0xb4>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d003      	beq.n	80057a4 <TIM_OC4_SetConfig+0x74>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	4a12      	ldr	r2, [pc, #72]	; (80057e8 <TIM_OC4_SetConfig+0xb8>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d109      	bne.n	80057b8 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	695b      	ldr	r3, [r3, #20]
 80057b0:	019b      	lsls	r3, r3, #6
 80057b2:	697a      	ldr	r2, [r7, #20]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	697a      	ldr	r2, [r7, #20]
 80057bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	68fa      	ldr	r2, [r7, #12]
 80057c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	685a      	ldr	r2, [r3, #4]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	693a      	ldr	r2, [r7, #16]
 80057d0:	621a      	str	r2, [r3, #32]
}
 80057d2:	bf00      	nop
 80057d4:	371c      	adds	r7, #28
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr
 80057de:	bf00      	nop
 80057e0:	40012c00 	.word	0x40012c00
 80057e4:	40014000 	.word	0x40014000
 80057e8:	40014400 	.word	0x40014400

080057ec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b087      	sub	sp, #28
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6a1b      	ldr	r3, [r3, #32]
 80057fa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6a1b      	ldr	r3, [r3, #32]
 8005806:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800581a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800581e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	68fa      	ldr	r2, [r7, #12]
 8005826:	4313      	orrs	r3, r2
 8005828:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005830:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	041b      	lsls	r3, r3, #16
 8005838:	693a      	ldr	r2, [r7, #16]
 800583a:	4313      	orrs	r3, r2
 800583c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	4a13      	ldr	r2, [pc, #76]	; (8005890 <TIM_OC5_SetConfig+0xa4>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d007      	beq.n	8005856 <TIM_OC5_SetConfig+0x6a>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4a12      	ldr	r2, [pc, #72]	; (8005894 <TIM_OC5_SetConfig+0xa8>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d003      	beq.n	8005856 <TIM_OC5_SetConfig+0x6a>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4a11      	ldr	r2, [pc, #68]	; (8005898 <TIM_OC5_SetConfig+0xac>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d109      	bne.n	800586a <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800585c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	695b      	ldr	r3, [r3, #20]
 8005862:	021b      	lsls	r3, r3, #8
 8005864:	697a      	ldr	r2, [r7, #20]
 8005866:	4313      	orrs	r3, r2
 8005868:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	697a      	ldr	r2, [r7, #20]
 800586e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	68fa      	ldr	r2, [r7, #12]
 8005874:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	685a      	ldr	r2, [r3, #4]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	693a      	ldr	r2, [r7, #16]
 8005882:	621a      	str	r2, [r3, #32]
}
 8005884:	bf00      	nop
 8005886:	371c      	adds	r7, #28
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr
 8005890:	40012c00 	.word	0x40012c00
 8005894:	40014000 	.word	0x40014000
 8005898:	40014400 	.word	0x40014400

0800589c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800589c:	b480      	push	{r7}
 800589e:	b087      	sub	sp, #28
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
 80058a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6a1b      	ldr	r3, [r3, #32]
 80058aa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6a1b      	ldr	r3, [r3, #32]
 80058b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80058ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	021b      	lsls	r3, r3, #8
 80058d6:	68fa      	ldr	r2, [r7, #12]
 80058d8:	4313      	orrs	r3, r2
 80058da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80058e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	051b      	lsls	r3, r3, #20
 80058ea:	693a      	ldr	r2, [r7, #16]
 80058ec:	4313      	orrs	r3, r2
 80058ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4a14      	ldr	r2, [pc, #80]	; (8005944 <TIM_OC6_SetConfig+0xa8>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d007      	beq.n	8005908 <TIM_OC6_SetConfig+0x6c>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	4a13      	ldr	r2, [pc, #76]	; (8005948 <TIM_OC6_SetConfig+0xac>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d003      	beq.n	8005908 <TIM_OC6_SetConfig+0x6c>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	4a12      	ldr	r2, [pc, #72]	; (800594c <TIM_OC6_SetConfig+0xb0>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d109      	bne.n	800591c <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800590e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	695b      	ldr	r3, [r3, #20]
 8005914:	029b      	lsls	r3, r3, #10
 8005916:	697a      	ldr	r2, [r7, #20]
 8005918:	4313      	orrs	r3, r2
 800591a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	697a      	ldr	r2, [r7, #20]
 8005920:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	68fa      	ldr	r2, [r7, #12]
 8005926:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	685a      	ldr	r2, [r3, #4]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	693a      	ldr	r2, [r7, #16]
 8005934:	621a      	str	r2, [r3, #32]
}
 8005936:	bf00      	nop
 8005938:	371c      	adds	r7, #28
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr
 8005942:	bf00      	nop
 8005944:	40012c00 	.word	0x40012c00
 8005948:	40014000 	.word	0x40014000
 800594c:	40014400 	.word	0x40014400

08005950 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005950:	b480      	push	{r7}
 8005952:	b087      	sub	sp, #28
 8005954:	af00      	add	r7, sp, #0
 8005956:	60f8      	str	r0, [r7, #12]
 8005958:	60b9      	str	r1, [r7, #8]
 800595a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	6a1b      	ldr	r3, [r3, #32]
 8005960:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	6a1b      	ldr	r3, [r3, #32]
 8005966:	f023 0201 	bic.w	r2, r3, #1
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	699b      	ldr	r3, [r3, #24]
 8005972:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800597a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	011b      	lsls	r3, r3, #4
 8005980:	693a      	ldr	r2, [r7, #16]
 8005982:	4313      	orrs	r3, r2
 8005984:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	f023 030a 	bic.w	r3, r3, #10
 800598c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800598e:	697a      	ldr	r2, [r7, #20]
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	4313      	orrs	r3, r2
 8005994:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	693a      	ldr	r2, [r7, #16]
 800599a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	697a      	ldr	r2, [r7, #20]
 80059a0:	621a      	str	r2, [r3, #32]
}
 80059a2:	bf00      	nop
 80059a4:	371c      	adds	r7, #28
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr

080059ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059ae:	b480      	push	{r7}
 80059b0:	b087      	sub	sp, #28
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	60f8      	str	r0, [r7, #12]
 80059b6:	60b9      	str	r1, [r7, #8]
 80059b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	6a1b      	ldr	r3, [r3, #32]
 80059be:	f023 0210 	bic.w	r2, r3, #16
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	699b      	ldr	r3, [r3, #24]
 80059ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6a1b      	ldr	r3, [r3, #32]
 80059d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80059d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	031b      	lsls	r3, r3, #12
 80059de:	697a      	ldr	r2, [r7, #20]
 80059e0:	4313      	orrs	r3, r2
 80059e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80059ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	011b      	lsls	r3, r3, #4
 80059f0:	693a      	ldr	r2, [r7, #16]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	697a      	ldr	r2, [r7, #20]
 80059fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	693a      	ldr	r2, [r7, #16]
 8005a00:	621a      	str	r2, [r3, #32]
}
 8005a02:	bf00      	nop
 8005a04:	371c      	adds	r7, #28
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr

08005a0e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a0e:	b480      	push	{r7}
 8005a10:	b085      	sub	sp, #20
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	6078      	str	r0, [r7, #4]
 8005a16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a26:	683a      	ldr	r2, [r7, #0]
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	f043 0307 	orr.w	r3, r3, #7
 8005a30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	68fa      	ldr	r2, [r7, #12]
 8005a36:	609a      	str	r2, [r3, #8]
}
 8005a38:	bf00      	nop
 8005a3a:	3714      	adds	r7, #20
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr

08005a44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b087      	sub	sp, #28
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	60f8      	str	r0, [r7, #12]
 8005a4c:	60b9      	str	r1, [r7, #8]
 8005a4e:	607a      	str	r2, [r7, #4]
 8005a50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	021a      	lsls	r2, r3, #8
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	431a      	orrs	r2, r3
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	697a      	ldr	r2, [r7, #20]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	697a      	ldr	r2, [r7, #20]
 8005a76:	609a      	str	r2, [r3, #8]
}
 8005a78:	bf00      	nop
 8005a7a:	371c      	adds	r7, #28
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr

08005a84 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b087      	sub	sp, #28
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	60f8      	str	r0, [r7, #12]
 8005a8c:	60b9      	str	r1, [r7, #8]
 8005a8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	f003 031f 	and.w	r3, r3, #31
 8005a96:	2201      	movs	r2, #1
 8005a98:	fa02 f303 	lsl.w	r3, r2, r3
 8005a9c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	6a1a      	ldr	r2, [r3, #32]
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	43db      	mvns	r3, r3
 8005aa6:	401a      	ands	r2, r3
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	6a1a      	ldr	r2, [r3, #32]
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	f003 031f 	and.w	r3, r3, #31
 8005ab6:	6879      	ldr	r1, [r7, #4]
 8005ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8005abc:	431a      	orrs	r2, r3
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	621a      	str	r2, [r3, #32]
}
 8005ac2:	bf00      	nop
 8005ac4:	371c      	adds	r7, #28
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr
	...

08005ad0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b085      	sub	sp, #20
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d101      	bne.n	8005ae8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ae4:	2302      	movs	r3, #2
 8005ae6:	e04f      	b.n	8005b88 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2201      	movs	r2, #1
 8005aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2202      	movs	r2, #2
 8005af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a21      	ldr	r2, [pc, #132]	; (8005b94 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d108      	bne.n	8005b24 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005b18:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	68fa      	ldr	r2, [r7, #12]
 8005b20:	4313      	orrs	r3, r2
 8005b22:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b2a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	68fa      	ldr	r2, [r7, #12]
 8005b32:	4313      	orrs	r3, r2
 8005b34:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	68fa      	ldr	r2, [r7, #12]
 8005b3c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a14      	ldr	r2, [pc, #80]	; (8005b94 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d009      	beq.n	8005b5c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b50:	d004      	beq.n	8005b5c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a10      	ldr	r2, [pc, #64]	; (8005b98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d10c      	bne.n	8005b76 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b62:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	68ba      	ldr	r2, [r7, #8]
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	68ba      	ldr	r2, [r7, #8]
 8005b74:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2201      	movs	r2, #1
 8005b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2200      	movs	r2, #0
 8005b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b86:	2300      	movs	r3, #0
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3714      	adds	r7, #20
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr
 8005b94:	40012c00 	.word	0x40012c00
 8005b98:	40014000 	.word	0x40014000

08005b9c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b085      	sub	sp, #20
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d101      	bne.n	8005bb8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005bb4:	2302      	movs	r3, #2
 8005bb6:	e060      	b.n	8005c7a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	68db      	ldr	r3, [r3, #12]
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	4313      	orrs	r3, r2
 8005be8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	691b      	ldr	r3, [r3, #16]
 8005c02:	4313      	orrs	r3, r2
 8005c04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	695b      	ldr	r3, [r3, #20]
 8005c10:	4313      	orrs	r3, r2
 8005c12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	699b      	ldr	r3, [r3, #24]
 8005c2c:	041b      	lsls	r3, r3, #16
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a14      	ldr	r2, [pc, #80]	; (8005c88 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d115      	bne.n	8005c68 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c46:	051b      	lsls	r3, r3, #20
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	69db      	ldr	r3, [r3, #28]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	6a1b      	ldr	r3, [r3, #32]
 8005c64:	4313      	orrs	r3, r2
 8005c66:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	68fa      	ldr	r2, [r7, #12]
 8005c6e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2200      	movs	r2, #0
 8005c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c78:	2300      	movs	r3, #0
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3714      	adds	r7, #20
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c84:	4770      	bx	lr
 8005c86:	bf00      	nop
 8005c88:	40012c00 	.word	0x40012c00

08005c8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b083      	sub	sp, #12
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c94:	bf00      	nop
 8005c96:	370c      	adds	r7, #12
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr

08005ca0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b083      	sub	sp, #12
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ca8:	bf00      	nop
 8005caa:	370c      	adds	r7, #12
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr

08005cb4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b083      	sub	sp, #12
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005cbc:	bf00      	nop
 8005cbe:	370c      	adds	r7, #12
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr

08005cc8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b082      	sub	sp, #8
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d101      	bne.n	8005cda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e040      	b.n	8005d5c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d106      	bne.n	8005cf0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f7fc f98e 	bl	800200c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2224      	movs	r2, #36	; 0x24
 8005cf4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f022 0201 	bic.w	r2, r2, #1
 8005d04:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f000 f8c0 	bl	8005e8c <UART_SetConfig>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	2b01      	cmp	r3, #1
 8005d10:	d101      	bne.n	8005d16 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	e022      	b.n	8005d5c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d002      	beq.n	8005d24 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f000 fae0 	bl	80062e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	685a      	ldr	r2, [r3, #4]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	689a      	ldr	r2, [r3, #8]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f042 0201 	orr.w	r2, r2, #1
 8005d52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f000 fb67 	bl	8006428 <UART_CheckIdleState>
 8005d5a:	4603      	mov	r3, r0
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3708      	adds	r7, #8
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}

08005d64 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b08a      	sub	sp, #40	; 0x28
 8005d68:	af02      	add	r7, sp, #8
 8005d6a:	60f8      	str	r0, [r7, #12]
 8005d6c:	60b9      	str	r1, [r7, #8]
 8005d6e:	603b      	str	r3, [r7, #0]
 8005d70:	4613      	mov	r3, r2
 8005d72:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d78:	2b20      	cmp	r3, #32
 8005d7a:	f040 8082 	bne.w	8005e82 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d002      	beq.n	8005d8a <HAL_UART_Transmit+0x26>
 8005d84:	88fb      	ldrh	r3, [r7, #6]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d101      	bne.n	8005d8e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	e07a      	b.n	8005e84 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d101      	bne.n	8005d9c <HAL_UART_Transmit+0x38>
 8005d98:	2302      	movs	r3, #2
 8005d9a:	e073      	b.n	8005e84 <HAL_UART_Transmit+0x120>
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2200      	movs	r2, #0
 8005da8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2221      	movs	r2, #33	; 0x21
 8005db0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005db2:	f7fc fb4d 	bl	8002450 <HAL_GetTick>
 8005db6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	88fa      	ldrh	r2, [r7, #6]
 8005dbc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	88fa      	ldrh	r2, [r7, #6]
 8005dc4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dd0:	d108      	bne.n	8005de4 <HAL_UART_Transmit+0x80>
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	691b      	ldr	r3, [r3, #16]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d104      	bne.n	8005de4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	61bb      	str	r3, [r7, #24]
 8005de2:	e003      	b.n	8005dec <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005de8:	2300      	movs	r3, #0
 8005dea:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2200      	movs	r2, #0
 8005df0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005df4:	e02d      	b.n	8005e52 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	9300      	str	r3, [sp, #0]
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	2180      	movs	r1, #128	; 0x80
 8005e00:	68f8      	ldr	r0, [r7, #12]
 8005e02:	f000 fb5a 	bl	80064ba <UART_WaitOnFlagUntilTimeout>
 8005e06:	4603      	mov	r3, r0
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d001      	beq.n	8005e10 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005e0c:	2303      	movs	r3, #3
 8005e0e:	e039      	b.n	8005e84 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005e10:	69fb      	ldr	r3, [r7, #28]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d10b      	bne.n	8005e2e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005e16:	69bb      	ldr	r3, [r7, #24]
 8005e18:	881a      	ldrh	r2, [r3, #0]
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e22:	b292      	uxth	r2, r2
 8005e24:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005e26:	69bb      	ldr	r3, [r7, #24]
 8005e28:	3302      	adds	r3, #2
 8005e2a:	61bb      	str	r3, [r7, #24]
 8005e2c:	e008      	b.n	8005e40 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005e2e:	69fb      	ldr	r3, [r7, #28]
 8005e30:	781a      	ldrb	r2, [r3, #0]
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	b292      	uxth	r2, r2
 8005e38:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005e3a:	69fb      	ldr	r3, [r7, #28]
 8005e3c:	3301      	adds	r3, #1
 8005e3e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	3b01      	subs	r3, #1
 8005e4a:	b29a      	uxth	r2, r3
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d1cb      	bne.n	8005df6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	9300      	str	r3, [sp, #0]
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	2200      	movs	r2, #0
 8005e66:	2140      	movs	r1, #64	; 0x40
 8005e68:	68f8      	ldr	r0, [r7, #12]
 8005e6a:	f000 fb26 	bl	80064ba <UART_WaitOnFlagUntilTimeout>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d001      	beq.n	8005e78 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005e74:	2303      	movs	r3, #3
 8005e76:	e005      	b.n	8005e84 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2220      	movs	r2, #32
 8005e7c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	e000      	b.n	8005e84 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005e82:	2302      	movs	r3, #2
  }
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3720      	adds	r7, #32
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}

08005e8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e90:	b08a      	sub	sp, #40	; 0x28
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e96:	2300      	movs	r3, #0
 8005e98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	689a      	ldr	r2, [r3, #8]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	691b      	ldr	r3, [r3, #16]
 8005ea4:	431a      	orrs	r2, r3
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	695b      	ldr	r3, [r3, #20]
 8005eaa:	431a      	orrs	r2, r3
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	69db      	ldr	r3, [r3, #28]
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	681a      	ldr	r2, [r3, #0]
 8005eba:	4bb4      	ldr	r3, [pc, #720]	; (800618c <UART_SetConfig+0x300>)
 8005ebc:	4013      	ands	r3, r2
 8005ebe:	68fa      	ldr	r2, [r7, #12]
 8005ec0:	6812      	ldr	r2, [r2, #0]
 8005ec2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005ec4:	430b      	orrs	r3, r1
 8005ec6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	68da      	ldr	r2, [r3, #12]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	430a      	orrs	r2, r1
 8005edc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	699b      	ldr	r3, [r3, #24]
 8005ee2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4aa9      	ldr	r2, [pc, #676]	; (8006190 <UART_SetConfig+0x304>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d004      	beq.n	8005ef8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	6a1b      	ldr	r3, [r3, #32]
 8005ef2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f08:	430a      	orrs	r2, r1
 8005f0a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4aa0      	ldr	r2, [pc, #640]	; (8006194 <UART_SetConfig+0x308>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d126      	bne.n	8005f64 <UART_SetConfig+0xd8>
 8005f16:	4ba0      	ldr	r3, [pc, #640]	; (8006198 <UART_SetConfig+0x30c>)
 8005f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f1c:	f003 0303 	and.w	r3, r3, #3
 8005f20:	2b03      	cmp	r3, #3
 8005f22:	d81b      	bhi.n	8005f5c <UART_SetConfig+0xd0>
 8005f24:	a201      	add	r2, pc, #4	; (adr r2, 8005f2c <UART_SetConfig+0xa0>)
 8005f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f2a:	bf00      	nop
 8005f2c:	08005f3d 	.word	0x08005f3d
 8005f30:	08005f4d 	.word	0x08005f4d
 8005f34:	08005f45 	.word	0x08005f45
 8005f38:	08005f55 	.word	0x08005f55
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f42:	e080      	b.n	8006046 <UART_SetConfig+0x1ba>
 8005f44:	2302      	movs	r3, #2
 8005f46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f4a:	e07c      	b.n	8006046 <UART_SetConfig+0x1ba>
 8005f4c:	2304      	movs	r3, #4
 8005f4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f52:	e078      	b.n	8006046 <UART_SetConfig+0x1ba>
 8005f54:	2308      	movs	r3, #8
 8005f56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f5a:	e074      	b.n	8006046 <UART_SetConfig+0x1ba>
 8005f5c:	2310      	movs	r3, #16
 8005f5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f62:	e070      	b.n	8006046 <UART_SetConfig+0x1ba>
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a8c      	ldr	r2, [pc, #560]	; (800619c <UART_SetConfig+0x310>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d138      	bne.n	8005fe0 <UART_SetConfig+0x154>
 8005f6e:	4b8a      	ldr	r3, [pc, #552]	; (8006198 <UART_SetConfig+0x30c>)
 8005f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f74:	f003 030c 	and.w	r3, r3, #12
 8005f78:	2b0c      	cmp	r3, #12
 8005f7a:	d82d      	bhi.n	8005fd8 <UART_SetConfig+0x14c>
 8005f7c:	a201      	add	r2, pc, #4	; (adr r2, 8005f84 <UART_SetConfig+0xf8>)
 8005f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f82:	bf00      	nop
 8005f84:	08005fb9 	.word	0x08005fb9
 8005f88:	08005fd9 	.word	0x08005fd9
 8005f8c:	08005fd9 	.word	0x08005fd9
 8005f90:	08005fd9 	.word	0x08005fd9
 8005f94:	08005fc9 	.word	0x08005fc9
 8005f98:	08005fd9 	.word	0x08005fd9
 8005f9c:	08005fd9 	.word	0x08005fd9
 8005fa0:	08005fd9 	.word	0x08005fd9
 8005fa4:	08005fc1 	.word	0x08005fc1
 8005fa8:	08005fd9 	.word	0x08005fd9
 8005fac:	08005fd9 	.word	0x08005fd9
 8005fb0:	08005fd9 	.word	0x08005fd9
 8005fb4:	08005fd1 	.word	0x08005fd1
 8005fb8:	2300      	movs	r3, #0
 8005fba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fbe:	e042      	b.n	8006046 <UART_SetConfig+0x1ba>
 8005fc0:	2302      	movs	r3, #2
 8005fc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fc6:	e03e      	b.n	8006046 <UART_SetConfig+0x1ba>
 8005fc8:	2304      	movs	r3, #4
 8005fca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fce:	e03a      	b.n	8006046 <UART_SetConfig+0x1ba>
 8005fd0:	2308      	movs	r3, #8
 8005fd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fd6:	e036      	b.n	8006046 <UART_SetConfig+0x1ba>
 8005fd8:	2310      	movs	r3, #16
 8005fda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fde:	e032      	b.n	8006046 <UART_SetConfig+0x1ba>
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a6a      	ldr	r2, [pc, #424]	; (8006190 <UART_SetConfig+0x304>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d12a      	bne.n	8006040 <UART_SetConfig+0x1b4>
 8005fea:	4b6b      	ldr	r3, [pc, #428]	; (8006198 <UART_SetConfig+0x30c>)
 8005fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ff0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005ff4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ff8:	d01a      	beq.n	8006030 <UART_SetConfig+0x1a4>
 8005ffa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ffe:	d81b      	bhi.n	8006038 <UART_SetConfig+0x1ac>
 8006000:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006004:	d00c      	beq.n	8006020 <UART_SetConfig+0x194>
 8006006:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800600a:	d815      	bhi.n	8006038 <UART_SetConfig+0x1ac>
 800600c:	2b00      	cmp	r3, #0
 800600e:	d003      	beq.n	8006018 <UART_SetConfig+0x18c>
 8006010:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006014:	d008      	beq.n	8006028 <UART_SetConfig+0x19c>
 8006016:	e00f      	b.n	8006038 <UART_SetConfig+0x1ac>
 8006018:	2300      	movs	r3, #0
 800601a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800601e:	e012      	b.n	8006046 <UART_SetConfig+0x1ba>
 8006020:	2302      	movs	r3, #2
 8006022:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006026:	e00e      	b.n	8006046 <UART_SetConfig+0x1ba>
 8006028:	2304      	movs	r3, #4
 800602a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800602e:	e00a      	b.n	8006046 <UART_SetConfig+0x1ba>
 8006030:	2308      	movs	r3, #8
 8006032:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006036:	e006      	b.n	8006046 <UART_SetConfig+0x1ba>
 8006038:	2310      	movs	r3, #16
 800603a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800603e:	e002      	b.n	8006046 <UART_SetConfig+0x1ba>
 8006040:	2310      	movs	r3, #16
 8006042:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a51      	ldr	r2, [pc, #324]	; (8006190 <UART_SetConfig+0x304>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d17a      	bne.n	8006146 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006050:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006054:	2b08      	cmp	r3, #8
 8006056:	d824      	bhi.n	80060a2 <UART_SetConfig+0x216>
 8006058:	a201      	add	r2, pc, #4	; (adr r2, 8006060 <UART_SetConfig+0x1d4>)
 800605a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800605e:	bf00      	nop
 8006060:	08006085 	.word	0x08006085
 8006064:	080060a3 	.word	0x080060a3
 8006068:	0800608d 	.word	0x0800608d
 800606c:	080060a3 	.word	0x080060a3
 8006070:	08006093 	.word	0x08006093
 8006074:	080060a3 	.word	0x080060a3
 8006078:	080060a3 	.word	0x080060a3
 800607c:	080060a3 	.word	0x080060a3
 8006080:	0800609b 	.word	0x0800609b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006084:	f7fe f8a0 	bl	80041c8 <HAL_RCC_GetPCLK1Freq>
 8006088:	61f8      	str	r0, [r7, #28]
        break;
 800608a:	e010      	b.n	80060ae <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800608c:	4b44      	ldr	r3, [pc, #272]	; (80061a0 <UART_SetConfig+0x314>)
 800608e:	61fb      	str	r3, [r7, #28]
        break;
 8006090:	e00d      	b.n	80060ae <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006092:	f7fe f801 	bl	8004098 <HAL_RCC_GetSysClockFreq>
 8006096:	61f8      	str	r0, [r7, #28]
        break;
 8006098:	e009      	b.n	80060ae <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800609a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800609e:	61fb      	str	r3, [r7, #28]
        break;
 80060a0:	e005      	b.n	80060ae <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80060a2:	2300      	movs	r3, #0
 80060a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80060a6:	2301      	movs	r3, #1
 80060a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80060ac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80060ae:	69fb      	ldr	r3, [r7, #28]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	f000 8107 	beq.w	80062c4 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	685a      	ldr	r2, [r3, #4]
 80060ba:	4613      	mov	r3, r2
 80060bc:	005b      	lsls	r3, r3, #1
 80060be:	4413      	add	r3, r2
 80060c0:	69fa      	ldr	r2, [r7, #28]
 80060c2:	429a      	cmp	r2, r3
 80060c4:	d305      	bcc.n	80060d2 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80060cc:	69fa      	ldr	r2, [r7, #28]
 80060ce:	429a      	cmp	r2, r3
 80060d0:	d903      	bls.n	80060da <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80060d8:	e0f4      	b.n	80062c4 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80060da:	69fb      	ldr	r3, [r7, #28]
 80060dc:	2200      	movs	r2, #0
 80060de:	461c      	mov	r4, r3
 80060e0:	4615      	mov	r5, r2
 80060e2:	f04f 0200 	mov.w	r2, #0
 80060e6:	f04f 0300 	mov.w	r3, #0
 80060ea:	022b      	lsls	r3, r5, #8
 80060ec:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80060f0:	0222      	lsls	r2, r4, #8
 80060f2:	68f9      	ldr	r1, [r7, #12]
 80060f4:	6849      	ldr	r1, [r1, #4]
 80060f6:	0849      	lsrs	r1, r1, #1
 80060f8:	2000      	movs	r0, #0
 80060fa:	4688      	mov	r8, r1
 80060fc:	4681      	mov	r9, r0
 80060fe:	eb12 0a08 	adds.w	sl, r2, r8
 8006102:	eb43 0b09 	adc.w	fp, r3, r9
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	2200      	movs	r2, #0
 800610c:	603b      	str	r3, [r7, #0]
 800610e:	607a      	str	r2, [r7, #4]
 8006110:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006114:	4650      	mov	r0, sl
 8006116:	4659      	mov	r1, fp
 8006118:	f7fa fd96 	bl	8000c48 <__aeabi_uldivmod>
 800611c:	4602      	mov	r2, r0
 800611e:	460b      	mov	r3, r1
 8006120:	4613      	mov	r3, r2
 8006122:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006124:	69bb      	ldr	r3, [r7, #24]
 8006126:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800612a:	d308      	bcc.n	800613e <UART_SetConfig+0x2b2>
 800612c:	69bb      	ldr	r3, [r7, #24]
 800612e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006132:	d204      	bcs.n	800613e <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	69ba      	ldr	r2, [r7, #24]
 800613a:	60da      	str	r2, [r3, #12]
 800613c:	e0c2      	b.n	80062c4 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006144:	e0be      	b.n	80062c4 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	69db      	ldr	r3, [r3, #28]
 800614a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800614e:	d16a      	bne.n	8006226 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8006150:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006154:	2b08      	cmp	r3, #8
 8006156:	d834      	bhi.n	80061c2 <UART_SetConfig+0x336>
 8006158:	a201      	add	r2, pc, #4	; (adr r2, 8006160 <UART_SetConfig+0x2d4>)
 800615a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800615e:	bf00      	nop
 8006160:	08006185 	.word	0x08006185
 8006164:	080061a5 	.word	0x080061a5
 8006168:	080061ad 	.word	0x080061ad
 800616c:	080061c3 	.word	0x080061c3
 8006170:	080061b3 	.word	0x080061b3
 8006174:	080061c3 	.word	0x080061c3
 8006178:	080061c3 	.word	0x080061c3
 800617c:	080061c3 	.word	0x080061c3
 8006180:	080061bb 	.word	0x080061bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006184:	f7fe f820 	bl	80041c8 <HAL_RCC_GetPCLK1Freq>
 8006188:	61f8      	str	r0, [r7, #28]
        break;
 800618a:	e020      	b.n	80061ce <UART_SetConfig+0x342>
 800618c:	efff69f3 	.word	0xefff69f3
 8006190:	40008000 	.word	0x40008000
 8006194:	40013800 	.word	0x40013800
 8006198:	40021000 	.word	0x40021000
 800619c:	40004400 	.word	0x40004400
 80061a0:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80061a4:	f7fe f826 	bl	80041f4 <HAL_RCC_GetPCLK2Freq>
 80061a8:	61f8      	str	r0, [r7, #28]
        break;
 80061aa:	e010      	b.n	80061ce <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061ac:	4b4c      	ldr	r3, [pc, #304]	; (80062e0 <UART_SetConfig+0x454>)
 80061ae:	61fb      	str	r3, [r7, #28]
        break;
 80061b0:	e00d      	b.n	80061ce <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061b2:	f7fd ff71 	bl	8004098 <HAL_RCC_GetSysClockFreq>
 80061b6:	61f8      	str	r0, [r7, #28]
        break;
 80061b8:	e009      	b.n	80061ce <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061be:	61fb      	str	r3, [r7, #28]
        break;
 80061c0:	e005      	b.n	80061ce <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80061c2:	2300      	movs	r3, #0
 80061c4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80061c6:	2301      	movs	r3, #1
 80061c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80061cc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80061ce:	69fb      	ldr	r3, [r7, #28]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d077      	beq.n	80062c4 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80061d4:	69fb      	ldr	r3, [r7, #28]
 80061d6:	005a      	lsls	r2, r3, #1
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	085b      	lsrs	r3, r3, #1
 80061de:	441a      	add	r2, r3
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80061e8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061ea:	69bb      	ldr	r3, [r7, #24]
 80061ec:	2b0f      	cmp	r3, #15
 80061ee:	d916      	bls.n	800621e <UART_SetConfig+0x392>
 80061f0:	69bb      	ldr	r3, [r7, #24]
 80061f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061f6:	d212      	bcs.n	800621e <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80061f8:	69bb      	ldr	r3, [r7, #24]
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	f023 030f 	bic.w	r3, r3, #15
 8006200:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006202:	69bb      	ldr	r3, [r7, #24]
 8006204:	085b      	lsrs	r3, r3, #1
 8006206:	b29b      	uxth	r3, r3
 8006208:	f003 0307 	and.w	r3, r3, #7
 800620c:	b29a      	uxth	r2, r3
 800620e:	8afb      	ldrh	r3, [r7, #22]
 8006210:	4313      	orrs	r3, r2
 8006212:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	8afa      	ldrh	r2, [r7, #22]
 800621a:	60da      	str	r2, [r3, #12]
 800621c:	e052      	b.n	80062c4 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800621e:	2301      	movs	r3, #1
 8006220:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006224:	e04e      	b.n	80062c4 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006226:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800622a:	2b08      	cmp	r3, #8
 800622c:	d827      	bhi.n	800627e <UART_SetConfig+0x3f2>
 800622e:	a201      	add	r2, pc, #4	; (adr r2, 8006234 <UART_SetConfig+0x3a8>)
 8006230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006234:	08006259 	.word	0x08006259
 8006238:	08006261 	.word	0x08006261
 800623c:	08006269 	.word	0x08006269
 8006240:	0800627f 	.word	0x0800627f
 8006244:	0800626f 	.word	0x0800626f
 8006248:	0800627f 	.word	0x0800627f
 800624c:	0800627f 	.word	0x0800627f
 8006250:	0800627f 	.word	0x0800627f
 8006254:	08006277 	.word	0x08006277
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006258:	f7fd ffb6 	bl	80041c8 <HAL_RCC_GetPCLK1Freq>
 800625c:	61f8      	str	r0, [r7, #28]
        break;
 800625e:	e014      	b.n	800628a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006260:	f7fd ffc8 	bl	80041f4 <HAL_RCC_GetPCLK2Freq>
 8006264:	61f8      	str	r0, [r7, #28]
        break;
 8006266:	e010      	b.n	800628a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006268:	4b1d      	ldr	r3, [pc, #116]	; (80062e0 <UART_SetConfig+0x454>)
 800626a:	61fb      	str	r3, [r7, #28]
        break;
 800626c:	e00d      	b.n	800628a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800626e:	f7fd ff13 	bl	8004098 <HAL_RCC_GetSysClockFreq>
 8006272:	61f8      	str	r0, [r7, #28]
        break;
 8006274:	e009      	b.n	800628a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006276:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800627a:	61fb      	str	r3, [r7, #28]
        break;
 800627c:	e005      	b.n	800628a <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800627e:	2300      	movs	r3, #0
 8006280:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006288:	bf00      	nop
    }

    if (pclk != 0U)
 800628a:	69fb      	ldr	r3, [r7, #28]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d019      	beq.n	80062c4 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	085a      	lsrs	r2, r3, #1
 8006296:	69fb      	ldr	r3, [r7, #28]
 8006298:	441a      	add	r2, r3
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	fbb2 f3f3 	udiv	r3, r2, r3
 80062a2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062a4:	69bb      	ldr	r3, [r7, #24]
 80062a6:	2b0f      	cmp	r3, #15
 80062a8:	d909      	bls.n	80062be <UART_SetConfig+0x432>
 80062aa:	69bb      	ldr	r3, [r7, #24]
 80062ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062b0:	d205      	bcs.n	80062be <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80062b2:	69bb      	ldr	r3, [r7, #24]
 80062b4:	b29a      	uxth	r2, r3
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	60da      	str	r2, [r3, #12]
 80062bc:	e002      	b.n	80062c4 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80062be:	2301      	movs	r3, #1
 80062c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2200      	movs	r2, #0
 80062c8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2200      	movs	r2, #0
 80062ce:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80062d0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3728      	adds	r7, #40	; 0x28
 80062d8:	46bd      	mov	sp, r7
 80062da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80062de:	bf00      	nop
 80062e0:	00f42400 	.word	0x00f42400

080062e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b083      	sub	sp, #12
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f0:	f003 0301 	and.w	r3, r3, #1
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d00a      	beq.n	800630e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	430a      	orrs	r2, r1
 800630c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006312:	f003 0302 	and.w	r3, r3, #2
 8006316:	2b00      	cmp	r3, #0
 8006318:	d00a      	beq.n	8006330 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	430a      	orrs	r2, r1
 800632e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006334:	f003 0304 	and.w	r3, r3, #4
 8006338:	2b00      	cmp	r3, #0
 800633a:	d00a      	beq.n	8006352 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	430a      	orrs	r2, r1
 8006350:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006356:	f003 0308 	and.w	r3, r3, #8
 800635a:	2b00      	cmp	r3, #0
 800635c:	d00a      	beq.n	8006374 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	430a      	orrs	r2, r1
 8006372:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006378:	f003 0310 	and.w	r3, r3, #16
 800637c:	2b00      	cmp	r3, #0
 800637e:	d00a      	beq.n	8006396 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	430a      	orrs	r2, r1
 8006394:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800639a:	f003 0320 	and.w	r3, r3, #32
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d00a      	beq.n	80063b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	430a      	orrs	r2, r1
 80063b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d01a      	beq.n	80063fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	430a      	orrs	r2, r1
 80063d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063e2:	d10a      	bne.n	80063fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	430a      	orrs	r2, r1
 80063f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006402:	2b00      	cmp	r3, #0
 8006404:	d00a      	beq.n	800641c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	430a      	orrs	r2, r1
 800641a:	605a      	str	r2, [r3, #4]
  }
}
 800641c:	bf00      	nop
 800641e:	370c      	adds	r7, #12
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr

08006428 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b086      	sub	sp, #24
 800642c:	af02      	add	r7, sp, #8
 800642e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2200      	movs	r2, #0
 8006434:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006438:	f7fc f80a 	bl	8002450 <HAL_GetTick>
 800643c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f003 0308 	and.w	r3, r3, #8
 8006448:	2b08      	cmp	r3, #8
 800644a:	d10e      	bne.n	800646a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800644c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006450:	9300      	str	r3, [sp, #0]
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2200      	movs	r2, #0
 8006456:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f000 f82d 	bl	80064ba <UART_WaitOnFlagUntilTimeout>
 8006460:	4603      	mov	r3, r0
 8006462:	2b00      	cmp	r3, #0
 8006464:	d001      	beq.n	800646a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006466:	2303      	movs	r3, #3
 8006468:	e023      	b.n	80064b2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f003 0304 	and.w	r3, r3, #4
 8006474:	2b04      	cmp	r3, #4
 8006476:	d10e      	bne.n	8006496 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006478:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800647c:	9300      	str	r3, [sp, #0]
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2200      	movs	r2, #0
 8006482:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f000 f817 	bl	80064ba <UART_WaitOnFlagUntilTimeout>
 800648c:	4603      	mov	r3, r0
 800648e:	2b00      	cmp	r3, #0
 8006490:	d001      	beq.n	8006496 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006492:	2303      	movs	r3, #3
 8006494:	e00d      	b.n	80064b2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2220      	movs	r2, #32
 800649a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2220      	movs	r2, #32
 80064a0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2200      	movs	r2, #0
 80064a6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2200      	movs	r2, #0
 80064ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80064b0:	2300      	movs	r3, #0
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3710      	adds	r7, #16
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}

080064ba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80064ba:	b580      	push	{r7, lr}
 80064bc:	b09c      	sub	sp, #112	; 0x70
 80064be:	af00      	add	r7, sp, #0
 80064c0:	60f8      	str	r0, [r7, #12]
 80064c2:	60b9      	str	r1, [r7, #8]
 80064c4:	603b      	str	r3, [r7, #0]
 80064c6:	4613      	mov	r3, r2
 80064c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064ca:	e0a5      	b.n	8006618 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064d2:	f000 80a1 	beq.w	8006618 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064d6:	f7fb ffbb 	bl	8002450 <HAL_GetTick>
 80064da:	4602      	mov	r2, r0
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	1ad3      	subs	r3, r2, r3
 80064e0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d302      	bcc.n	80064ec <UART_WaitOnFlagUntilTimeout+0x32>
 80064e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d13e      	bne.n	800656a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064f4:	e853 3f00 	ldrex	r3, [r3]
 80064f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80064fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006500:	667b      	str	r3, [r7, #100]	; 0x64
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	461a      	mov	r2, r3
 8006508:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800650a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800650c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800650e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006510:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006512:	e841 2300 	strex	r3, r2, [r1]
 8006516:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006518:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800651a:	2b00      	cmp	r3, #0
 800651c:	d1e6      	bne.n	80064ec <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	3308      	adds	r3, #8
 8006524:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006526:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006528:	e853 3f00 	ldrex	r3, [r3]
 800652c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800652e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006530:	f023 0301 	bic.w	r3, r3, #1
 8006534:	663b      	str	r3, [r7, #96]	; 0x60
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	3308      	adds	r3, #8
 800653c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800653e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006540:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006542:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006544:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006546:	e841 2300 	strex	r3, r2, [r1]
 800654a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800654c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800654e:	2b00      	cmp	r3, #0
 8006550:	d1e5      	bne.n	800651e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2220      	movs	r2, #32
 8006556:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2220      	movs	r2, #32
 800655c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2200      	movs	r2, #0
 8006562:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006566:	2303      	movs	r3, #3
 8006568:	e067      	b.n	800663a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f003 0304 	and.w	r3, r3, #4
 8006574:	2b00      	cmp	r3, #0
 8006576:	d04f      	beq.n	8006618 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	69db      	ldr	r3, [r3, #28]
 800657e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006582:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006586:	d147      	bne.n	8006618 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006590:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800659a:	e853 3f00 	ldrex	r3, [r3]
 800659e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80065a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80065a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	461a      	mov	r2, r3
 80065ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065b0:	637b      	str	r3, [r7, #52]	; 0x34
 80065b2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80065b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80065b8:	e841 2300 	strex	r3, r2, [r1]
 80065bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80065be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d1e6      	bne.n	8006592 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	3308      	adds	r3, #8
 80065ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	e853 3f00 	ldrex	r3, [r3]
 80065d2:	613b      	str	r3, [r7, #16]
   return(result);
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	f023 0301 	bic.w	r3, r3, #1
 80065da:	66bb      	str	r3, [r7, #104]	; 0x68
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	3308      	adds	r3, #8
 80065e2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80065e4:	623a      	str	r2, [r7, #32]
 80065e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e8:	69f9      	ldr	r1, [r7, #28]
 80065ea:	6a3a      	ldr	r2, [r7, #32]
 80065ec:	e841 2300 	strex	r3, r2, [r1]
 80065f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80065f2:	69bb      	ldr	r3, [r7, #24]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d1e5      	bne.n	80065c4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2220      	movs	r2, #32
 80065fc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2220      	movs	r2, #32
 8006602:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2220      	movs	r2, #32
 8006608:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2200      	movs	r2, #0
 8006610:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006614:	2303      	movs	r3, #3
 8006616:	e010      	b.n	800663a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	69da      	ldr	r2, [r3, #28]
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	4013      	ands	r3, r2
 8006622:	68ba      	ldr	r2, [r7, #8]
 8006624:	429a      	cmp	r2, r3
 8006626:	bf0c      	ite	eq
 8006628:	2301      	moveq	r3, #1
 800662a:	2300      	movne	r3, #0
 800662c:	b2db      	uxtb	r3, r3
 800662e:	461a      	mov	r2, r3
 8006630:	79fb      	ldrb	r3, [r7, #7]
 8006632:	429a      	cmp	r2, r3
 8006634:	f43f af4a 	beq.w	80064cc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006638:	2300      	movs	r3, #0
}
 800663a:	4618      	mov	r0, r3
 800663c:	3770      	adds	r7, #112	; 0x70
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}
	...

08006644 <__errno>:
 8006644:	4b01      	ldr	r3, [pc, #4]	; (800664c <__errno+0x8>)
 8006646:	6818      	ldr	r0, [r3, #0]
 8006648:	4770      	bx	lr
 800664a:	bf00      	nop
 800664c:	2000000c 	.word	0x2000000c

08006650 <__libc_init_array>:
 8006650:	b570      	push	{r4, r5, r6, lr}
 8006652:	4d0d      	ldr	r5, [pc, #52]	; (8006688 <__libc_init_array+0x38>)
 8006654:	4c0d      	ldr	r4, [pc, #52]	; (800668c <__libc_init_array+0x3c>)
 8006656:	1b64      	subs	r4, r4, r5
 8006658:	10a4      	asrs	r4, r4, #2
 800665a:	2600      	movs	r6, #0
 800665c:	42a6      	cmp	r6, r4
 800665e:	d109      	bne.n	8006674 <__libc_init_array+0x24>
 8006660:	4d0b      	ldr	r5, [pc, #44]	; (8006690 <__libc_init_array+0x40>)
 8006662:	4c0c      	ldr	r4, [pc, #48]	; (8006694 <__libc_init_array+0x44>)
 8006664:	f002 ff40 	bl	80094e8 <_init>
 8006668:	1b64      	subs	r4, r4, r5
 800666a:	10a4      	asrs	r4, r4, #2
 800666c:	2600      	movs	r6, #0
 800666e:	42a6      	cmp	r6, r4
 8006670:	d105      	bne.n	800667e <__libc_init_array+0x2e>
 8006672:	bd70      	pop	{r4, r5, r6, pc}
 8006674:	f855 3b04 	ldr.w	r3, [r5], #4
 8006678:	4798      	blx	r3
 800667a:	3601      	adds	r6, #1
 800667c:	e7ee      	b.n	800665c <__libc_init_array+0xc>
 800667e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006682:	4798      	blx	r3
 8006684:	3601      	adds	r6, #1
 8006686:	e7f2      	b.n	800666e <__libc_init_array+0x1e>
 8006688:	08009a4c 	.word	0x08009a4c
 800668c:	08009a4c 	.word	0x08009a4c
 8006690:	08009a4c 	.word	0x08009a4c
 8006694:	08009a50 	.word	0x08009a50

08006698 <memset>:
 8006698:	4402      	add	r2, r0
 800669a:	4603      	mov	r3, r0
 800669c:	4293      	cmp	r3, r2
 800669e:	d100      	bne.n	80066a2 <memset+0xa>
 80066a0:	4770      	bx	lr
 80066a2:	f803 1b01 	strb.w	r1, [r3], #1
 80066a6:	e7f9      	b.n	800669c <memset+0x4>

080066a8 <__cvt>:
 80066a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80066ac:	ec55 4b10 	vmov	r4, r5, d0
 80066b0:	2d00      	cmp	r5, #0
 80066b2:	460e      	mov	r6, r1
 80066b4:	4619      	mov	r1, r3
 80066b6:	462b      	mov	r3, r5
 80066b8:	bfbb      	ittet	lt
 80066ba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80066be:	461d      	movlt	r5, r3
 80066c0:	2300      	movge	r3, #0
 80066c2:	232d      	movlt	r3, #45	; 0x2d
 80066c4:	700b      	strb	r3, [r1, #0]
 80066c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80066c8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80066cc:	4691      	mov	r9, r2
 80066ce:	f023 0820 	bic.w	r8, r3, #32
 80066d2:	bfbc      	itt	lt
 80066d4:	4622      	movlt	r2, r4
 80066d6:	4614      	movlt	r4, r2
 80066d8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80066dc:	d005      	beq.n	80066ea <__cvt+0x42>
 80066de:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80066e2:	d100      	bne.n	80066e6 <__cvt+0x3e>
 80066e4:	3601      	adds	r6, #1
 80066e6:	2102      	movs	r1, #2
 80066e8:	e000      	b.n	80066ec <__cvt+0x44>
 80066ea:	2103      	movs	r1, #3
 80066ec:	ab03      	add	r3, sp, #12
 80066ee:	9301      	str	r3, [sp, #4]
 80066f0:	ab02      	add	r3, sp, #8
 80066f2:	9300      	str	r3, [sp, #0]
 80066f4:	ec45 4b10 	vmov	d0, r4, r5
 80066f8:	4653      	mov	r3, sl
 80066fa:	4632      	mov	r2, r6
 80066fc:	f000 fe18 	bl	8007330 <_dtoa_r>
 8006700:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006704:	4607      	mov	r7, r0
 8006706:	d102      	bne.n	800670e <__cvt+0x66>
 8006708:	f019 0f01 	tst.w	r9, #1
 800670c:	d022      	beq.n	8006754 <__cvt+0xac>
 800670e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006712:	eb07 0906 	add.w	r9, r7, r6
 8006716:	d110      	bne.n	800673a <__cvt+0x92>
 8006718:	783b      	ldrb	r3, [r7, #0]
 800671a:	2b30      	cmp	r3, #48	; 0x30
 800671c:	d10a      	bne.n	8006734 <__cvt+0x8c>
 800671e:	2200      	movs	r2, #0
 8006720:	2300      	movs	r3, #0
 8006722:	4620      	mov	r0, r4
 8006724:	4629      	mov	r1, r5
 8006726:	f7fa f9cf 	bl	8000ac8 <__aeabi_dcmpeq>
 800672a:	b918      	cbnz	r0, 8006734 <__cvt+0x8c>
 800672c:	f1c6 0601 	rsb	r6, r6, #1
 8006730:	f8ca 6000 	str.w	r6, [sl]
 8006734:	f8da 3000 	ldr.w	r3, [sl]
 8006738:	4499      	add	r9, r3
 800673a:	2200      	movs	r2, #0
 800673c:	2300      	movs	r3, #0
 800673e:	4620      	mov	r0, r4
 8006740:	4629      	mov	r1, r5
 8006742:	f7fa f9c1 	bl	8000ac8 <__aeabi_dcmpeq>
 8006746:	b108      	cbz	r0, 800674c <__cvt+0xa4>
 8006748:	f8cd 900c 	str.w	r9, [sp, #12]
 800674c:	2230      	movs	r2, #48	; 0x30
 800674e:	9b03      	ldr	r3, [sp, #12]
 8006750:	454b      	cmp	r3, r9
 8006752:	d307      	bcc.n	8006764 <__cvt+0xbc>
 8006754:	9b03      	ldr	r3, [sp, #12]
 8006756:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006758:	1bdb      	subs	r3, r3, r7
 800675a:	4638      	mov	r0, r7
 800675c:	6013      	str	r3, [r2, #0]
 800675e:	b004      	add	sp, #16
 8006760:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006764:	1c59      	adds	r1, r3, #1
 8006766:	9103      	str	r1, [sp, #12]
 8006768:	701a      	strb	r2, [r3, #0]
 800676a:	e7f0      	b.n	800674e <__cvt+0xa6>

0800676c <__exponent>:
 800676c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800676e:	4603      	mov	r3, r0
 8006770:	2900      	cmp	r1, #0
 8006772:	bfb8      	it	lt
 8006774:	4249      	neglt	r1, r1
 8006776:	f803 2b02 	strb.w	r2, [r3], #2
 800677a:	bfb4      	ite	lt
 800677c:	222d      	movlt	r2, #45	; 0x2d
 800677e:	222b      	movge	r2, #43	; 0x2b
 8006780:	2909      	cmp	r1, #9
 8006782:	7042      	strb	r2, [r0, #1]
 8006784:	dd2a      	ble.n	80067dc <__exponent+0x70>
 8006786:	f10d 0407 	add.w	r4, sp, #7
 800678a:	46a4      	mov	ip, r4
 800678c:	270a      	movs	r7, #10
 800678e:	46a6      	mov	lr, r4
 8006790:	460a      	mov	r2, r1
 8006792:	fb91 f6f7 	sdiv	r6, r1, r7
 8006796:	fb07 1516 	mls	r5, r7, r6, r1
 800679a:	3530      	adds	r5, #48	; 0x30
 800679c:	2a63      	cmp	r2, #99	; 0x63
 800679e:	f104 34ff 	add.w	r4, r4, #4294967295
 80067a2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80067a6:	4631      	mov	r1, r6
 80067a8:	dcf1      	bgt.n	800678e <__exponent+0x22>
 80067aa:	3130      	adds	r1, #48	; 0x30
 80067ac:	f1ae 0502 	sub.w	r5, lr, #2
 80067b0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80067b4:	1c44      	adds	r4, r0, #1
 80067b6:	4629      	mov	r1, r5
 80067b8:	4561      	cmp	r1, ip
 80067ba:	d30a      	bcc.n	80067d2 <__exponent+0x66>
 80067bc:	f10d 0209 	add.w	r2, sp, #9
 80067c0:	eba2 020e 	sub.w	r2, r2, lr
 80067c4:	4565      	cmp	r5, ip
 80067c6:	bf88      	it	hi
 80067c8:	2200      	movhi	r2, #0
 80067ca:	4413      	add	r3, r2
 80067cc:	1a18      	subs	r0, r3, r0
 80067ce:	b003      	add	sp, #12
 80067d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80067d6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80067da:	e7ed      	b.n	80067b8 <__exponent+0x4c>
 80067dc:	2330      	movs	r3, #48	; 0x30
 80067de:	3130      	adds	r1, #48	; 0x30
 80067e0:	7083      	strb	r3, [r0, #2]
 80067e2:	70c1      	strb	r1, [r0, #3]
 80067e4:	1d03      	adds	r3, r0, #4
 80067e6:	e7f1      	b.n	80067cc <__exponent+0x60>

080067e8 <_printf_float>:
 80067e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067ec:	ed2d 8b02 	vpush	{d8}
 80067f0:	b08d      	sub	sp, #52	; 0x34
 80067f2:	460c      	mov	r4, r1
 80067f4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80067f8:	4616      	mov	r6, r2
 80067fa:	461f      	mov	r7, r3
 80067fc:	4605      	mov	r5, r0
 80067fe:	f001 fd3d 	bl	800827c <_localeconv_r>
 8006802:	f8d0 a000 	ldr.w	sl, [r0]
 8006806:	4650      	mov	r0, sl
 8006808:	f7f9 fce2 	bl	80001d0 <strlen>
 800680c:	2300      	movs	r3, #0
 800680e:	930a      	str	r3, [sp, #40]	; 0x28
 8006810:	6823      	ldr	r3, [r4, #0]
 8006812:	9305      	str	r3, [sp, #20]
 8006814:	f8d8 3000 	ldr.w	r3, [r8]
 8006818:	f894 b018 	ldrb.w	fp, [r4, #24]
 800681c:	3307      	adds	r3, #7
 800681e:	f023 0307 	bic.w	r3, r3, #7
 8006822:	f103 0208 	add.w	r2, r3, #8
 8006826:	f8c8 2000 	str.w	r2, [r8]
 800682a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800682e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006832:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006836:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800683a:	9307      	str	r3, [sp, #28]
 800683c:	f8cd 8018 	str.w	r8, [sp, #24]
 8006840:	ee08 0a10 	vmov	s16, r0
 8006844:	4b9f      	ldr	r3, [pc, #636]	; (8006ac4 <_printf_float+0x2dc>)
 8006846:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800684a:	f04f 32ff 	mov.w	r2, #4294967295
 800684e:	f7fa f96d 	bl	8000b2c <__aeabi_dcmpun>
 8006852:	bb88      	cbnz	r0, 80068b8 <_printf_float+0xd0>
 8006854:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006858:	4b9a      	ldr	r3, [pc, #616]	; (8006ac4 <_printf_float+0x2dc>)
 800685a:	f04f 32ff 	mov.w	r2, #4294967295
 800685e:	f7fa f947 	bl	8000af0 <__aeabi_dcmple>
 8006862:	bb48      	cbnz	r0, 80068b8 <_printf_float+0xd0>
 8006864:	2200      	movs	r2, #0
 8006866:	2300      	movs	r3, #0
 8006868:	4640      	mov	r0, r8
 800686a:	4649      	mov	r1, r9
 800686c:	f7fa f936 	bl	8000adc <__aeabi_dcmplt>
 8006870:	b110      	cbz	r0, 8006878 <_printf_float+0x90>
 8006872:	232d      	movs	r3, #45	; 0x2d
 8006874:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006878:	4b93      	ldr	r3, [pc, #588]	; (8006ac8 <_printf_float+0x2e0>)
 800687a:	4894      	ldr	r0, [pc, #592]	; (8006acc <_printf_float+0x2e4>)
 800687c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006880:	bf94      	ite	ls
 8006882:	4698      	movls	r8, r3
 8006884:	4680      	movhi	r8, r0
 8006886:	2303      	movs	r3, #3
 8006888:	6123      	str	r3, [r4, #16]
 800688a:	9b05      	ldr	r3, [sp, #20]
 800688c:	f023 0204 	bic.w	r2, r3, #4
 8006890:	6022      	str	r2, [r4, #0]
 8006892:	f04f 0900 	mov.w	r9, #0
 8006896:	9700      	str	r7, [sp, #0]
 8006898:	4633      	mov	r3, r6
 800689a:	aa0b      	add	r2, sp, #44	; 0x2c
 800689c:	4621      	mov	r1, r4
 800689e:	4628      	mov	r0, r5
 80068a0:	f000 f9d8 	bl	8006c54 <_printf_common>
 80068a4:	3001      	adds	r0, #1
 80068a6:	f040 8090 	bne.w	80069ca <_printf_float+0x1e2>
 80068aa:	f04f 30ff 	mov.w	r0, #4294967295
 80068ae:	b00d      	add	sp, #52	; 0x34
 80068b0:	ecbd 8b02 	vpop	{d8}
 80068b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068b8:	4642      	mov	r2, r8
 80068ba:	464b      	mov	r3, r9
 80068bc:	4640      	mov	r0, r8
 80068be:	4649      	mov	r1, r9
 80068c0:	f7fa f934 	bl	8000b2c <__aeabi_dcmpun>
 80068c4:	b140      	cbz	r0, 80068d8 <_printf_float+0xf0>
 80068c6:	464b      	mov	r3, r9
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	bfbc      	itt	lt
 80068cc:	232d      	movlt	r3, #45	; 0x2d
 80068ce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80068d2:	487f      	ldr	r0, [pc, #508]	; (8006ad0 <_printf_float+0x2e8>)
 80068d4:	4b7f      	ldr	r3, [pc, #508]	; (8006ad4 <_printf_float+0x2ec>)
 80068d6:	e7d1      	b.n	800687c <_printf_float+0x94>
 80068d8:	6863      	ldr	r3, [r4, #4]
 80068da:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80068de:	9206      	str	r2, [sp, #24]
 80068e0:	1c5a      	adds	r2, r3, #1
 80068e2:	d13f      	bne.n	8006964 <_printf_float+0x17c>
 80068e4:	2306      	movs	r3, #6
 80068e6:	6063      	str	r3, [r4, #4]
 80068e8:	9b05      	ldr	r3, [sp, #20]
 80068ea:	6861      	ldr	r1, [r4, #4]
 80068ec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80068f0:	2300      	movs	r3, #0
 80068f2:	9303      	str	r3, [sp, #12]
 80068f4:	ab0a      	add	r3, sp, #40	; 0x28
 80068f6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80068fa:	ab09      	add	r3, sp, #36	; 0x24
 80068fc:	ec49 8b10 	vmov	d0, r8, r9
 8006900:	9300      	str	r3, [sp, #0]
 8006902:	6022      	str	r2, [r4, #0]
 8006904:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006908:	4628      	mov	r0, r5
 800690a:	f7ff fecd 	bl	80066a8 <__cvt>
 800690e:	9b06      	ldr	r3, [sp, #24]
 8006910:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006912:	2b47      	cmp	r3, #71	; 0x47
 8006914:	4680      	mov	r8, r0
 8006916:	d108      	bne.n	800692a <_printf_float+0x142>
 8006918:	1cc8      	adds	r0, r1, #3
 800691a:	db02      	blt.n	8006922 <_printf_float+0x13a>
 800691c:	6863      	ldr	r3, [r4, #4]
 800691e:	4299      	cmp	r1, r3
 8006920:	dd41      	ble.n	80069a6 <_printf_float+0x1be>
 8006922:	f1ab 0b02 	sub.w	fp, fp, #2
 8006926:	fa5f fb8b 	uxtb.w	fp, fp
 800692a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800692e:	d820      	bhi.n	8006972 <_printf_float+0x18a>
 8006930:	3901      	subs	r1, #1
 8006932:	465a      	mov	r2, fp
 8006934:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006938:	9109      	str	r1, [sp, #36]	; 0x24
 800693a:	f7ff ff17 	bl	800676c <__exponent>
 800693e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006940:	1813      	adds	r3, r2, r0
 8006942:	2a01      	cmp	r2, #1
 8006944:	4681      	mov	r9, r0
 8006946:	6123      	str	r3, [r4, #16]
 8006948:	dc02      	bgt.n	8006950 <_printf_float+0x168>
 800694a:	6822      	ldr	r2, [r4, #0]
 800694c:	07d2      	lsls	r2, r2, #31
 800694e:	d501      	bpl.n	8006954 <_printf_float+0x16c>
 8006950:	3301      	adds	r3, #1
 8006952:	6123      	str	r3, [r4, #16]
 8006954:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006958:	2b00      	cmp	r3, #0
 800695a:	d09c      	beq.n	8006896 <_printf_float+0xae>
 800695c:	232d      	movs	r3, #45	; 0x2d
 800695e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006962:	e798      	b.n	8006896 <_printf_float+0xae>
 8006964:	9a06      	ldr	r2, [sp, #24]
 8006966:	2a47      	cmp	r2, #71	; 0x47
 8006968:	d1be      	bne.n	80068e8 <_printf_float+0x100>
 800696a:	2b00      	cmp	r3, #0
 800696c:	d1bc      	bne.n	80068e8 <_printf_float+0x100>
 800696e:	2301      	movs	r3, #1
 8006970:	e7b9      	b.n	80068e6 <_printf_float+0xfe>
 8006972:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006976:	d118      	bne.n	80069aa <_printf_float+0x1c2>
 8006978:	2900      	cmp	r1, #0
 800697a:	6863      	ldr	r3, [r4, #4]
 800697c:	dd0b      	ble.n	8006996 <_printf_float+0x1ae>
 800697e:	6121      	str	r1, [r4, #16]
 8006980:	b913      	cbnz	r3, 8006988 <_printf_float+0x1a0>
 8006982:	6822      	ldr	r2, [r4, #0]
 8006984:	07d0      	lsls	r0, r2, #31
 8006986:	d502      	bpl.n	800698e <_printf_float+0x1a6>
 8006988:	3301      	adds	r3, #1
 800698a:	440b      	add	r3, r1
 800698c:	6123      	str	r3, [r4, #16]
 800698e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006990:	f04f 0900 	mov.w	r9, #0
 8006994:	e7de      	b.n	8006954 <_printf_float+0x16c>
 8006996:	b913      	cbnz	r3, 800699e <_printf_float+0x1b6>
 8006998:	6822      	ldr	r2, [r4, #0]
 800699a:	07d2      	lsls	r2, r2, #31
 800699c:	d501      	bpl.n	80069a2 <_printf_float+0x1ba>
 800699e:	3302      	adds	r3, #2
 80069a0:	e7f4      	b.n	800698c <_printf_float+0x1a4>
 80069a2:	2301      	movs	r3, #1
 80069a4:	e7f2      	b.n	800698c <_printf_float+0x1a4>
 80069a6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80069aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069ac:	4299      	cmp	r1, r3
 80069ae:	db05      	blt.n	80069bc <_printf_float+0x1d4>
 80069b0:	6823      	ldr	r3, [r4, #0]
 80069b2:	6121      	str	r1, [r4, #16]
 80069b4:	07d8      	lsls	r0, r3, #31
 80069b6:	d5ea      	bpl.n	800698e <_printf_float+0x1a6>
 80069b8:	1c4b      	adds	r3, r1, #1
 80069ba:	e7e7      	b.n	800698c <_printf_float+0x1a4>
 80069bc:	2900      	cmp	r1, #0
 80069be:	bfd4      	ite	le
 80069c0:	f1c1 0202 	rsble	r2, r1, #2
 80069c4:	2201      	movgt	r2, #1
 80069c6:	4413      	add	r3, r2
 80069c8:	e7e0      	b.n	800698c <_printf_float+0x1a4>
 80069ca:	6823      	ldr	r3, [r4, #0]
 80069cc:	055a      	lsls	r2, r3, #21
 80069ce:	d407      	bmi.n	80069e0 <_printf_float+0x1f8>
 80069d0:	6923      	ldr	r3, [r4, #16]
 80069d2:	4642      	mov	r2, r8
 80069d4:	4631      	mov	r1, r6
 80069d6:	4628      	mov	r0, r5
 80069d8:	47b8      	blx	r7
 80069da:	3001      	adds	r0, #1
 80069dc:	d12c      	bne.n	8006a38 <_printf_float+0x250>
 80069de:	e764      	b.n	80068aa <_printf_float+0xc2>
 80069e0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80069e4:	f240 80e0 	bls.w	8006ba8 <_printf_float+0x3c0>
 80069e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80069ec:	2200      	movs	r2, #0
 80069ee:	2300      	movs	r3, #0
 80069f0:	f7fa f86a 	bl	8000ac8 <__aeabi_dcmpeq>
 80069f4:	2800      	cmp	r0, #0
 80069f6:	d034      	beq.n	8006a62 <_printf_float+0x27a>
 80069f8:	4a37      	ldr	r2, [pc, #220]	; (8006ad8 <_printf_float+0x2f0>)
 80069fa:	2301      	movs	r3, #1
 80069fc:	4631      	mov	r1, r6
 80069fe:	4628      	mov	r0, r5
 8006a00:	47b8      	blx	r7
 8006a02:	3001      	adds	r0, #1
 8006a04:	f43f af51 	beq.w	80068aa <_printf_float+0xc2>
 8006a08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	db02      	blt.n	8006a16 <_printf_float+0x22e>
 8006a10:	6823      	ldr	r3, [r4, #0]
 8006a12:	07d8      	lsls	r0, r3, #31
 8006a14:	d510      	bpl.n	8006a38 <_printf_float+0x250>
 8006a16:	ee18 3a10 	vmov	r3, s16
 8006a1a:	4652      	mov	r2, sl
 8006a1c:	4631      	mov	r1, r6
 8006a1e:	4628      	mov	r0, r5
 8006a20:	47b8      	blx	r7
 8006a22:	3001      	adds	r0, #1
 8006a24:	f43f af41 	beq.w	80068aa <_printf_float+0xc2>
 8006a28:	f04f 0800 	mov.w	r8, #0
 8006a2c:	f104 091a 	add.w	r9, r4, #26
 8006a30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a32:	3b01      	subs	r3, #1
 8006a34:	4543      	cmp	r3, r8
 8006a36:	dc09      	bgt.n	8006a4c <_printf_float+0x264>
 8006a38:	6823      	ldr	r3, [r4, #0]
 8006a3a:	079b      	lsls	r3, r3, #30
 8006a3c:	f100 8105 	bmi.w	8006c4a <_printf_float+0x462>
 8006a40:	68e0      	ldr	r0, [r4, #12]
 8006a42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a44:	4298      	cmp	r0, r3
 8006a46:	bfb8      	it	lt
 8006a48:	4618      	movlt	r0, r3
 8006a4a:	e730      	b.n	80068ae <_printf_float+0xc6>
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	464a      	mov	r2, r9
 8006a50:	4631      	mov	r1, r6
 8006a52:	4628      	mov	r0, r5
 8006a54:	47b8      	blx	r7
 8006a56:	3001      	adds	r0, #1
 8006a58:	f43f af27 	beq.w	80068aa <_printf_float+0xc2>
 8006a5c:	f108 0801 	add.w	r8, r8, #1
 8006a60:	e7e6      	b.n	8006a30 <_printf_float+0x248>
 8006a62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	dc39      	bgt.n	8006adc <_printf_float+0x2f4>
 8006a68:	4a1b      	ldr	r2, [pc, #108]	; (8006ad8 <_printf_float+0x2f0>)
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	4631      	mov	r1, r6
 8006a6e:	4628      	mov	r0, r5
 8006a70:	47b8      	blx	r7
 8006a72:	3001      	adds	r0, #1
 8006a74:	f43f af19 	beq.w	80068aa <_printf_float+0xc2>
 8006a78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	d102      	bne.n	8006a86 <_printf_float+0x29e>
 8006a80:	6823      	ldr	r3, [r4, #0]
 8006a82:	07d9      	lsls	r1, r3, #31
 8006a84:	d5d8      	bpl.n	8006a38 <_printf_float+0x250>
 8006a86:	ee18 3a10 	vmov	r3, s16
 8006a8a:	4652      	mov	r2, sl
 8006a8c:	4631      	mov	r1, r6
 8006a8e:	4628      	mov	r0, r5
 8006a90:	47b8      	blx	r7
 8006a92:	3001      	adds	r0, #1
 8006a94:	f43f af09 	beq.w	80068aa <_printf_float+0xc2>
 8006a98:	f04f 0900 	mov.w	r9, #0
 8006a9c:	f104 0a1a 	add.w	sl, r4, #26
 8006aa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006aa2:	425b      	negs	r3, r3
 8006aa4:	454b      	cmp	r3, r9
 8006aa6:	dc01      	bgt.n	8006aac <_printf_float+0x2c4>
 8006aa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006aaa:	e792      	b.n	80069d2 <_printf_float+0x1ea>
 8006aac:	2301      	movs	r3, #1
 8006aae:	4652      	mov	r2, sl
 8006ab0:	4631      	mov	r1, r6
 8006ab2:	4628      	mov	r0, r5
 8006ab4:	47b8      	blx	r7
 8006ab6:	3001      	adds	r0, #1
 8006ab8:	f43f aef7 	beq.w	80068aa <_printf_float+0xc2>
 8006abc:	f109 0901 	add.w	r9, r9, #1
 8006ac0:	e7ee      	b.n	8006aa0 <_printf_float+0x2b8>
 8006ac2:	bf00      	nop
 8006ac4:	7fefffff 	.word	0x7fefffff
 8006ac8:	08009638 	.word	0x08009638
 8006acc:	0800963c 	.word	0x0800963c
 8006ad0:	08009644 	.word	0x08009644
 8006ad4:	08009640 	.word	0x08009640
 8006ad8:	08009648 	.word	0x08009648
 8006adc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ade:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	bfa8      	it	ge
 8006ae4:	461a      	movge	r2, r3
 8006ae6:	2a00      	cmp	r2, #0
 8006ae8:	4691      	mov	r9, r2
 8006aea:	dc37      	bgt.n	8006b5c <_printf_float+0x374>
 8006aec:	f04f 0b00 	mov.w	fp, #0
 8006af0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006af4:	f104 021a 	add.w	r2, r4, #26
 8006af8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006afa:	9305      	str	r3, [sp, #20]
 8006afc:	eba3 0309 	sub.w	r3, r3, r9
 8006b00:	455b      	cmp	r3, fp
 8006b02:	dc33      	bgt.n	8006b6c <_printf_float+0x384>
 8006b04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	db3b      	blt.n	8006b84 <_printf_float+0x39c>
 8006b0c:	6823      	ldr	r3, [r4, #0]
 8006b0e:	07da      	lsls	r2, r3, #31
 8006b10:	d438      	bmi.n	8006b84 <_printf_float+0x39c>
 8006b12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b14:	9a05      	ldr	r2, [sp, #20]
 8006b16:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006b18:	1a9a      	subs	r2, r3, r2
 8006b1a:	eba3 0901 	sub.w	r9, r3, r1
 8006b1e:	4591      	cmp	r9, r2
 8006b20:	bfa8      	it	ge
 8006b22:	4691      	movge	r9, r2
 8006b24:	f1b9 0f00 	cmp.w	r9, #0
 8006b28:	dc35      	bgt.n	8006b96 <_printf_float+0x3ae>
 8006b2a:	f04f 0800 	mov.w	r8, #0
 8006b2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006b32:	f104 0a1a 	add.w	sl, r4, #26
 8006b36:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006b3a:	1a9b      	subs	r3, r3, r2
 8006b3c:	eba3 0309 	sub.w	r3, r3, r9
 8006b40:	4543      	cmp	r3, r8
 8006b42:	f77f af79 	ble.w	8006a38 <_printf_float+0x250>
 8006b46:	2301      	movs	r3, #1
 8006b48:	4652      	mov	r2, sl
 8006b4a:	4631      	mov	r1, r6
 8006b4c:	4628      	mov	r0, r5
 8006b4e:	47b8      	blx	r7
 8006b50:	3001      	adds	r0, #1
 8006b52:	f43f aeaa 	beq.w	80068aa <_printf_float+0xc2>
 8006b56:	f108 0801 	add.w	r8, r8, #1
 8006b5a:	e7ec      	b.n	8006b36 <_printf_float+0x34e>
 8006b5c:	4613      	mov	r3, r2
 8006b5e:	4631      	mov	r1, r6
 8006b60:	4642      	mov	r2, r8
 8006b62:	4628      	mov	r0, r5
 8006b64:	47b8      	blx	r7
 8006b66:	3001      	adds	r0, #1
 8006b68:	d1c0      	bne.n	8006aec <_printf_float+0x304>
 8006b6a:	e69e      	b.n	80068aa <_printf_float+0xc2>
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	4631      	mov	r1, r6
 8006b70:	4628      	mov	r0, r5
 8006b72:	9205      	str	r2, [sp, #20]
 8006b74:	47b8      	blx	r7
 8006b76:	3001      	adds	r0, #1
 8006b78:	f43f ae97 	beq.w	80068aa <_printf_float+0xc2>
 8006b7c:	9a05      	ldr	r2, [sp, #20]
 8006b7e:	f10b 0b01 	add.w	fp, fp, #1
 8006b82:	e7b9      	b.n	8006af8 <_printf_float+0x310>
 8006b84:	ee18 3a10 	vmov	r3, s16
 8006b88:	4652      	mov	r2, sl
 8006b8a:	4631      	mov	r1, r6
 8006b8c:	4628      	mov	r0, r5
 8006b8e:	47b8      	blx	r7
 8006b90:	3001      	adds	r0, #1
 8006b92:	d1be      	bne.n	8006b12 <_printf_float+0x32a>
 8006b94:	e689      	b.n	80068aa <_printf_float+0xc2>
 8006b96:	9a05      	ldr	r2, [sp, #20]
 8006b98:	464b      	mov	r3, r9
 8006b9a:	4442      	add	r2, r8
 8006b9c:	4631      	mov	r1, r6
 8006b9e:	4628      	mov	r0, r5
 8006ba0:	47b8      	blx	r7
 8006ba2:	3001      	adds	r0, #1
 8006ba4:	d1c1      	bne.n	8006b2a <_printf_float+0x342>
 8006ba6:	e680      	b.n	80068aa <_printf_float+0xc2>
 8006ba8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006baa:	2a01      	cmp	r2, #1
 8006bac:	dc01      	bgt.n	8006bb2 <_printf_float+0x3ca>
 8006bae:	07db      	lsls	r3, r3, #31
 8006bb0:	d538      	bpl.n	8006c24 <_printf_float+0x43c>
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	4642      	mov	r2, r8
 8006bb6:	4631      	mov	r1, r6
 8006bb8:	4628      	mov	r0, r5
 8006bba:	47b8      	blx	r7
 8006bbc:	3001      	adds	r0, #1
 8006bbe:	f43f ae74 	beq.w	80068aa <_printf_float+0xc2>
 8006bc2:	ee18 3a10 	vmov	r3, s16
 8006bc6:	4652      	mov	r2, sl
 8006bc8:	4631      	mov	r1, r6
 8006bca:	4628      	mov	r0, r5
 8006bcc:	47b8      	blx	r7
 8006bce:	3001      	adds	r0, #1
 8006bd0:	f43f ae6b 	beq.w	80068aa <_printf_float+0xc2>
 8006bd4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006bd8:	2200      	movs	r2, #0
 8006bda:	2300      	movs	r3, #0
 8006bdc:	f7f9 ff74 	bl	8000ac8 <__aeabi_dcmpeq>
 8006be0:	b9d8      	cbnz	r0, 8006c1a <_printf_float+0x432>
 8006be2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006be4:	f108 0201 	add.w	r2, r8, #1
 8006be8:	3b01      	subs	r3, #1
 8006bea:	4631      	mov	r1, r6
 8006bec:	4628      	mov	r0, r5
 8006bee:	47b8      	blx	r7
 8006bf0:	3001      	adds	r0, #1
 8006bf2:	d10e      	bne.n	8006c12 <_printf_float+0x42a>
 8006bf4:	e659      	b.n	80068aa <_printf_float+0xc2>
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	4652      	mov	r2, sl
 8006bfa:	4631      	mov	r1, r6
 8006bfc:	4628      	mov	r0, r5
 8006bfe:	47b8      	blx	r7
 8006c00:	3001      	adds	r0, #1
 8006c02:	f43f ae52 	beq.w	80068aa <_printf_float+0xc2>
 8006c06:	f108 0801 	add.w	r8, r8, #1
 8006c0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c0c:	3b01      	subs	r3, #1
 8006c0e:	4543      	cmp	r3, r8
 8006c10:	dcf1      	bgt.n	8006bf6 <_printf_float+0x40e>
 8006c12:	464b      	mov	r3, r9
 8006c14:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006c18:	e6dc      	b.n	80069d4 <_printf_float+0x1ec>
 8006c1a:	f04f 0800 	mov.w	r8, #0
 8006c1e:	f104 0a1a 	add.w	sl, r4, #26
 8006c22:	e7f2      	b.n	8006c0a <_printf_float+0x422>
 8006c24:	2301      	movs	r3, #1
 8006c26:	4642      	mov	r2, r8
 8006c28:	e7df      	b.n	8006bea <_printf_float+0x402>
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	464a      	mov	r2, r9
 8006c2e:	4631      	mov	r1, r6
 8006c30:	4628      	mov	r0, r5
 8006c32:	47b8      	blx	r7
 8006c34:	3001      	adds	r0, #1
 8006c36:	f43f ae38 	beq.w	80068aa <_printf_float+0xc2>
 8006c3a:	f108 0801 	add.w	r8, r8, #1
 8006c3e:	68e3      	ldr	r3, [r4, #12]
 8006c40:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006c42:	1a5b      	subs	r3, r3, r1
 8006c44:	4543      	cmp	r3, r8
 8006c46:	dcf0      	bgt.n	8006c2a <_printf_float+0x442>
 8006c48:	e6fa      	b.n	8006a40 <_printf_float+0x258>
 8006c4a:	f04f 0800 	mov.w	r8, #0
 8006c4e:	f104 0919 	add.w	r9, r4, #25
 8006c52:	e7f4      	b.n	8006c3e <_printf_float+0x456>

08006c54 <_printf_common>:
 8006c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c58:	4616      	mov	r6, r2
 8006c5a:	4699      	mov	r9, r3
 8006c5c:	688a      	ldr	r2, [r1, #8]
 8006c5e:	690b      	ldr	r3, [r1, #16]
 8006c60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006c64:	4293      	cmp	r3, r2
 8006c66:	bfb8      	it	lt
 8006c68:	4613      	movlt	r3, r2
 8006c6a:	6033      	str	r3, [r6, #0]
 8006c6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006c70:	4607      	mov	r7, r0
 8006c72:	460c      	mov	r4, r1
 8006c74:	b10a      	cbz	r2, 8006c7a <_printf_common+0x26>
 8006c76:	3301      	adds	r3, #1
 8006c78:	6033      	str	r3, [r6, #0]
 8006c7a:	6823      	ldr	r3, [r4, #0]
 8006c7c:	0699      	lsls	r1, r3, #26
 8006c7e:	bf42      	ittt	mi
 8006c80:	6833      	ldrmi	r3, [r6, #0]
 8006c82:	3302      	addmi	r3, #2
 8006c84:	6033      	strmi	r3, [r6, #0]
 8006c86:	6825      	ldr	r5, [r4, #0]
 8006c88:	f015 0506 	ands.w	r5, r5, #6
 8006c8c:	d106      	bne.n	8006c9c <_printf_common+0x48>
 8006c8e:	f104 0a19 	add.w	sl, r4, #25
 8006c92:	68e3      	ldr	r3, [r4, #12]
 8006c94:	6832      	ldr	r2, [r6, #0]
 8006c96:	1a9b      	subs	r3, r3, r2
 8006c98:	42ab      	cmp	r3, r5
 8006c9a:	dc26      	bgt.n	8006cea <_printf_common+0x96>
 8006c9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006ca0:	1e13      	subs	r3, r2, #0
 8006ca2:	6822      	ldr	r2, [r4, #0]
 8006ca4:	bf18      	it	ne
 8006ca6:	2301      	movne	r3, #1
 8006ca8:	0692      	lsls	r2, r2, #26
 8006caa:	d42b      	bmi.n	8006d04 <_printf_common+0xb0>
 8006cac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006cb0:	4649      	mov	r1, r9
 8006cb2:	4638      	mov	r0, r7
 8006cb4:	47c0      	blx	r8
 8006cb6:	3001      	adds	r0, #1
 8006cb8:	d01e      	beq.n	8006cf8 <_printf_common+0xa4>
 8006cba:	6823      	ldr	r3, [r4, #0]
 8006cbc:	68e5      	ldr	r5, [r4, #12]
 8006cbe:	6832      	ldr	r2, [r6, #0]
 8006cc0:	f003 0306 	and.w	r3, r3, #6
 8006cc4:	2b04      	cmp	r3, #4
 8006cc6:	bf08      	it	eq
 8006cc8:	1aad      	subeq	r5, r5, r2
 8006cca:	68a3      	ldr	r3, [r4, #8]
 8006ccc:	6922      	ldr	r2, [r4, #16]
 8006cce:	bf0c      	ite	eq
 8006cd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006cd4:	2500      	movne	r5, #0
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	bfc4      	itt	gt
 8006cda:	1a9b      	subgt	r3, r3, r2
 8006cdc:	18ed      	addgt	r5, r5, r3
 8006cde:	2600      	movs	r6, #0
 8006ce0:	341a      	adds	r4, #26
 8006ce2:	42b5      	cmp	r5, r6
 8006ce4:	d11a      	bne.n	8006d1c <_printf_common+0xc8>
 8006ce6:	2000      	movs	r0, #0
 8006ce8:	e008      	b.n	8006cfc <_printf_common+0xa8>
 8006cea:	2301      	movs	r3, #1
 8006cec:	4652      	mov	r2, sl
 8006cee:	4649      	mov	r1, r9
 8006cf0:	4638      	mov	r0, r7
 8006cf2:	47c0      	blx	r8
 8006cf4:	3001      	adds	r0, #1
 8006cf6:	d103      	bne.n	8006d00 <_printf_common+0xac>
 8006cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8006cfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d00:	3501      	adds	r5, #1
 8006d02:	e7c6      	b.n	8006c92 <_printf_common+0x3e>
 8006d04:	18e1      	adds	r1, r4, r3
 8006d06:	1c5a      	adds	r2, r3, #1
 8006d08:	2030      	movs	r0, #48	; 0x30
 8006d0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006d0e:	4422      	add	r2, r4
 8006d10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006d14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006d18:	3302      	adds	r3, #2
 8006d1a:	e7c7      	b.n	8006cac <_printf_common+0x58>
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	4622      	mov	r2, r4
 8006d20:	4649      	mov	r1, r9
 8006d22:	4638      	mov	r0, r7
 8006d24:	47c0      	blx	r8
 8006d26:	3001      	adds	r0, #1
 8006d28:	d0e6      	beq.n	8006cf8 <_printf_common+0xa4>
 8006d2a:	3601      	adds	r6, #1
 8006d2c:	e7d9      	b.n	8006ce2 <_printf_common+0x8e>
	...

08006d30 <_printf_i>:
 8006d30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d34:	7e0f      	ldrb	r7, [r1, #24]
 8006d36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006d38:	2f78      	cmp	r7, #120	; 0x78
 8006d3a:	4691      	mov	r9, r2
 8006d3c:	4680      	mov	r8, r0
 8006d3e:	460c      	mov	r4, r1
 8006d40:	469a      	mov	sl, r3
 8006d42:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006d46:	d807      	bhi.n	8006d58 <_printf_i+0x28>
 8006d48:	2f62      	cmp	r7, #98	; 0x62
 8006d4a:	d80a      	bhi.n	8006d62 <_printf_i+0x32>
 8006d4c:	2f00      	cmp	r7, #0
 8006d4e:	f000 80d8 	beq.w	8006f02 <_printf_i+0x1d2>
 8006d52:	2f58      	cmp	r7, #88	; 0x58
 8006d54:	f000 80a3 	beq.w	8006e9e <_printf_i+0x16e>
 8006d58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006d60:	e03a      	b.n	8006dd8 <_printf_i+0xa8>
 8006d62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006d66:	2b15      	cmp	r3, #21
 8006d68:	d8f6      	bhi.n	8006d58 <_printf_i+0x28>
 8006d6a:	a101      	add	r1, pc, #4	; (adr r1, 8006d70 <_printf_i+0x40>)
 8006d6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006d70:	08006dc9 	.word	0x08006dc9
 8006d74:	08006ddd 	.word	0x08006ddd
 8006d78:	08006d59 	.word	0x08006d59
 8006d7c:	08006d59 	.word	0x08006d59
 8006d80:	08006d59 	.word	0x08006d59
 8006d84:	08006d59 	.word	0x08006d59
 8006d88:	08006ddd 	.word	0x08006ddd
 8006d8c:	08006d59 	.word	0x08006d59
 8006d90:	08006d59 	.word	0x08006d59
 8006d94:	08006d59 	.word	0x08006d59
 8006d98:	08006d59 	.word	0x08006d59
 8006d9c:	08006ee9 	.word	0x08006ee9
 8006da0:	08006e0d 	.word	0x08006e0d
 8006da4:	08006ecb 	.word	0x08006ecb
 8006da8:	08006d59 	.word	0x08006d59
 8006dac:	08006d59 	.word	0x08006d59
 8006db0:	08006f0b 	.word	0x08006f0b
 8006db4:	08006d59 	.word	0x08006d59
 8006db8:	08006e0d 	.word	0x08006e0d
 8006dbc:	08006d59 	.word	0x08006d59
 8006dc0:	08006d59 	.word	0x08006d59
 8006dc4:	08006ed3 	.word	0x08006ed3
 8006dc8:	682b      	ldr	r3, [r5, #0]
 8006dca:	1d1a      	adds	r2, r3, #4
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	602a      	str	r2, [r5, #0]
 8006dd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006dd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006dd8:	2301      	movs	r3, #1
 8006dda:	e0a3      	b.n	8006f24 <_printf_i+0x1f4>
 8006ddc:	6820      	ldr	r0, [r4, #0]
 8006dde:	6829      	ldr	r1, [r5, #0]
 8006de0:	0606      	lsls	r6, r0, #24
 8006de2:	f101 0304 	add.w	r3, r1, #4
 8006de6:	d50a      	bpl.n	8006dfe <_printf_i+0xce>
 8006de8:	680e      	ldr	r6, [r1, #0]
 8006dea:	602b      	str	r3, [r5, #0]
 8006dec:	2e00      	cmp	r6, #0
 8006dee:	da03      	bge.n	8006df8 <_printf_i+0xc8>
 8006df0:	232d      	movs	r3, #45	; 0x2d
 8006df2:	4276      	negs	r6, r6
 8006df4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006df8:	485e      	ldr	r0, [pc, #376]	; (8006f74 <_printf_i+0x244>)
 8006dfa:	230a      	movs	r3, #10
 8006dfc:	e019      	b.n	8006e32 <_printf_i+0x102>
 8006dfe:	680e      	ldr	r6, [r1, #0]
 8006e00:	602b      	str	r3, [r5, #0]
 8006e02:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006e06:	bf18      	it	ne
 8006e08:	b236      	sxthne	r6, r6
 8006e0a:	e7ef      	b.n	8006dec <_printf_i+0xbc>
 8006e0c:	682b      	ldr	r3, [r5, #0]
 8006e0e:	6820      	ldr	r0, [r4, #0]
 8006e10:	1d19      	adds	r1, r3, #4
 8006e12:	6029      	str	r1, [r5, #0]
 8006e14:	0601      	lsls	r1, r0, #24
 8006e16:	d501      	bpl.n	8006e1c <_printf_i+0xec>
 8006e18:	681e      	ldr	r6, [r3, #0]
 8006e1a:	e002      	b.n	8006e22 <_printf_i+0xf2>
 8006e1c:	0646      	lsls	r6, r0, #25
 8006e1e:	d5fb      	bpl.n	8006e18 <_printf_i+0xe8>
 8006e20:	881e      	ldrh	r6, [r3, #0]
 8006e22:	4854      	ldr	r0, [pc, #336]	; (8006f74 <_printf_i+0x244>)
 8006e24:	2f6f      	cmp	r7, #111	; 0x6f
 8006e26:	bf0c      	ite	eq
 8006e28:	2308      	moveq	r3, #8
 8006e2a:	230a      	movne	r3, #10
 8006e2c:	2100      	movs	r1, #0
 8006e2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006e32:	6865      	ldr	r5, [r4, #4]
 8006e34:	60a5      	str	r5, [r4, #8]
 8006e36:	2d00      	cmp	r5, #0
 8006e38:	bfa2      	ittt	ge
 8006e3a:	6821      	ldrge	r1, [r4, #0]
 8006e3c:	f021 0104 	bicge.w	r1, r1, #4
 8006e40:	6021      	strge	r1, [r4, #0]
 8006e42:	b90e      	cbnz	r6, 8006e48 <_printf_i+0x118>
 8006e44:	2d00      	cmp	r5, #0
 8006e46:	d04d      	beq.n	8006ee4 <_printf_i+0x1b4>
 8006e48:	4615      	mov	r5, r2
 8006e4a:	fbb6 f1f3 	udiv	r1, r6, r3
 8006e4e:	fb03 6711 	mls	r7, r3, r1, r6
 8006e52:	5dc7      	ldrb	r7, [r0, r7]
 8006e54:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006e58:	4637      	mov	r7, r6
 8006e5a:	42bb      	cmp	r3, r7
 8006e5c:	460e      	mov	r6, r1
 8006e5e:	d9f4      	bls.n	8006e4a <_printf_i+0x11a>
 8006e60:	2b08      	cmp	r3, #8
 8006e62:	d10b      	bne.n	8006e7c <_printf_i+0x14c>
 8006e64:	6823      	ldr	r3, [r4, #0]
 8006e66:	07de      	lsls	r6, r3, #31
 8006e68:	d508      	bpl.n	8006e7c <_printf_i+0x14c>
 8006e6a:	6923      	ldr	r3, [r4, #16]
 8006e6c:	6861      	ldr	r1, [r4, #4]
 8006e6e:	4299      	cmp	r1, r3
 8006e70:	bfde      	ittt	le
 8006e72:	2330      	movle	r3, #48	; 0x30
 8006e74:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006e78:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006e7c:	1b52      	subs	r2, r2, r5
 8006e7e:	6122      	str	r2, [r4, #16]
 8006e80:	f8cd a000 	str.w	sl, [sp]
 8006e84:	464b      	mov	r3, r9
 8006e86:	aa03      	add	r2, sp, #12
 8006e88:	4621      	mov	r1, r4
 8006e8a:	4640      	mov	r0, r8
 8006e8c:	f7ff fee2 	bl	8006c54 <_printf_common>
 8006e90:	3001      	adds	r0, #1
 8006e92:	d14c      	bne.n	8006f2e <_printf_i+0x1fe>
 8006e94:	f04f 30ff 	mov.w	r0, #4294967295
 8006e98:	b004      	add	sp, #16
 8006e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e9e:	4835      	ldr	r0, [pc, #212]	; (8006f74 <_printf_i+0x244>)
 8006ea0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006ea4:	6829      	ldr	r1, [r5, #0]
 8006ea6:	6823      	ldr	r3, [r4, #0]
 8006ea8:	f851 6b04 	ldr.w	r6, [r1], #4
 8006eac:	6029      	str	r1, [r5, #0]
 8006eae:	061d      	lsls	r5, r3, #24
 8006eb0:	d514      	bpl.n	8006edc <_printf_i+0x1ac>
 8006eb2:	07df      	lsls	r7, r3, #31
 8006eb4:	bf44      	itt	mi
 8006eb6:	f043 0320 	orrmi.w	r3, r3, #32
 8006eba:	6023      	strmi	r3, [r4, #0]
 8006ebc:	b91e      	cbnz	r6, 8006ec6 <_printf_i+0x196>
 8006ebe:	6823      	ldr	r3, [r4, #0]
 8006ec0:	f023 0320 	bic.w	r3, r3, #32
 8006ec4:	6023      	str	r3, [r4, #0]
 8006ec6:	2310      	movs	r3, #16
 8006ec8:	e7b0      	b.n	8006e2c <_printf_i+0xfc>
 8006eca:	6823      	ldr	r3, [r4, #0]
 8006ecc:	f043 0320 	orr.w	r3, r3, #32
 8006ed0:	6023      	str	r3, [r4, #0]
 8006ed2:	2378      	movs	r3, #120	; 0x78
 8006ed4:	4828      	ldr	r0, [pc, #160]	; (8006f78 <_printf_i+0x248>)
 8006ed6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006eda:	e7e3      	b.n	8006ea4 <_printf_i+0x174>
 8006edc:	0659      	lsls	r1, r3, #25
 8006ede:	bf48      	it	mi
 8006ee0:	b2b6      	uxthmi	r6, r6
 8006ee2:	e7e6      	b.n	8006eb2 <_printf_i+0x182>
 8006ee4:	4615      	mov	r5, r2
 8006ee6:	e7bb      	b.n	8006e60 <_printf_i+0x130>
 8006ee8:	682b      	ldr	r3, [r5, #0]
 8006eea:	6826      	ldr	r6, [r4, #0]
 8006eec:	6961      	ldr	r1, [r4, #20]
 8006eee:	1d18      	adds	r0, r3, #4
 8006ef0:	6028      	str	r0, [r5, #0]
 8006ef2:	0635      	lsls	r5, r6, #24
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	d501      	bpl.n	8006efc <_printf_i+0x1cc>
 8006ef8:	6019      	str	r1, [r3, #0]
 8006efa:	e002      	b.n	8006f02 <_printf_i+0x1d2>
 8006efc:	0670      	lsls	r0, r6, #25
 8006efe:	d5fb      	bpl.n	8006ef8 <_printf_i+0x1c8>
 8006f00:	8019      	strh	r1, [r3, #0]
 8006f02:	2300      	movs	r3, #0
 8006f04:	6123      	str	r3, [r4, #16]
 8006f06:	4615      	mov	r5, r2
 8006f08:	e7ba      	b.n	8006e80 <_printf_i+0x150>
 8006f0a:	682b      	ldr	r3, [r5, #0]
 8006f0c:	1d1a      	adds	r2, r3, #4
 8006f0e:	602a      	str	r2, [r5, #0]
 8006f10:	681d      	ldr	r5, [r3, #0]
 8006f12:	6862      	ldr	r2, [r4, #4]
 8006f14:	2100      	movs	r1, #0
 8006f16:	4628      	mov	r0, r5
 8006f18:	f7f9 f962 	bl	80001e0 <memchr>
 8006f1c:	b108      	cbz	r0, 8006f22 <_printf_i+0x1f2>
 8006f1e:	1b40      	subs	r0, r0, r5
 8006f20:	6060      	str	r0, [r4, #4]
 8006f22:	6863      	ldr	r3, [r4, #4]
 8006f24:	6123      	str	r3, [r4, #16]
 8006f26:	2300      	movs	r3, #0
 8006f28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f2c:	e7a8      	b.n	8006e80 <_printf_i+0x150>
 8006f2e:	6923      	ldr	r3, [r4, #16]
 8006f30:	462a      	mov	r2, r5
 8006f32:	4649      	mov	r1, r9
 8006f34:	4640      	mov	r0, r8
 8006f36:	47d0      	blx	sl
 8006f38:	3001      	adds	r0, #1
 8006f3a:	d0ab      	beq.n	8006e94 <_printf_i+0x164>
 8006f3c:	6823      	ldr	r3, [r4, #0]
 8006f3e:	079b      	lsls	r3, r3, #30
 8006f40:	d413      	bmi.n	8006f6a <_printf_i+0x23a>
 8006f42:	68e0      	ldr	r0, [r4, #12]
 8006f44:	9b03      	ldr	r3, [sp, #12]
 8006f46:	4298      	cmp	r0, r3
 8006f48:	bfb8      	it	lt
 8006f4a:	4618      	movlt	r0, r3
 8006f4c:	e7a4      	b.n	8006e98 <_printf_i+0x168>
 8006f4e:	2301      	movs	r3, #1
 8006f50:	4632      	mov	r2, r6
 8006f52:	4649      	mov	r1, r9
 8006f54:	4640      	mov	r0, r8
 8006f56:	47d0      	blx	sl
 8006f58:	3001      	adds	r0, #1
 8006f5a:	d09b      	beq.n	8006e94 <_printf_i+0x164>
 8006f5c:	3501      	adds	r5, #1
 8006f5e:	68e3      	ldr	r3, [r4, #12]
 8006f60:	9903      	ldr	r1, [sp, #12]
 8006f62:	1a5b      	subs	r3, r3, r1
 8006f64:	42ab      	cmp	r3, r5
 8006f66:	dcf2      	bgt.n	8006f4e <_printf_i+0x21e>
 8006f68:	e7eb      	b.n	8006f42 <_printf_i+0x212>
 8006f6a:	2500      	movs	r5, #0
 8006f6c:	f104 0619 	add.w	r6, r4, #25
 8006f70:	e7f5      	b.n	8006f5e <_printf_i+0x22e>
 8006f72:	bf00      	nop
 8006f74:	0800964a 	.word	0x0800964a
 8006f78:	0800965b 	.word	0x0800965b

08006f7c <iprintf>:
 8006f7c:	b40f      	push	{r0, r1, r2, r3}
 8006f7e:	4b0a      	ldr	r3, [pc, #40]	; (8006fa8 <iprintf+0x2c>)
 8006f80:	b513      	push	{r0, r1, r4, lr}
 8006f82:	681c      	ldr	r4, [r3, #0]
 8006f84:	b124      	cbz	r4, 8006f90 <iprintf+0x14>
 8006f86:	69a3      	ldr	r3, [r4, #24]
 8006f88:	b913      	cbnz	r3, 8006f90 <iprintf+0x14>
 8006f8a:	4620      	mov	r0, r4
 8006f8c:	f001 f8d8 	bl	8008140 <__sinit>
 8006f90:	ab05      	add	r3, sp, #20
 8006f92:	9a04      	ldr	r2, [sp, #16]
 8006f94:	68a1      	ldr	r1, [r4, #8]
 8006f96:	9301      	str	r3, [sp, #4]
 8006f98:	4620      	mov	r0, r4
 8006f9a:	f001 fe95 	bl	8008cc8 <_vfiprintf_r>
 8006f9e:	b002      	add	sp, #8
 8006fa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fa4:	b004      	add	sp, #16
 8006fa6:	4770      	bx	lr
 8006fa8:	2000000c 	.word	0x2000000c

08006fac <_puts_r>:
 8006fac:	b570      	push	{r4, r5, r6, lr}
 8006fae:	460e      	mov	r6, r1
 8006fb0:	4605      	mov	r5, r0
 8006fb2:	b118      	cbz	r0, 8006fbc <_puts_r+0x10>
 8006fb4:	6983      	ldr	r3, [r0, #24]
 8006fb6:	b90b      	cbnz	r3, 8006fbc <_puts_r+0x10>
 8006fb8:	f001 f8c2 	bl	8008140 <__sinit>
 8006fbc:	69ab      	ldr	r3, [r5, #24]
 8006fbe:	68ac      	ldr	r4, [r5, #8]
 8006fc0:	b913      	cbnz	r3, 8006fc8 <_puts_r+0x1c>
 8006fc2:	4628      	mov	r0, r5
 8006fc4:	f001 f8bc 	bl	8008140 <__sinit>
 8006fc8:	4b2c      	ldr	r3, [pc, #176]	; (800707c <_puts_r+0xd0>)
 8006fca:	429c      	cmp	r4, r3
 8006fcc:	d120      	bne.n	8007010 <_puts_r+0x64>
 8006fce:	686c      	ldr	r4, [r5, #4]
 8006fd0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006fd2:	07db      	lsls	r3, r3, #31
 8006fd4:	d405      	bmi.n	8006fe2 <_puts_r+0x36>
 8006fd6:	89a3      	ldrh	r3, [r4, #12]
 8006fd8:	0598      	lsls	r0, r3, #22
 8006fda:	d402      	bmi.n	8006fe2 <_puts_r+0x36>
 8006fdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006fde:	f001 f952 	bl	8008286 <__retarget_lock_acquire_recursive>
 8006fe2:	89a3      	ldrh	r3, [r4, #12]
 8006fe4:	0719      	lsls	r1, r3, #28
 8006fe6:	d51d      	bpl.n	8007024 <_puts_r+0x78>
 8006fe8:	6923      	ldr	r3, [r4, #16]
 8006fea:	b1db      	cbz	r3, 8007024 <_puts_r+0x78>
 8006fec:	3e01      	subs	r6, #1
 8006fee:	68a3      	ldr	r3, [r4, #8]
 8006ff0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006ff4:	3b01      	subs	r3, #1
 8006ff6:	60a3      	str	r3, [r4, #8]
 8006ff8:	bb39      	cbnz	r1, 800704a <_puts_r+0x9e>
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	da38      	bge.n	8007070 <_puts_r+0xc4>
 8006ffe:	4622      	mov	r2, r4
 8007000:	210a      	movs	r1, #10
 8007002:	4628      	mov	r0, r5
 8007004:	f000 f848 	bl	8007098 <__swbuf_r>
 8007008:	3001      	adds	r0, #1
 800700a:	d011      	beq.n	8007030 <_puts_r+0x84>
 800700c:	250a      	movs	r5, #10
 800700e:	e011      	b.n	8007034 <_puts_r+0x88>
 8007010:	4b1b      	ldr	r3, [pc, #108]	; (8007080 <_puts_r+0xd4>)
 8007012:	429c      	cmp	r4, r3
 8007014:	d101      	bne.n	800701a <_puts_r+0x6e>
 8007016:	68ac      	ldr	r4, [r5, #8]
 8007018:	e7da      	b.n	8006fd0 <_puts_r+0x24>
 800701a:	4b1a      	ldr	r3, [pc, #104]	; (8007084 <_puts_r+0xd8>)
 800701c:	429c      	cmp	r4, r3
 800701e:	bf08      	it	eq
 8007020:	68ec      	ldreq	r4, [r5, #12]
 8007022:	e7d5      	b.n	8006fd0 <_puts_r+0x24>
 8007024:	4621      	mov	r1, r4
 8007026:	4628      	mov	r0, r5
 8007028:	f000 f888 	bl	800713c <__swsetup_r>
 800702c:	2800      	cmp	r0, #0
 800702e:	d0dd      	beq.n	8006fec <_puts_r+0x40>
 8007030:	f04f 35ff 	mov.w	r5, #4294967295
 8007034:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007036:	07da      	lsls	r2, r3, #31
 8007038:	d405      	bmi.n	8007046 <_puts_r+0x9a>
 800703a:	89a3      	ldrh	r3, [r4, #12]
 800703c:	059b      	lsls	r3, r3, #22
 800703e:	d402      	bmi.n	8007046 <_puts_r+0x9a>
 8007040:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007042:	f001 f921 	bl	8008288 <__retarget_lock_release_recursive>
 8007046:	4628      	mov	r0, r5
 8007048:	bd70      	pop	{r4, r5, r6, pc}
 800704a:	2b00      	cmp	r3, #0
 800704c:	da04      	bge.n	8007058 <_puts_r+0xac>
 800704e:	69a2      	ldr	r2, [r4, #24]
 8007050:	429a      	cmp	r2, r3
 8007052:	dc06      	bgt.n	8007062 <_puts_r+0xb6>
 8007054:	290a      	cmp	r1, #10
 8007056:	d004      	beq.n	8007062 <_puts_r+0xb6>
 8007058:	6823      	ldr	r3, [r4, #0]
 800705a:	1c5a      	adds	r2, r3, #1
 800705c:	6022      	str	r2, [r4, #0]
 800705e:	7019      	strb	r1, [r3, #0]
 8007060:	e7c5      	b.n	8006fee <_puts_r+0x42>
 8007062:	4622      	mov	r2, r4
 8007064:	4628      	mov	r0, r5
 8007066:	f000 f817 	bl	8007098 <__swbuf_r>
 800706a:	3001      	adds	r0, #1
 800706c:	d1bf      	bne.n	8006fee <_puts_r+0x42>
 800706e:	e7df      	b.n	8007030 <_puts_r+0x84>
 8007070:	6823      	ldr	r3, [r4, #0]
 8007072:	250a      	movs	r5, #10
 8007074:	1c5a      	adds	r2, r3, #1
 8007076:	6022      	str	r2, [r4, #0]
 8007078:	701d      	strb	r5, [r3, #0]
 800707a:	e7db      	b.n	8007034 <_puts_r+0x88>
 800707c:	0800971c 	.word	0x0800971c
 8007080:	0800973c 	.word	0x0800973c
 8007084:	080096fc 	.word	0x080096fc

08007088 <puts>:
 8007088:	4b02      	ldr	r3, [pc, #8]	; (8007094 <puts+0xc>)
 800708a:	4601      	mov	r1, r0
 800708c:	6818      	ldr	r0, [r3, #0]
 800708e:	f7ff bf8d 	b.w	8006fac <_puts_r>
 8007092:	bf00      	nop
 8007094:	2000000c 	.word	0x2000000c

08007098 <__swbuf_r>:
 8007098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800709a:	460e      	mov	r6, r1
 800709c:	4614      	mov	r4, r2
 800709e:	4605      	mov	r5, r0
 80070a0:	b118      	cbz	r0, 80070aa <__swbuf_r+0x12>
 80070a2:	6983      	ldr	r3, [r0, #24]
 80070a4:	b90b      	cbnz	r3, 80070aa <__swbuf_r+0x12>
 80070a6:	f001 f84b 	bl	8008140 <__sinit>
 80070aa:	4b21      	ldr	r3, [pc, #132]	; (8007130 <__swbuf_r+0x98>)
 80070ac:	429c      	cmp	r4, r3
 80070ae:	d12b      	bne.n	8007108 <__swbuf_r+0x70>
 80070b0:	686c      	ldr	r4, [r5, #4]
 80070b2:	69a3      	ldr	r3, [r4, #24]
 80070b4:	60a3      	str	r3, [r4, #8]
 80070b6:	89a3      	ldrh	r3, [r4, #12]
 80070b8:	071a      	lsls	r2, r3, #28
 80070ba:	d52f      	bpl.n	800711c <__swbuf_r+0x84>
 80070bc:	6923      	ldr	r3, [r4, #16]
 80070be:	b36b      	cbz	r3, 800711c <__swbuf_r+0x84>
 80070c0:	6923      	ldr	r3, [r4, #16]
 80070c2:	6820      	ldr	r0, [r4, #0]
 80070c4:	1ac0      	subs	r0, r0, r3
 80070c6:	6963      	ldr	r3, [r4, #20]
 80070c8:	b2f6      	uxtb	r6, r6
 80070ca:	4283      	cmp	r3, r0
 80070cc:	4637      	mov	r7, r6
 80070ce:	dc04      	bgt.n	80070da <__swbuf_r+0x42>
 80070d0:	4621      	mov	r1, r4
 80070d2:	4628      	mov	r0, r5
 80070d4:	f000 ffa0 	bl	8008018 <_fflush_r>
 80070d8:	bb30      	cbnz	r0, 8007128 <__swbuf_r+0x90>
 80070da:	68a3      	ldr	r3, [r4, #8]
 80070dc:	3b01      	subs	r3, #1
 80070de:	60a3      	str	r3, [r4, #8]
 80070e0:	6823      	ldr	r3, [r4, #0]
 80070e2:	1c5a      	adds	r2, r3, #1
 80070e4:	6022      	str	r2, [r4, #0]
 80070e6:	701e      	strb	r6, [r3, #0]
 80070e8:	6963      	ldr	r3, [r4, #20]
 80070ea:	3001      	adds	r0, #1
 80070ec:	4283      	cmp	r3, r0
 80070ee:	d004      	beq.n	80070fa <__swbuf_r+0x62>
 80070f0:	89a3      	ldrh	r3, [r4, #12]
 80070f2:	07db      	lsls	r3, r3, #31
 80070f4:	d506      	bpl.n	8007104 <__swbuf_r+0x6c>
 80070f6:	2e0a      	cmp	r6, #10
 80070f8:	d104      	bne.n	8007104 <__swbuf_r+0x6c>
 80070fa:	4621      	mov	r1, r4
 80070fc:	4628      	mov	r0, r5
 80070fe:	f000 ff8b 	bl	8008018 <_fflush_r>
 8007102:	b988      	cbnz	r0, 8007128 <__swbuf_r+0x90>
 8007104:	4638      	mov	r0, r7
 8007106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007108:	4b0a      	ldr	r3, [pc, #40]	; (8007134 <__swbuf_r+0x9c>)
 800710a:	429c      	cmp	r4, r3
 800710c:	d101      	bne.n	8007112 <__swbuf_r+0x7a>
 800710e:	68ac      	ldr	r4, [r5, #8]
 8007110:	e7cf      	b.n	80070b2 <__swbuf_r+0x1a>
 8007112:	4b09      	ldr	r3, [pc, #36]	; (8007138 <__swbuf_r+0xa0>)
 8007114:	429c      	cmp	r4, r3
 8007116:	bf08      	it	eq
 8007118:	68ec      	ldreq	r4, [r5, #12]
 800711a:	e7ca      	b.n	80070b2 <__swbuf_r+0x1a>
 800711c:	4621      	mov	r1, r4
 800711e:	4628      	mov	r0, r5
 8007120:	f000 f80c 	bl	800713c <__swsetup_r>
 8007124:	2800      	cmp	r0, #0
 8007126:	d0cb      	beq.n	80070c0 <__swbuf_r+0x28>
 8007128:	f04f 37ff 	mov.w	r7, #4294967295
 800712c:	e7ea      	b.n	8007104 <__swbuf_r+0x6c>
 800712e:	bf00      	nop
 8007130:	0800971c 	.word	0x0800971c
 8007134:	0800973c 	.word	0x0800973c
 8007138:	080096fc 	.word	0x080096fc

0800713c <__swsetup_r>:
 800713c:	4b32      	ldr	r3, [pc, #200]	; (8007208 <__swsetup_r+0xcc>)
 800713e:	b570      	push	{r4, r5, r6, lr}
 8007140:	681d      	ldr	r5, [r3, #0]
 8007142:	4606      	mov	r6, r0
 8007144:	460c      	mov	r4, r1
 8007146:	b125      	cbz	r5, 8007152 <__swsetup_r+0x16>
 8007148:	69ab      	ldr	r3, [r5, #24]
 800714a:	b913      	cbnz	r3, 8007152 <__swsetup_r+0x16>
 800714c:	4628      	mov	r0, r5
 800714e:	f000 fff7 	bl	8008140 <__sinit>
 8007152:	4b2e      	ldr	r3, [pc, #184]	; (800720c <__swsetup_r+0xd0>)
 8007154:	429c      	cmp	r4, r3
 8007156:	d10f      	bne.n	8007178 <__swsetup_r+0x3c>
 8007158:	686c      	ldr	r4, [r5, #4]
 800715a:	89a3      	ldrh	r3, [r4, #12]
 800715c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007160:	0719      	lsls	r1, r3, #28
 8007162:	d42c      	bmi.n	80071be <__swsetup_r+0x82>
 8007164:	06dd      	lsls	r5, r3, #27
 8007166:	d411      	bmi.n	800718c <__swsetup_r+0x50>
 8007168:	2309      	movs	r3, #9
 800716a:	6033      	str	r3, [r6, #0]
 800716c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007170:	81a3      	strh	r3, [r4, #12]
 8007172:	f04f 30ff 	mov.w	r0, #4294967295
 8007176:	e03e      	b.n	80071f6 <__swsetup_r+0xba>
 8007178:	4b25      	ldr	r3, [pc, #148]	; (8007210 <__swsetup_r+0xd4>)
 800717a:	429c      	cmp	r4, r3
 800717c:	d101      	bne.n	8007182 <__swsetup_r+0x46>
 800717e:	68ac      	ldr	r4, [r5, #8]
 8007180:	e7eb      	b.n	800715a <__swsetup_r+0x1e>
 8007182:	4b24      	ldr	r3, [pc, #144]	; (8007214 <__swsetup_r+0xd8>)
 8007184:	429c      	cmp	r4, r3
 8007186:	bf08      	it	eq
 8007188:	68ec      	ldreq	r4, [r5, #12]
 800718a:	e7e6      	b.n	800715a <__swsetup_r+0x1e>
 800718c:	0758      	lsls	r0, r3, #29
 800718e:	d512      	bpl.n	80071b6 <__swsetup_r+0x7a>
 8007190:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007192:	b141      	cbz	r1, 80071a6 <__swsetup_r+0x6a>
 8007194:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007198:	4299      	cmp	r1, r3
 800719a:	d002      	beq.n	80071a2 <__swsetup_r+0x66>
 800719c:	4630      	mov	r0, r6
 800719e:	f001 fc89 	bl	8008ab4 <_free_r>
 80071a2:	2300      	movs	r3, #0
 80071a4:	6363      	str	r3, [r4, #52]	; 0x34
 80071a6:	89a3      	ldrh	r3, [r4, #12]
 80071a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80071ac:	81a3      	strh	r3, [r4, #12]
 80071ae:	2300      	movs	r3, #0
 80071b0:	6063      	str	r3, [r4, #4]
 80071b2:	6923      	ldr	r3, [r4, #16]
 80071b4:	6023      	str	r3, [r4, #0]
 80071b6:	89a3      	ldrh	r3, [r4, #12]
 80071b8:	f043 0308 	orr.w	r3, r3, #8
 80071bc:	81a3      	strh	r3, [r4, #12]
 80071be:	6923      	ldr	r3, [r4, #16]
 80071c0:	b94b      	cbnz	r3, 80071d6 <__swsetup_r+0x9a>
 80071c2:	89a3      	ldrh	r3, [r4, #12]
 80071c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80071c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071cc:	d003      	beq.n	80071d6 <__swsetup_r+0x9a>
 80071ce:	4621      	mov	r1, r4
 80071d0:	4630      	mov	r0, r6
 80071d2:	f001 f87f 	bl	80082d4 <__smakebuf_r>
 80071d6:	89a0      	ldrh	r0, [r4, #12]
 80071d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80071dc:	f010 0301 	ands.w	r3, r0, #1
 80071e0:	d00a      	beq.n	80071f8 <__swsetup_r+0xbc>
 80071e2:	2300      	movs	r3, #0
 80071e4:	60a3      	str	r3, [r4, #8]
 80071e6:	6963      	ldr	r3, [r4, #20]
 80071e8:	425b      	negs	r3, r3
 80071ea:	61a3      	str	r3, [r4, #24]
 80071ec:	6923      	ldr	r3, [r4, #16]
 80071ee:	b943      	cbnz	r3, 8007202 <__swsetup_r+0xc6>
 80071f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80071f4:	d1ba      	bne.n	800716c <__swsetup_r+0x30>
 80071f6:	bd70      	pop	{r4, r5, r6, pc}
 80071f8:	0781      	lsls	r1, r0, #30
 80071fa:	bf58      	it	pl
 80071fc:	6963      	ldrpl	r3, [r4, #20]
 80071fe:	60a3      	str	r3, [r4, #8]
 8007200:	e7f4      	b.n	80071ec <__swsetup_r+0xb0>
 8007202:	2000      	movs	r0, #0
 8007204:	e7f7      	b.n	80071f6 <__swsetup_r+0xba>
 8007206:	bf00      	nop
 8007208:	2000000c 	.word	0x2000000c
 800720c:	0800971c 	.word	0x0800971c
 8007210:	0800973c 	.word	0x0800973c
 8007214:	080096fc 	.word	0x080096fc

08007218 <quorem>:
 8007218:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800721c:	6903      	ldr	r3, [r0, #16]
 800721e:	690c      	ldr	r4, [r1, #16]
 8007220:	42a3      	cmp	r3, r4
 8007222:	4607      	mov	r7, r0
 8007224:	f2c0 8081 	blt.w	800732a <quorem+0x112>
 8007228:	3c01      	subs	r4, #1
 800722a:	f101 0814 	add.w	r8, r1, #20
 800722e:	f100 0514 	add.w	r5, r0, #20
 8007232:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007236:	9301      	str	r3, [sp, #4]
 8007238:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800723c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007240:	3301      	adds	r3, #1
 8007242:	429a      	cmp	r2, r3
 8007244:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007248:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800724c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007250:	d331      	bcc.n	80072b6 <quorem+0x9e>
 8007252:	f04f 0e00 	mov.w	lr, #0
 8007256:	4640      	mov	r0, r8
 8007258:	46ac      	mov	ip, r5
 800725a:	46f2      	mov	sl, lr
 800725c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007260:	b293      	uxth	r3, r2
 8007262:	fb06 e303 	mla	r3, r6, r3, lr
 8007266:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800726a:	b29b      	uxth	r3, r3
 800726c:	ebaa 0303 	sub.w	r3, sl, r3
 8007270:	f8dc a000 	ldr.w	sl, [ip]
 8007274:	0c12      	lsrs	r2, r2, #16
 8007276:	fa13 f38a 	uxtah	r3, r3, sl
 800727a:	fb06 e202 	mla	r2, r6, r2, lr
 800727e:	9300      	str	r3, [sp, #0]
 8007280:	9b00      	ldr	r3, [sp, #0]
 8007282:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007286:	b292      	uxth	r2, r2
 8007288:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800728c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007290:	f8bd 3000 	ldrh.w	r3, [sp]
 8007294:	4581      	cmp	r9, r0
 8007296:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800729a:	f84c 3b04 	str.w	r3, [ip], #4
 800729e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80072a2:	d2db      	bcs.n	800725c <quorem+0x44>
 80072a4:	f855 300b 	ldr.w	r3, [r5, fp]
 80072a8:	b92b      	cbnz	r3, 80072b6 <quorem+0x9e>
 80072aa:	9b01      	ldr	r3, [sp, #4]
 80072ac:	3b04      	subs	r3, #4
 80072ae:	429d      	cmp	r5, r3
 80072b0:	461a      	mov	r2, r3
 80072b2:	d32e      	bcc.n	8007312 <quorem+0xfa>
 80072b4:	613c      	str	r4, [r7, #16]
 80072b6:	4638      	mov	r0, r7
 80072b8:	f001 fae4 	bl	8008884 <__mcmp>
 80072bc:	2800      	cmp	r0, #0
 80072be:	db24      	blt.n	800730a <quorem+0xf2>
 80072c0:	3601      	adds	r6, #1
 80072c2:	4628      	mov	r0, r5
 80072c4:	f04f 0c00 	mov.w	ip, #0
 80072c8:	f858 2b04 	ldr.w	r2, [r8], #4
 80072cc:	f8d0 e000 	ldr.w	lr, [r0]
 80072d0:	b293      	uxth	r3, r2
 80072d2:	ebac 0303 	sub.w	r3, ip, r3
 80072d6:	0c12      	lsrs	r2, r2, #16
 80072d8:	fa13 f38e 	uxtah	r3, r3, lr
 80072dc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80072e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80072e4:	b29b      	uxth	r3, r3
 80072e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80072ea:	45c1      	cmp	r9, r8
 80072ec:	f840 3b04 	str.w	r3, [r0], #4
 80072f0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80072f4:	d2e8      	bcs.n	80072c8 <quorem+0xb0>
 80072f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80072fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80072fe:	b922      	cbnz	r2, 800730a <quorem+0xf2>
 8007300:	3b04      	subs	r3, #4
 8007302:	429d      	cmp	r5, r3
 8007304:	461a      	mov	r2, r3
 8007306:	d30a      	bcc.n	800731e <quorem+0x106>
 8007308:	613c      	str	r4, [r7, #16]
 800730a:	4630      	mov	r0, r6
 800730c:	b003      	add	sp, #12
 800730e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007312:	6812      	ldr	r2, [r2, #0]
 8007314:	3b04      	subs	r3, #4
 8007316:	2a00      	cmp	r2, #0
 8007318:	d1cc      	bne.n	80072b4 <quorem+0x9c>
 800731a:	3c01      	subs	r4, #1
 800731c:	e7c7      	b.n	80072ae <quorem+0x96>
 800731e:	6812      	ldr	r2, [r2, #0]
 8007320:	3b04      	subs	r3, #4
 8007322:	2a00      	cmp	r2, #0
 8007324:	d1f0      	bne.n	8007308 <quorem+0xf0>
 8007326:	3c01      	subs	r4, #1
 8007328:	e7eb      	b.n	8007302 <quorem+0xea>
 800732a:	2000      	movs	r0, #0
 800732c:	e7ee      	b.n	800730c <quorem+0xf4>
	...

08007330 <_dtoa_r>:
 8007330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007334:	ed2d 8b04 	vpush	{d8-d9}
 8007338:	ec57 6b10 	vmov	r6, r7, d0
 800733c:	b093      	sub	sp, #76	; 0x4c
 800733e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007340:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007344:	9106      	str	r1, [sp, #24]
 8007346:	ee10 aa10 	vmov	sl, s0
 800734a:	4604      	mov	r4, r0
 800734c:	9209      	str	r2, [sp, #36]	; 0x24
 800734e:	930c      	str	r3, [sp, #48]	; 0x30
 8007350:	46bb      	mov	fp, r7
 8007352:	b975      	cbnz	r5, 8007372 <_dtoa_r+0x42>
 8007354:	2010      	movs	r0, #16
 8007356:	f000 fffd 	bl	8008354 <malloc>
 800735a:	4602      	mov	r2, r0
 800735c:	6260      	str	r0, [r4, #36]	; 0x24
 800735e:	b920      	cbnz	r0, 800736a <_dtoa_r+0x3a>
 8007360:	4ba7      	ldr	r3, [pc, #668]	; (8007600 <_dtoa_r+0x2d0>)
 8007362:	21ea      	movs	r1, #234	; 0xea
 8007364:	48a7      	ldr	r0, [pc, #668]	; (8007604 <_dtoa_r+0x2d4>)
 8007366:	f001 fe45 	bl	8008ff4 <__assert_func>
 800736a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800736e:	6005      	str	r5, [r0, #0]
 8007370:	60c5      	str	r5, [r0, #12]
 8007372:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007374:	6819      	ldr	r1, [r3, #0]
 8007376:	b151      	cbz	r1, 800738e <_dtoa_r+0x5e>
 8007378:	685a      	ldr	r2, [r3, #4]
 800737a:	604a      	str	r2, [r1, #4]
 800737c:	2301      	movs	r3, #1
 800737e:	4093      	lsls	r3, r2
 8007380:	608b      	str	r3, [r1, #8]
 8007382:	4620      	mov	r0, r4
 8007384:	f001 f83c 	bl	8008400 <_Bfree>
 8007388:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800738a:	2200      	movs	r2, #0
 800738c:	601a      	str	r2, [r3, #0]
 800738e:	1e3b      	subs	r3, r7, #0
 8007390:	bfaa      	itet	ge
 8007392:	2300      	movge	r3, #0
 8007394:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007398:	f8c8 3000 	strge.w	r3, [r8]
 800739c:	4b9a      	ldr	r3, [pc, #616]	; (8007608 <_dtoa_r+0x2d8>)
 800739e:	bfbc      	itt	lt
 80073a0:	2201      	movlt	r2, #1
 80073a2:	f8c8 2000 	strlt.w	r2, [r8]
 80073a6:	ea33 030b 	bics.w	r3, r3, fp
 80073aa:	d11b      	bne.n	80073e4 <_dtoa_r+0xb4>
 80073ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80073ae:	f242 730f 	movw	r3, #9999	; 0x270f
 80073b2:	6013      	str	r3, [r2, #0]
 80073b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80073b8:	4333      	orrs	r3, r6
 80073ba:	f000 8592 	beq.w	8007ee2 <_dtoa_r+0xbb2>
 80073be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80073c0:	b963      	cbnz	r3, 80073dc <_dtoa_r+0xac>
 80073c2:	4b92      	ldr	r3, [pc, #584]	; (800760c <_dtoa_r+0x2dc>)
 80073c4:	e022      	b.n	800740c <_dtoa_r+0xdc>
 80073c6:	4b92      	ldr	r3, [pc, #584]	; (8007610 <_dtoa_r+0x2e0>)
 80073c8:	9301      	str	r3, [sp, #4]
 80073ca:	3308      	adds	r3, #8
 80073cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80073ce:	6013      	str	r3, [r2, #0]
 80073d0:	9801      	ldr	r0, [sp, #4]
 80073d2:	b013      	add	sp, #76	; 0x4c
 80073d4:	ecbd 8b04 	vpop	{d8-d9}
 80073d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073dc:	4b8b      	ldr	r3, [pc, #556]	; (800760c <_dtoa_r+0x2dc>)
 80073de:	9301      	str	r3, [sp, #4]
 80073e0:	3303      	adds	r3, #3
 80073e2:	e7f3      	b.n	80073cc <_dtoa_r+0x9c>
 80073e4:	2200      	movs	r2, #0
 80073e6:	2300      	movs	r3, #0
 80073e8:	4650      	mov	r0, sl
 80073ea:	4659      	mov	r1, fp
 80073ec:	f7f9 fb6c 	bl	8000ac8 <__aeabi_dcmpeq>
 80073f0:	ec4b ab19 	vmov	d9, sl, fp
 80073f4:	4680      	mov	r8, r0
 80073f6:	b158      	cbz	r0, 8007410 <_dtoa_r+0xe0>
 80073f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80073fa:	2301      	movs	r3, #1
 80073fc:	6013      	str	r3, [r2, #0]
 80073fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007400:	2b00      	cmp	r3, #0
 8007402:	f000 856b 	beq.w	8007edc <_dtoa_r+0xbac>
 8007406:	4883      	ldr	r0, [pc, #524]	; (8007614 <_dtoa_r+0x2e4>)
 8007408:	6018      	str	r0, [r3, #0]
 800740a:	1e43      	subs	r3, r0, #1
 800740c:	9301      	str	r3, [sp, #4]
 800740e:	e7df      	b.n	80073d0 <_dtoa_r+0xa0>
 8007410:	ec4b ab10 	vmov	d0, sl, fp
 8007414:	aa10      	add	r2, sp, #64	; 0x40
 8007416:	a911      	add	r1, sp, #68	; 0x44
 8007418:	4620      	mov	r0, r4
 800741a:	f001 fad9 	bl	80089d0 <__d2b>
 800741e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007422:	ee08 0a10 	vmov	s16, r0
 8007426:	2d00      	cmp	r5, #0
 8007428:	f000 8084 	beq.w	8007534 <_dtoa_r+0x204>
 800742c:	ee19 3a90 	vmov	r3, s19
 8007430:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007434:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007438:	4656      	mov	r6, sl
 800743a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800743e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007442:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007446:	4b74      	ldr	r3, [pc, #464]	; (8007618 <_dtoa_r+0x2e8>)
 8007448:	2200      	movs	r2, #0
 800744a:	4630      	mov	r0, r6
 800744c:	4639      	mov	r1, r7
 800744e:	f7f8 ff1b 	bl	8000288 <__aeabi_dsub>
 8007452:	a365      	add	r3, pc, #404	; (adr r3, 80075e8 <_dtoa_r+0x2b8>)
 8007454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007458:	f7f9 f8ce 	bl	80005f8 <__aeabi_dmul>
 800745c:	a364      	add	r3, pc, #400	; (adr r3, 80075f0 <_dtoa_r+0x2c0>)
 800745e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007462:	f7f8 ff13 	bl	800028c <__adddf3>
 8007466:	4606      	mov	r6, r0
 8007468:	4628      	mov	r0, r5
 800746a:	460f      	mov	r7, r1
 800746c:	f7f9 f85a 	bl	8000524 <__aeabi_i2d>
 8007470:	a361      	add	r3, pc, #388	; (adr r3, 80075f8 <_dtoa_r+0x2c8>)
 8007472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007476:	f7f9 f8bf 	bl	80005f8 <__aeabi_dmul>
 800747a:	4602      	mov	r2, r0
 800747c:	460b      	mov	r3, r1
 800747e:	4630      	mov	r0, r6
 8007480:	4639      	mov	r1, r7
 8007482:	f7f8 ff03 	bl	800028c <__adddf3>
 8007486:	4606      	mov	r6, r0
 8007488:	460f      	mov	r7, r1
 800748a:	f7f9 fb65 	bl	8000b58 <__aeabi_d2iz>
 800748e:	2200      	movs	r2, #0
 8007490:	9000      	str	r0, [sp, #0]
 8007492:	2300      	movs	r3, #0
 8007494:	4630      	mov	r0, r6
 8007496:	4639      	mov	r1, r7
 8007498:	f7f9 fb20 	bl	8000adc <__aeabi_dcmplt>
 800749c:	b150      	cbz	r0, 80074b4 <_dtoa_r+0x184>
 800749e:	9800      	ldr	r0, [sp, #0]
 80074a0:	f7f9 f840 	bl	8000524 <__aeabi_i2d>
 80074a4:	4632      	mov	r2, r6
 80074a6:	463b      	mov	r3, r7
 80074a8:	f7f9 fb0e 	bl	8000ac8 <__aeabi_dcmpeq>
 80074ac:	b910      	cbnz	r0, 80074b4 <_dtoa_r+0x184>
 80074ae:	9b00      	ldr	r3, [sp, #0]
 80074b0:	3b01      	subs	r3, #1
 80074b2:	9300      	str	r3, [sp, #0]
 80074b4:	9b00      	ldr	r3, [sp, #0]
 80074b6:	2b16      	cmp	r3, #22
 80074b8:	d85a      	bhi.n	8007570 <_dtoa_r+0x240>
 80074ba:	9a00      	ldr	r2, [sp, #0]
 80074bc:	4b57      	ldr	r3, [pc, #348]	; (800761c <_dtoa_r+0x2ec>)
 80074be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80074c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074c6:	ec51 0b19 	vmov	r0, r1, d9
 80074ca:	f7f9 fb07 	bl	8000adc <__aeabi_dcmplt>
 80074ce:	2800      	cmp	r0, #0
 80074d0:	d050      	beq.n	8007574 <_dtoa_r+0x244>
 80074d2:	9b00      	ldr	r3, [sp, #0]
 80074d4:	3b01      	subs	r3, #1
 80074d6:	9300      	str	r3, [sp, #0]
 80074d8:	2300      	movs	r3, #0
 80074da:	930b      	str	r3, [sp, #44]	; 0x2c
 80074dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80074de:	1b5d      	subs	r5, r3, r5
 80074e0:	1e6b      	subs	r3, r5, #1
 80074e2:	9305      	str	r3, [sp, #20]
 80074e4:	bf45      	ittet	mi
 80074e6:	f1c5 0301 	rsbmi	r3, r5, #1
 80074ea:	9304      	strmi	r3, [sp, #16]
 80074ec:	2300      	movpl	r3, #0
 80074ee:	2300      	movmi	r3, #0
 80074f0:	bf4c      	ite	mi
 80074f2:	9305      	strmi	r3, [sp, #20]
 80074f4:	9304      	strpl	r3, [sp, #16]
 80074f6:	9b00      	ldr	r3, [sp, #0]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	db3d      	blt.n	8007578 <_dtoa_r+0x248>
 80074fc:	9b05      	ldr	r3, [sp, #20]
 80074fe:	9a00      	ldr	r2, [sp, #0]
 8007500:	920a      	str	r2, [sp, #40]	; 0x28
 8007502:	4413      	add	r3, r2
 8007504:	9305      	str	r3, [sp, #20]
 8007506:	2300      	movs	r3, #0
 8007508:	9307      	str	r3, [sp, #28]
 800750a:	9b06      	ldr	r3, [sp, #24]
 800750c:	2b09      	cmp	r3, #9
 800750e:	f200 8089 	bhi.w	8007624 <_dtoa_r+0x2f4>
 8007512:	2b05      	cmp	r3, #5
 8007514:	bfc4      	itt	gt
 8007516:	3b04      	subgt	r3, #4
 8007518:	9306      	strgt	r3, [sp, #24]
 800751a:	9b06      	ldr	r3, [sp, #24]
 800751c:	f1a3 0302 	sub.w	r3, r3, #2
 8007520:	bfcc      	ite	gt
 8007522:	2500      	movgt	r5, #0
 8007524:	2501      	movle	r5, #1
 8007526:	2b03      	cmp	r3, #3
 8007528:	f200 8087 	bhi.w	800763a <_dtoa_r+0x30a>
 800752c:	e8df f003 	tbb	[pc, r3]
 8007530:	59383a2d 	.word	0x59383a2d
 8007534:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007538:	441d      	add	r5, r3
 800753a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800753e:	2b20      	cmp	r3, #32
 8007540:	bfc1      	itttt	gt
 8007542:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007546:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800754a:	fa0b f303 	lslgt.w	r3, fp, r3
 800754e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007552:	bfda      	itte	le
 8007554:	f1c3 0320 	rsble	r3, r3, #32
 8007558:	fa06 f003 	lslle.w	r0, r6, r3
 800755c:	4318      	orrgt	r0, r3
 800755e:	f7f8 ffd1 	bl	8000504 <__aeabi_ui2d>
 8007562:	2301      	movs	r3, #1
 8007564:	4606      	mov	r6, r0
 8007566:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800756a:	3d01      	subs	r5, #1
 800756c:	930e      	str	r3, [sp, #56]	; 0x38
 800756e:	e76a      	b.n	8007446 <_dtoa_r+0x116>
 8007570:	2301      	movs	r3, #1
 8007572:	e7b2      	b.n	80074da <_dtoa_r+0x1aa>
 8007574:	900b      	str	r0, [sp, #44]	; 0x2c
 8007576:	e7b1      	b.n	80074dc <_dtoa_r+0x1ac>
 8007578:	9b04      	ldr	r3, [sp, #16]
 800757a:	9a00      	ldr	r2, [sp, #0]
 800757c:	1a9b      	subs	r3, r3, r2
 800757e:	9304      	str	r3, [sp, #16]
 8007580:	4253      	negs	r3, r2
 8007582:	9307      	str	r3, [sp, #28]
 8007584:	2300      	movs	r3, #0
 8007586:	930a      	str	r3, [sp, #40]	; 0x28
 8007588:	e7bf      	b.n	800750a <_dtoa_r+0x1da>
 800758a:	2300      	movs	r3, #0
 800758c:	9308      	str	r3, [sp, #32]
 800758e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007590:	2b00      	cmp	r3, #0
 8007592:	dc55      	bgt.n	8007640 <_dtoa_r+0x310>
 8007594:	2301      	movs	r3, #1
 8007596:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800759a:	461a      	mov	r2, r3
 800759c:	9209      	str	r2, [sp, #36]	; 0x24
 800759e:	e00c      	b.n	80075ba <_dtoa_r+0x28a>
 80075a0:	2301      	movs	r3, #1
 80075a2:	e7f3      	b.n	800758c <_dtoa_r+0x25c>
 80075a4:	2300      	movs	r3, #0
 80075a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80075a8:	9308      	str	r3, [sp, #32]
 80075aa:	9b00      	ldr	r3, [sp, #0]
 80075ac:	4413      	add	r3, r2
 80075ae:	9302      	str	r3, [sp, #8]
 80075b0:	3301      	adds	r3, #1
 80075b2:	2b01      	cmp	r3, #1
 80075b4:	9303      	str	r3, [sp, #12]
 80075b6:	bfb8      	it	lt
 80075b8:	2301      	movlt	r3, #1
 80075ba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80075bc:	2200      	movs	r2, #0
 80075be:	6042      	str	r2, [r0, #4]
 80075c0:	2204      	movs	r2, #4
 80075c2:	f102 0614 	add.w	r6, r2, #20
 80075c6:	429e      	cmp	r6, r3
 80075c8:	6841      	ldr	r1, [r0, #4]
 80075ca:	d93d      	bls.n	8007648 <_dtoa_r+0x318>
 80075cc:	4620      	mov	r0, r4
 80075ce:	f000 fed7 	bl	8008380 <_Balloc>
 80075d2:	9001      	str	r0, [sp, #4]
 80075d4:	2800      	cmp	r0, #0
 80075d6:	d13b      	bne.n	8007650 <_dtoa_r+0x320>
 80075d8:	4b11      	ldr	r3, [pc, #68]	; (8007620 <_dtoa_r+0x2f0>)
 80075da:	4602      	mov	r2, r0
 80075dc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80075e0:	e6c0      	b.n	8007364 <_dtoa_r+0x34>
 80075e2:	2301      	movs	r3, #1
 80075e4:	e7df      	b.n	80075a6 <_dtoa_r+0x276>
 80075e6:	bf00      	nop
 80075e8:	636f4361 	.word	0x636f4361
 80075ec:	3fd287a7 	.word	0x3fd287a7
 80075f0:	8b60c8b3 	.word	0x8b60c8b3
 80075f4:	3fc68a28 	.word	0x3fc68a28
 80075f8:	509f79fb 	.word	0x509f79fb
 80075fc:	3fd34413 	.word	0x3fd34413
 8007600:	08009679 	.word	0x08009679
 8007604:	08009690 	.word	0x08009690
 8007608:	7ff00000 	.word	0x7ff00000
 800760c:	08009675 	.word	0x08009675
 8007610:	0800966c 	.word	0x0800966c
 8007614:	08009649 	.word	0x08009649
 8007618:	3ff80000 	.word	0x3ff80000
 800761c:	080097e0 	.word	0x080097e0
 8007620:	080096eb 	.word	0x080096eb
 8007624:	2501      	movs	r5, #1
 8007626:	2300      	movs	r3, #0
 8007628:	9306      	str	r3, [sp, #24]
 800762a:	9508      	str	r5, [sp, #32]
 800762c:	f04f 33ff 	mov.w	r3, #4294967295
 8007630:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007634:	2200      	movs	r2, #0
 8007636:	2312      	movs	r3, #18
 8007638:	e7b0      	b.n	800759c <_dtoa_r+0x26c>
 800763a:	2301      	movs	r3, #1
 800763c:	9308      	str	r3, [sp, #32]
 800763e:	e7f5      	b.n	800762c <_dtoa_r+0x2fc>
 8007640:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007642:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007646:	e7b8      	b.n	80075ba <_dtoa_r+0x28a>
 8007648:	3101      	adds	r1, #1
 800764a:	6041      	str	r1, [r0, #4]
 800764c:	0052      	lsls	r2, r2, #1
 800764e:	e7b8      	b.n	80075c2 <_dtoa_r+0x292>
 8007650:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007652:	9a01      	ldr	r2, [sp, #4]
 8007654:	601a      	str	r2, [r3, #0]
 8007656:	9b03      	ldr	r3, [sp, #12]
 8007658:	2b0e      	cmp	r3, #14
 800765a:	f200 809d 	bhi.w	8007798 <_dtoa_r+0x468>
 800765e:	2d00      	cmp	r5, #0
 8007660:	f000 809a 	beq.w	8007798 <_dtoa_r+0x468>
 8007664:	9b00      	ldr	r3, [sp, #0]
 8007666:	2b00      	cmp	r3, #0
 8007668:	dd32      	ble.n	80076d0 <_dtoa_r+0x3a0>
 800766a:	4ab7      	ldr	r2, [pc, #732]	; (8007948 <_dtoa_r+0x618>)
 800766c:	f003 030f 	and.w	r3, r3, #15
 8007670:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007674:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007678:	9b00      	ldr	r3, [sp, #0]
 800767a:	05d8      	lsls	r0, r3, #23
 800767c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007680:	d516      	bpl.n	80076b0 <_dtoa_r+0x380>
 8007682:	4bb2      	ldr	r3, [pc, #712]	; (800794c <_dtoa_r+0x61c>)
 8007684:	ec51 0b19 	vmov	r0, r1, d9
 8007688:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800768c:	f7f9 f8de 	bl	800084c <__aeabi_ddiv>
 8007690:	f007 070f 	and.w	r7, r7, #15
 8007694:	4682      	mov	sl, r0
 8007696:	468b      	mov	fp, r1
 8007698:	2503      	movs	r5, #3
 800769a:	4eac      	ldr	r6, [pc, #688]	; (800794c <_dtoa_r+0x61c>)
 800769c:	b957      	cbnz	r7, 80076b4 <_dtoa_r+0x384>
 800769e:	4642      	mov	r2, r8
 80076a0:	464b      	mov	r3, r9
 80076a2:	4650      	mov	r0, sl
 80076a4:	4659      	mov	r1, fp
 80076a6:	f7f9 f8d1 	bl	800084c <__aeabi_ddiv>
 80076aa:	4682      	mov	sl, r0
 80076ac:	468b      	mov	fp, r1
 80076ae:	e028      	b.n	8007702 <_dtoa_r+0x3d2>
 80076b0:	2502      	movs	r5, #2
 80076b2:	e7f2      	b.n	800769a <_dtoa_r+0x36a>
 80076b4:	07f9      	lsls	r1, r7, #31
 80076b6:	d508      	bpl.n	80076ca <_dtoa_r+0x39a>
 80076b8:	4640      	mov	r0, r8
 80076ba:	4649      	mov	r1, r9
 80076bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80076c0:	f7f8 ff9a 	bl	80005f8 <__aeabi_dmul>
 80076c4:	3501      	adds	r5, #1
 80076c6:	4680      	mov	r8, r0
 80076c8:	4689      	mov	r9, r1
 80076ca:	107f      	asrs	r7, r7, #1
 80076cc:	3608      	adds	r6, #8
 80076ce:	e7e5      	b.n	800769c <_dtoa_r+0x36c>
 80076d0:	f000 809b 	beq.w	800780a <_dtoa_r+0x4da>
 80076d4:	9b00      	ldr	r3, [sp, #0]
 80076d6:	4f9d      	ldr	r7, [pc, #628]	; (800794c <_dtoa_r+0x61c>)
 80076d8:	425e      	negs	r6, r3
 80076da:	4b9b      	ldr	r3, [pc, #620]	; (8007948 <_dtoa_r+0x618>)
 80076dc:	f006 020f 	and.w	r2, r6, #15
 80076e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80076e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076e8:	ec51 0b19 	vmov	r0, r1, d9
 80076ec:	f7f8 ff84 	bl	80005f8 <__aeabi_dmul>
 80076f0:	1136      	asrs	r6, r6, #4
 80076f2:	4682      	mov	sl, r0
 80076f4:	468b      	mov	fp, r1
 80076f6:	2300      	movs	r3, #0
 80076f8:	2502      	movs	r5, #2
 80076fa:	2e00      	cmp	r6, #0
 80076fc:	d17a      	bne.n	80077f4 <_dtoa_r+0x4c4>
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d1d3      	bne.n	80076aa <_dtoa_r+0x37a>
 8007702:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007704:	2b00      	cmp	r3, #0
 8007706:	f000 8082 	beq.w	800780e <_dtoa_r+0x4de>
 800770a:	4b91      	ldr	r3, [pc, #580]	; (8007950 <_dtoa_r+0x620>)
 800770c:	2200      	movs	r2, #0
 800770e:	4650      	mov	r0, sl
 8007710:	4659      	mov	r1, fp
 8007712:	f7f9 f9e3 	bl	8000adc <__aeabi_dcmplt>
 8007716:	2800      	cmp	r0, #0
 8007718:	d079      	beq.n	800780e <_dtoa_r+0x4de>
 800771a:	9b03      	ldr	r3, [sp, #12]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d076      	beq.n	800780e <_dtoa_r+0x4de>
 8007720:	9b02      	ldr	r3, [sp, #8]
 8007722:	2b00      	cmp	r3, #0
 8007724:	dd36      	ble.n	8007794 <_dtoa_r+0x464>
 8007726:	9b00      	ldr	r3, [sp, #0]
 8007728:	4650      	mov	r0, sl
 800772a:	4659      	mov	r1, fp
 800772c:	1e5f      	subs	r7, r3, #1
 800772e:	2200      	movs	r2, #0
 8007730:	4b88      	ldr	r3, [pc, #544]	; (8007954 <_dtoa_r+0x624>)
 8007732:	f7f8 ff61 	bl	80005f8 <__aeabi_dmul>
 8007736:	9e02      	ldr	r6, [sp, #8]
 8007738:	4682      	mov	sl, r0
 800773a:	468b      	mov	fp, r1
 800773c:	3501      	adds	r5, #1
 800773e:	4628      	mov	r0, r5
 8007740:	f7f8 fef0 	bl	8000524 <__aeabi_i2d>
 8007744:	4652      	mov	r2, sl
 8007746:	465b      	mov	r3, fp
 8007748:	f7f8 ff56 	bl	80005f8 <__aeabi_dmul>
 800774c:	4b82      	ldr	r3, [pc, #520]	; (8007958 <_dtoa_r+0x628>)
 800774e:	2200      	movs	r2, #0
 8007750:	f7f8 fd9c 	bl	800028c <__adddf3>
 8007754:	46d0      	mov	r8, sl
 8007756:	46d9      	mov	r9, fp
 8007758:	4682      	mov	sl, r0
 800775a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800775e:	2e00      	cmp	r6, #0
 8007760:	d158      	bne.n	8007814 <_dtoa_r+0x4e4>
 8007762:	4b7e      	ldr	r3, [pc, #504]	; (800795c <_dtoa_r+0x62c>)
 8007764:	2200      	movs	r2, #0
 8007766:	4640      	mov	r0, r8
 8007768:	4649      	mov	r1, r9
 800776a:	f7f8 fd8d 	bl	8000288 <__aeabi_dsub>
 800776e:	4652      	mov	r2, sl
 8007770:	465b      	mov	r3, fp
 8007772:	4680      	mov	r8, r0
 8007774:	4689      	mov	r9, r1
 8007776:	f7f9 f9cf 	bl	8000b18 <__aeabi_dcmpgt>
 800777a:	2800      	cmp	r0, #0
 800777c:	f040 8295 	bne.w	8007caa <_dtoa_r+0x97a>
 8007780:	4652      	mov	r2, sl
 8007782:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007786:	4640      	mov	r0, r8
 8007788:	4649      	mov	r1, r9
 800778a:	f7f9 f9a7 	bl	8000adc <__aeabi_dcmplt>
 800778e:	2800      	cmp	r0, #0
 8007790:	f040 8289 	bne.w	8007ca6 <_dtoa_r+0x976>
 8007794:	ec5b ab19 	vmov	sl, fp, d9
 8007798:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800779a:	2b00      	cmp	r3, #0
 800779c:	f2c0 8148 	blt.w	8007a30 <_dtoa_r+0x700>
 80077a0:	9a00      	ldr	r2, [sp, #0]
 80077a2:	2a0e      	cmp	r2, #14
 80077a4:	f300 8144 	bgt.w	8007a30 <_dtoa_r+0x700>
 80077a8:	4b67      	ldr	r3, [pc, #412]	; (8007948 <_dtoa_r+0x618>)
 80077aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80077ae:	e9d3 8900 	ldrd	r8, r9, [r3]
 80077b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	f280 80d5 	bge.w	8007964 <_dtoa_r+0x634>
 80077ba:	9b03      	ldr	r3, [sp, #12]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	f300 80d1 	bgt.w	8007964 <_dtoa_r+0x634>
 80077c2:	f040 826f 	bne.w	8007ca4 <_dtoa_r+0x974>
 80077c6:	4b65      	ldr	r3, [pc, #404]	; (800795c <_dtoa_r+0x62c>)
 80077c8:	2200      	movs	r2, #0
 80077ca:	4640      	mov	r0, r8
 80077cc:	4649      	mov	r1, r9
 80077ce:	f7f8 ff13 	bl	80005f8 <__aeabi_dmul>
 80077d2:	4652      	mov	r2, sl
 80077d4:	465b      	mov	r3, fp
 80077d6:	f7f9 f995 	bl	8000b04 <__aeabi_dcmpge>
 80077da:	9e03      	ldr	r6, [sp, #12]
 80077dc:	4637      	mov	r7, r6
 80077de:	2800      	cmp	r0, #0
 80077e0:	f040 8245 	bne.w	8007c6e <_dtoa_r+0x93e>
 80077e4:	9d01      	ldr	r5, [sp, #4]
 80077e6:	2331      	movs	r3, #49	; 0x31
 80077e8:	f805 3b01 	strb.w	r3, [r5], #1
 80077ec:	9b00      	ldr	r3, [sp, #0]
 80077ee:	3301      	adds	r3, #1
 80077f0:	9300      	str	r3, [sp, #0]
 80077f2:	e240      	b.n	8007c76 <_dtoa_r+0x946>
 80077f4:	07f2      	lsls	r2, r6, #31
 80077f6:	d505      	bpl.n	8007804 <_dtoa_r+0x4d4>
 80077f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077fc:	f7f8 fefc 	bl	80005f8 <__aeabi_dmul>
 8007800:	3501      	adds	r5, #1
 8007802:	2301      	movs	r3, #1
 8007804:	1076      	asrs	r6, r6, #1
 8007806:	3708      	adds	r7, #8
 8007808:	e777      	b.n	80076fa <_dtoa_r+0x3ca>
 800780a:	2502      	movs	r5, #2
 800780c:	e779      	b.n	8007702 <_dtoa_r+0x3d2>
 800780e:	9f00      	ldr	r7, [sp, #0]
 8007810:	9e03      	ldr	r6, [sp, #12]
 8007812:	e794      	b.n	800773e <_dtoa_r+0x40e>
 8007814:	9901      	ldr	r1, [sp, #4]
 8007816:	4b4c      	ldr	r3, [pc, #304]	; (8007948 <_dtoa_r+0x618>)
 8007818:	4431      	add	r1, r6
 800781a:	910d      	str	r1, [sp, #52]	; 0x34
 800781c:	9908      	ldr	r1, [sp, #32]
 800781e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007822:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007826:	2900      	cmp	r1, #0
 8007828:	d043      	beq.n	80078b2 <_dtoa_r+0x582>
 800782a:	494d      	ldr	r1, [pc, #308]	; (8007960 <_dtoa_r+0x630>)
 800782c:	2000      	movs	r0, #0
 800782e:	f7f9 f80d 	bl	800084c <__aeabi_ddiv>
 8007832:	4652      	mov	r2, sl
 8007834:	465b      	mov	r3, fp
 8007836:	f7f8 fd27 	bl	8000288 <__aeabi_dsub>
 800783a:	9d01      	ldr	r5, [sp, #4]
 800783c:	4682      	mov	sl, r0
 800783e:	468b      	mov	fp, r1
 8007840:	4649      	mov	r1, r9
 8007842:	4640      	mov	r0, r8
 8007844:	f7f9 f988 	bl	8000b58 <__aeabi_d2iz>
 8007848:	4606      	mov	r6, r0
 800784a:	f7f8 fe6b 	bl	8000524 <__aeabi_i2d>
 800784e:	4602      	mov	r2, r0
 8007850:	460b      	mov	r3, r1
 8007852:	4640      	mov	r0, r8
 8007854:	4649      	mov	r1, r9
 8007856:	f7f8 fd17 	bl	8000288 <__aeabi_dsub>
 800785a:	3630      	adds	r6, #48	; 0x30
 800785c:	f805 6b01 	strb.w	r6, [r5], #1
 8007860:	4652      	mov	r2, sl
 8007862:	465b      	mov	r3, fp
 8007864:	4680      	mov	r8, r0
 8007866:	4689      	mov	r9, r1
 8007868:	f7f9 f938 	bl	8000adc <__aeabi_dcmplt>
 800786c:	2800      	cmp	r0, #0
 800786e:	d163      	bne.n	8007938 <_dtoa_r+0x608>
 8007870:	4642      	mov	r2, r8
 8007872:	464b      	mov	r3, r9
 8007874:	4936      	ldr	r1, [pc, #216]	; (8007950 <_dtoa_r+0x620>)
 8007876:	2000      	movs	r0, #0
 8007878:	f7f8 fd06 	bl	8000288 <__aeabi_dsub>
 800787c:	4652      	mov	r2, sl
 800787e:	465b      	mov	r3, fp
 8007880:	f7f9 f92c 	bl	8000adc <__aeabi_dcmplt>
 8007884:	2800      	cmp	r0, #0
 8007886:	f040 80b5 	bne.w	80079f4 <_dtoa_r+0x6c4>
 800788a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800788c:	429d      	cmp	r5, r3
 800788e:	d081      	beq.n	8007794 <_dtoa_r+0x464>
 8007890:	4b30      	ldr	r3, [pc, #192]	; (8007954 <_dtoa_r+0x624>)
 8007892:	2200      	movs	r2, #0
 8007894:	4650      	mov	r0, sl
 8007896:	4659      	mov	r1, fp
 8007898:	f7f8 feae 	bl	80005f8 <__aeabi_dmul>
 800789c:	4b2d      	ldr	r3, [pc, #180]	; (8007954 <_dtoa_r+0x624>)
 800789e:	4682      	mov	sl, r0
 80078a0:	468b      	mov	fp, r1
 80078a2:	4640      	mov	r0, r8
 80078a4:	4649      	mov	r1, r9
 80078a6:	2200      	movs	r2, #0
 80078a8:	f7f8 fea6 	bl	80005f8 <__aeabi_dmul>
 80078ac:	4680      	mov	r8, r0
 80078ae:	4689      	mov	r9, r1
 80078b0:	e7c6      	b.n	8007840 <_dtoa_r+0x510>
 80078b2:	4650      	mov	r0, sl
 80078b4:	4659      	mov	r1, fp
 80078b6:	f7f8 fe9f 	bl	80005f8 <__aeabi_dmul>
 80078ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80078bc:	9d01      	ldr	r5, [sp, #4]
 80078be:	930f      	str	r3, [sp, #60]	; 0x3c
 80078c0:	4682      	mov	sl, r0
 80078c2:	468b      	mov	fp, r1
 80078c4:	4649      	mov	r1, r9
 80078c6:	4640      	mov	r0, r8
 80078c8:	f7f9 f946 	bl	8000b58 <__aeabi_d2iz>
 80078cc:	4606      	mov	r6, r0
 80078ce:	f7f8 fe29 	bl	8000524 <__aeabi_i2d>
 80078d2:	3630      	adds	r6, #48	; 0x30
 80078d4:	4602      	mov	r2, r0
 80078d6:	460b      	mov	r3, r1
 80078d8:	4640      	mov	r0, r8
 80078da:	4649      	mov	r1, r9
 80078dc:	f7f8 fcd4 	bl	8000288 <__aeabi_dsub>
 80078e0:	f805 6b01 	strb.w	r6, [r5], #1
 80078e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80078e6:	429d      	cmp	r5, r3
 80078e8:	4680      	mov	r8, r0
 80078ea:	4689      	mov	r9, r1
 80078ec:	f04f 0200 	mov.w	r2, #0
 80078f0:	d124      	bne.n	800793c <_dtoa_r+0x60c>
 80078f2:	4b1b      	ldr	r3, [pc, #108]	; (8007960 <_dtoa_r+0x630>)
 80078f4:	4650      	mov	r0, sl
 80078f6:	4659      	mov	r1, fp
 80078f8:	f7f8 fcc8 	bl	800028c <__adddf3>
 80078fc:	4602      	mov	r2, r0
 80078fe:	460b      	mov	r3, r1
 8007900:	4640      	mov	r0, r8
 8007902:	4649      	mov	r1, r9
 8007904:	f7f9 f908 	bl	8000b18 <__aeabi_dcmpgt>
 8007908:	2800      	cmp	r0, #0
 800790a:	d173      	bne.n	80079f4 <_dtoa_r+0x6c4>
 800790c:	4652      	mov	r2, sl
 800790e:	465b      	mov	r3, fp
 8007910:	4913      	ldr	r1, [pc, #76]	; (8007960 <_dtoa_r+0x630>)
 8007912:	2000      	movs	r0, #0
 8007914:	f7f8 fcb8 	bl	8000288 <__aeabi_dsub>
 8007918:	4602      	mov	r2, r0
 800791a:	460b      	mov	r3, r1
 800791c:	4640      	mov	r0, r8
 800791e:	4649      	mov	r1, r9
 8007920:	f7f9 f8dc 	bl	8000adc <__aeabi_dcmplt>
 8007924:	2800      	cmp	r0, #0
 8007926:	f43f af35 	beq.w	8007794 <_dtoa_r+0x464>
 800792a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800792c:	1e6b      	subs	r3, r5, #1
 800792e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007930:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007934:	2b30      	cmp	r3, #48	; 0x30
 8007936:	d0f8      	beq.n	800792a <_dtoa_r+0x5fa>
 8007938:	9700      	str	r7, [sp, #0]
 800793a:	e049      	b.n	80079d0 <_dtoa_r+0x6a0>
 800793c:	4b05      	ldr	r3, [pc, #20]	; (8007954 <_dtoa_r+0x624>)
 800793e:	f7f8 fe5b 	bl	80005f8 <__aeabi_dmul>
 8007942:	4680      	mov	r8, r0
 8007944:	4689      	mov	r9, r1
 8007946:	e7bd      	b.n	80078c4 <_dtoa_r+0x594>
 8007948:	080097e0 	.word	0x080097e0
 800794c:	080097b8 	.word	0x080097b8
 8007950:	3ff00000 	.word	0x3ff00000
 8007954:	40240000 	.word	0x40240000
 8007958:	401c0000 	.word	0x401c0000
 800795c:	40140000 	.word	0x40140000
 8007960:	3fe00000 	.word	0x3fe00000
 8007964:	9d01      	ldr	r5, [sp, #4]
 8007966:	4656      	mov	r6, sl
 8007968:	465f      	mov	r7, fp
 800796a:	4642      	mov	r2, r8
 800796c:	464b      	mov	r3, r9
 800796e:	4630      	mov	r0, r6
 8007970:	4639      	mov	r1, r7
 8007972:	f7f8 ff6b 	bl	800084c <__aeabi_ddiv>
 8007976:	f7f9 f8ef 	bl	8000b58 <__aeabi_d2iz>
 800797a:	4682      	mov	sl, r0
 800797c:	f7f8 fdd2 	bl	8000524 <__aeabi_i2d>
 8007980:	4642      	mov	r2, r8
 8007982:	464b      	mov	r3, r9
 8007984:	f7f8 fe38 	bl	80005f8 <__aeabi_dmul>
 8007988:	4602      	mov	r2, r0
 800798a:	460b      	mov	r3, r1
 800798c:	4630      	mov	r0, r6
 800798e:	4639      	mov	r1, r7
 8007990:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007994:	f7f8 fc78 	bl	8000288 <__aeabi_dsub>
 8007998:	f805 6b01 	strb.w	r6, [r5], #1
 800799c:	9e01      	ldr	r6, [sp, #4]
 800799e:	9f03      	ldr	r7, [sp, #12]
 80079a0:	1bae      	subs	r6, r5, r6
 80079a2:	42b7      	cmp	r7, r6
 80079a4:	4602      	mov	r2, r0
 80079a6:	460b      	mov	r3, r1
 80079a8:	d135      	bne.n	8007a16 <_dtoa_r+0x6e6>
 80079aa:	f7f8 fc6f 	bl	800028c <__adddf3>
 80079ae:	4642      	mov	r2, r8
 80079b0:	464b      	mov	r3, r9
 80079b2:	4606      	mov	r6, r0
 80079b4:	460f      	mov	r7, r1
 80079b6:	f7f9 f8af 	bl	8000b18 <__aeabi_dcmpgt>
 80079ba:	b9d0      	cbnz	r0, 80079f2 <_dtoa_r+0x6c2>
 80079bc:	4642      	mov	r2, r8
 80079be:	464b      	mov	r3, r9
 80079c0:	4630      	mov	r0, r6
 80079c2:	4639      	mov	r1, r7
 80079c4:	f7f9 f880 	bl	8000ac8 <__aeabi_dcmpeq>
 80079c8:	b110      	cbz	r0, 80079d0 <_dtoa_r+0x6a0>
 80079ca:	f01a 0f01 	tst.w	sl, #1
 80079ce:	d110      	bne.n	80079f2 <_dtoa_r+0x6c2>
 80079d0:	4620      	mov	r0, r4
 80079d2:	ee18 1a10 	vmov	r1, s16
 80079d6:	f000 fd13 	bl	8008400 <_Bfree>
 80079da:	2300      	movs	r3, #0
 80079dc:	9800      	ldr	r0, [sp, #0]
 80079de:	702b      	strb	r3, [r5, #0]
 80079e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80079e2:	3001      	adds	r0, #1
 80079e4:	6018      	str	r0, [r3, #0]
 80079e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	f43f acf1 	beq.w	80073d0 <_dtoa_r+0xa0>
 80079ee:	601d      	str	r5, [r3, #0]
 80079f0:	e4ee      	b.n	80073d0 <_dtoa_r+0xa0>
 80079f2:	9f00      	ldr	r7, [sp, #0]
 80079f4:	462b      	mov	r3, r5
 80079f6:	461d      	mov	r5, r3
 80079f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80079fc:	2a39      	cmp	r2, #57	; 0x39
 80079fe:	d106      	bne.n	8007a0e <_dtoa_r+0x6de>
 8007a00:	9a01      	ldr	r2, [sp, #4]
 8007a02:	429a      	cmp	r2, r3
 8007a04:	d1f7      	bne.n	80079f6 <_dtoa_r+0x6c6>
 8007a06:	9901      	ldr	r1, [sp, #4]
 8007a08:	2230      	movs	r2, #48	; 0x30
 8007a0a:	3701      	adds	r7, #1
 8007a0c:	700a      	strb	r2, [r1, #0]
 8007a0e:	781a      	ldrb	r2, [r3, #0]
 8007a10:	3201      	adds	r2, #1
 8007a12:	701a      	strb	r2, [r3, #0]
 8007a14:	e790      	b.n	8007938 <_dtoa_r+0x608>
 8007a16:	4ba6      	ldr	r3, [pc, #664]	; (8007cb0 <_dtoa_r+0x980>)
 8007a18:	2200      	movs	r2, #0
 8007a1a:	f7f8 fded 	bl	80005f8 <__aeabi_dmul>
 8007a1e:	2200      	movs	r2, #0
 8007a20:	2300      	movs	r3, #0
 8007a22:	4606      	mov	r6, r0
 8007a24:	460f      	mov	r7, r1
 8007a26:	f7f9 f84f 	bl	8000ac8 <__aeabi_dcmpeq>
 8007a2a:	2800      	cmp	r0, #0
 8007a2c:	d09d      	beq.n	800796a <_dtoa_r+0x63a>
 8007a2e:	e7cf      	b.n	80079d0 <_dtoa_r+0x6a0>
 8007a30:	9a08      	ldr	r2, [sp, #32]
 8007a32:	2a00      	cmp	r2, #0
 8007a34:	f000 80d7 	beq.w	8007be6 <_dtoa_r+0x8b6>
 8007a38:	9a06      	ldr	r2, [sp, #24]
 8007a3a:	2a01      	cmp	r2, #1
 8007a3c:	f300 80ba 	bgt.w	8007bb4 <_dtoa_r+0x884>
 8007a40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007a42:	2a00      	cmp	r2, #0
 8007a44:	f000 80b2 	beq.w	8007bac <_dtoa_r+0x87c>
 8007a48:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007a4c:	9e07      	ldr	r6, [sp, #28]
 8007a4e:	9d04      	ldr	r5, [sp, #16]
 8007a50:	9a04      	ldr	r2, [sp, #16]
 8007a52:	441a      	add	r2, r3
 8007a54:	9204      	str	r2, [sp, #16]
 8007a56:	9a05      	ldr	r2, [sp, #20]
 8007a58:	2101      	movs	r1, #1
 8007a5a:	441a      	add	r2, r3
 8007a5c:	4620      	mov	r0, r4
 8007a5e:	9205      	str	r2, [sp, #20]
 8007a60:	f000 fd86 	bl	8008570 <__i2b>
 8007a64:	4607      	mov	r7, r0
 8007a66:	2d00      	cmp	r5, #0
 8007a68:	dd0c      	ble.n	8007a84 <_dtoa_r+0x754>
 8007a6a:	9b05      	ldr	r3, [sp, #20]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	dd09      	ble.n	8007a84 <_dtoa_r+0x754>
 8007a70:	42ab      	cmp	r3, r5
 8007a72:	9a04      	ldr	r2, [sp, #16]
 8007a74:	bfa8      	it	ge
 8007a76:	462b      	movge	r3, r5
 8007a78:	1ad2      	subs	r2, r2, r3
 8007a7a:	9204      	str	r2, [sp, #16]
 8007a7c:	9a05      	ldr	r2, [sp, #20]
 8007a7e:	1aed      	subs	r5, r5, r3
 8007a80:	1ad3      	subs	r3, r2, r3
 8007a82:	9305      	str	r3, [sp, #20]
 8007a84:	9b07      	ldr	r3, [sp, #28]
 8007a86:	b31b      	cbz	r3, 8007ad0 <_dtoa_r+0x7a0>
 8007a88:	9b08      	ldr	r3, [sp, #32]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	f000 80af 	beq.w	8007bee <_dtoa_r+0x8be>
 8007a90:	2e00      	cmp	r6, #0
 8007a92:	dd13      	ble.n	8007abc <_dtoa_r+0x78c>
 8007a94:	4639      	mov	r1, r7
 8007a96:	4632      	mov	r2, r6
 8007a98:	4620      	mov	r0, r4
 8007a9a:	f000 fe29 	bl	80086f0 <__pow5mult>
 8007a9e:	ee18 2a10 	vmov	r2, s16
 8007aa2:	4601      	mov	r1, r0
 8007aa4:	4607      	mov	r7, r0
 8007aa6:	4620      	mov	r0, r4
 8007aa8:	f000 fd78 	bl	800859c <__multiply>
 8007aac:	ee18 1a10 	vmov	r1, s16
 8007ab0:	4680      	mov	r8, r0
 8007ab2:	4620      	mov	r0, r4
 8007ab4:	f000 fca4 	bl	8008400 <_Bfree>
 8007ab8:	ee08 8a10 	vmov	s16, r8
 8007abc:	9b07      	ldr	r3, [sp, #28]
 8007abe:	1b9a      	subs	r2, r3, r6
 8007ac0:	d006      	beq.n	8007ad0 <_dtoa_r+0x7a0>
 8007ac2:	ee18 1a10 	vmov	r1, s16
 8007ac6:	4620      	mov	r0, r4
 8007ac8:	f000 fe12 	bl	80086f0 <__pow5mult>
 8007acc:	ee08 0a10 	vmov	s16, r0
 8007ad0:	2101      	movs	r1, #1
 8007ad2:	4620      	mov	r0, r4
 8007ad4:	f000 fd4c 	bl	8008570 <__i2b>
 8007ad8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	4606      	mov	r6, r0
 8007ade:	f340 8088 	ble.w	8007bf2 <_dtoa_r+0x8c2>
 8007ae2:	461a      	mov	r2, r3
 8007ae4:	4601      	mov	r1, r0
 8007ae6:	4620      	mov	r0, r4
 8007ae8:	f000 fe02 	bl	80086f0 <__pow5mult>
 8007aec:	9b06      	ldr	r3, [sp, #24]
 8007aee:	2b01      	cmp	r3, #1
 8007af0:	4606      	mov	r6, r0
 8007af2:	f340 8081 	ble.w	8007bf8 <_dtoa_r+0x8c8>
 8007af6:	f04f 0800 	mov.w	r8, #0
 8007afa:	6933      	ldr	r3, [r6, #16]
 8007afc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007b00:	6918      	ldr	r0, [r3, #16]
 8007b02:	f000 fce5 	bl	80084d0 <__hi0bits>
 8007b06:	f1c0 0020 	rsb	r0, r0, #32
 8007b0a:	9b05      	ldr	r3, [sp, #20]
 8007b0c:	4418      	add	r0, r3
 8007b0e:	f010 001f 	ands.w	r0, r0, #31
 8007b12:	f000 8092 	beq.w	8007c3a <_dtoa_r+0x90a>
 8007b16:	f1c0 0320 	rsb	r3, r0, #32
 8007b1a:	2b04      	cmp	r3, #4
 8007b1c:	f340 808a 	ble.w	8007c34 <_dtoa_r+0x904>
 8007b20:	f1c0 001c 	rsb	r0, r0, #28
 8007b24:	9b04      	ldr	r3, [sp, #16]
 8007b26:	4403      	add	r3, r0
 8007b28:	9304      	str	r3, [sp, #16]
 8007b2a:	9b05      	ldr	r3, [sp, #20]
 8007b2c:	4403      	add	r3, r0
 8007b2e:	4405      	add	r5, r0
 8007b30:	9305      	str	r3, [sp, #20]
 8007b32:	9b04      	ldr	r3, [sp, #16]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	dd07      	ble.n	8007b48 <_dtoa_r+0x818>
 8007b38:	ee18 1a10 	vmov	r1, s16
 8007b3c:	461a      	mov	r2, r3
 8007b3e:	4620      	mov	r0, r4
 8007b40:	f000 fe30 	bl	80087a4 <__lshift>
 8007b44:	ee08 0a10 	vmov	s16, r0
 8007b48:	9b05      	ldr	r3, [sp, #20]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	dd05      	ble.n	8007b5a <_dtoa_r+0x82a>
 8007b4e:	4631      	mov	r1, r6
 8007b50:	461a      	mov	r2, r3
 8007b52:	4620      	mov	r0, r4
 8007b54:	f000 fe26 	bl	80087a4 <__lshift>
 8007b58:	4606      	mov	r6, r0
 8007b5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d06e      	beq.n	8007c3e <_dtoa_r+0x90e>
 8007b60:	ee18 0a10 	vmov	r0, s16
 8007b64:	4631      	mov	r1, r6
 8007b66:	f000 fe8d 	bl	8008884 <__mcmp>
 8007b6a:	2800      	cmp	r0, #0
 8007b6c:	da67      	bge.n	8007c3e <_dtoa_r+0x90e>
 8007b6e:	9b00      	ldr	r3, [sp, #0]
 8007b70:	3b01      	subs	r3, #1
 8007b72:	ee18 1a10 	vmov	r1, s16
 8007b76:	9300      	str	r3, [sp, #0]
 8007b78:	220a      	movs	r2, #10
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	4620      	mov	r0, r4
 8007b7e:	f000 fc61 	bl	8008444 <__multadd>
 8007b82:	9b08      	ldr	r3, [sp, #32]
 8007b84:	ee08 0a10 	vmov	s16, r0
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	f000 81b1 	beq.w	8007ef0 <_dtoa_r+0xbc0>
 8007b8e:	2300      	movs	r3, #0
 8007b90:	4639      	mov	r1, r7
 8007b92:	220a      	movs	r2, #10
 8007b94:	4620      	mov	r0, r4
 8007b96:	f000 fc55 	bl	8008444 <__multadd>
 8007b9a:	9b02      	ldr	r3, [sp, #8]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	4607      	mov	r7, r0
 8007ba0:	f300 808e 	bgt.w	8007cc0 <_dtoa_r+0x990>
 8007ba4:	9b06      	ldr	r3, [sp, #24]
 8007ba6:	2b02      	cmp	r3, #2
 8007ba8:	dc51      	bgt.n	8007c4e <_dtoa_r+0x91e>
 8007baa:	e089      	b.n	8007cc0 <_dtoa_r+0x990>
 8007bac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007bae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007bb2:	e74b      	b.n	8007a4c <_dtoa_r+0x71c>
 8007bb4:	9b03      	ldr	r3, [sp, #12]
 8007bb6:	1e5e      	subs	r6, r3, #1
 8007bb8:	9b07      	ldr	r3, [sp, #28]
 8007bba:	42b3      	cmp	r3, r6
 8007bbc:	bfbf      	itttt	lt
 8007bbe:	9b07      	ldrlt	r3, [sp, #28]
 8007bc0:	9607      	strlt	r6, [sp, #28]
 8007bc2:	1af2      	sublt	r2, r6, r3
 8007bc4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007bc6:	bfb6      	itet	lt
 8007bc8:	189b      	addlt	r3, r3, r2
 8007bca:	1b9e      	subge	r6, r3, r6
 8007bcc:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007bce:	9b03      	ldr	r3, [sp, #12]
 8007bd0:	bfb8      	it	lt
 8007bd2:	2600      	movlt	r6, #0
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	bfb7      	itett	lt
 8007bd8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007bdc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007be0:	1a9d      	sublt	r5, r3, r2
 8007be2:	2300      	movlt	r3, #0
 8007be4:	e734      	b.n	8007a50 <_dtoa_r+0x720>
 8007be6:	9e07      	ldr	r6, [sp, #28]
 8007be8:	9d04      	ldr	r5, [sp, #16]
 8007bea:	9f08      	ldr	r7, [sp, #32]
 8007bec:	e73b      	b.n	8007a66 <_dtoa_r+0x736>
 8007bee:	9a07      	ldr	r2, [sp, #28]
 8007bf0:	e767      	b.n	8007ac2 <_dtoa_r+0x792>
 8007bf2:	9b06      	ldr	r3, [sp, #24]
 8007bf4:	2b01      	cmp	r3, #1
 8007bf6:	dc18      	bgt.n	8007c2a <_dtoa_r+0x8fa>
 8007bf8:	f1ba 0f00 	cmp.w	sl, #0
 8007bfc:	d115      	bne.n	8007c2a <_dtoa_r+0x8fa>
 8007bfe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007c02:	b993      	cbnz	r3, 8007c2a <_dtoa_r+0x8fa>
 8007c04:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007c08:	0d1b      	lsrs	r3, r3, #20
 8007c0a:	051b      	lsls	r3, r3, #20
 8007c0c:	b183      	cbz	r3, 8007c30 <_dtoa_r+0x900>
 8007c0e:	9b04      	ldr	r3, [sp, #16]
 8007c10:	3301      	adds	r3, #1
 8007c12:	9304      	str	r3, [sp, #16]
 8007c14:	9b05      	ldr	r3, [sp, #20]
 8007c16:	3301      	adds	r3, #1
 8007c18:	9305      	str	r3, [sp, #20]
 8007c1a:	f04f 0801 	mov.w	r8, #1
 8007c1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	f47f af6a 	bne.w	8007afa <_dtoa_r+0x7ca>
 8007c26:	2001      	movs	r0, #1
 8007c28:	e76f      	b.n	8007b0a <_dtoa_r+0x7da>
 8007c2a:	f04f 0800 	mov.w	r8, #0
 8007c2e:	e7f6      	b.n	8007c1e <_dtoa_r+0x8ee>
 8007c30:	4698      	mov	r8, r3
 8007c32:	e7f4      	b.n	8007c1e <_dtoa_r+0x8ee>
 8007c34:	f43f af7d 	beq.w	8007b32 <_dtoa_r+0x802>
 8007c38:	4618      	mov	r0, r3
 8007c3a:	301c      	adds	r0, #28
 8007c3c:	e772      	b.n	8007b24 <_dtoa_r+0x7f4>
 8007c3e:	9b03      	ldr	r3, [sp, #12]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	dc37      	bgt.n	8007cb4 <_dtoa_r+0x984>
 8007c44:	9b06      	ldr	r3, [sp, #24]
 8007c46:	2b02      	cmp	r3, #2
 8007c48:	dd34      	ble.n	8007cb4 <_dtoa_r+0x984>
 8007c4a:	9b03      	ldr	r3, [sp, #12]
 8007c4c:	9302      	str	r3, [sp, #8]
 8007c4e:	9b02      	ldr	r3, [sp, #8]
 8007c50:	b96b      	cbnz	r3, 8007c6e <_dtoa_r+0x93e>
 8007c52:	4631      	mov	r1, r6
 8007c54:	2205      	movs	r2, #5
 8007c56:	4620      	mov	r0, r4
 8007c58:	f000 fbf4 	bl	8008444 <__multadd>
 8007c5c:	4601      	mov	r1, r0
 8007c5e:	4606      	mov	r6, r0
 8007c60:	ee18 0a10 	vmov	r0, s16
 8007c64:	f000 fe0e 	bl	8008884 <__mcmp>
 8007c68:	2800      	cmp	r0, #0
 8007c6a:	f73f adbb 	bgt.w	80077e4 <_dtoa_r+0x4b4>
 8007c6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c70:	9d01      	ldr	r5, [sp, #4]
 8007c72:	43db      	mvns	r3, r3
 8007c74:	9300      	str	r3, [sp, #0]
 8007c76:	f04f 0800 	mov.w	r8, #0
 8007c7a:	4631      	mov	r1, r6
 8007c7c:	4620      	mov	r0, r4
 8007c7e:	f000 fbbf 	bl	8008400 <_Bfree>
 8007c82:	2f00      	cmp	r7, #0
 8007c84:	f43f aea4 	beq.w	80079d0 <_dtoa_r+0x6a0>
 8007c88:	f1b8 0f00 	cmp.w	r8, #0
 8007c8c:	d005      	beq.n	8007c9a <_dtoa_r+0x96a>
 8007c8e:	45b8      	cmp	r8, r7
 8007c90:	d003      	beq.n	8007c9a <_dtoa_r+0x96a>
 8007c92:	4641      	mov	r1, r8
 8007c94:	4620      	mov	r0, r4
 8007c96:	f000 fbb3 	bl	8008400 <_Bfree>
 8007c9a:	4639      	mov	r1, r7
 8007c9c:	4620      	mov	r0, r4
 8007c9e:	f000 fbaf 	bl	8008400 <_Bfree>
 8007ca2:	e695      	b.n	80079d0 <_dtoa_r+0x6a0>
 8007ca4:	2600      	movs	r6, #0
 8007ca6:	4637      	mov	r7, r6
 8007ca8:	e7e1      	b.n	8007c6e <_dtoa_r+0x93e>
 8007caa:	9700      	str	r7, [sp, #0]
 8007cac:	4637      	mov	r7, r6
 8007cae:	e599      	b.n	80077e4 <_dtoa_r+0x4b4>
 8007cb0:	40240000 	.word	0x40240000
 8007cb4:	9b08      	ldr	r3, [sp, #32]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	f000 80ca 	beq.w	8007e50 <_dtoa_r+0xb20>
 8007cbc:	9b03      	ldr	r3, [sp, #12]
 8007cbe:	9302      	str	r3, [sp, #8]
 8007cc0:	2d00      	cmp	r5, #0
 8007cc2:	dd05      	ble.n	8007cd0 <_dtoa_r+0x9a0>
 8007cc4:	4639      	mov	r1, r7
 8007cc6:	462a      	mov	r2, r5
 8007cc8:	4620      	mov	r0, r4
 8007cca:	f000 fd6b 	bl	80087a4 <__lshift>
 8007cce:	4607      	mov	r7, r0
 8007cd0:	f1b8 0f00 	cmp.w	r8, #0
 8007cd4:	d05b      	beq.n	8007d8e <_dtoa_r+0xa5e>
 8007cd6:	6879      	ldr	r1, [r7, #4]
 8007cd8:	4620      	mov	r0, r4
 8007cda:	f000 fb51 	bl	8008380 <_Balloc>
 8007cde:	4605      	mov	r5, r0
 8007ce0:	b928      	cbnz	r0, 8007cee <_dtoa_r+0x9be>
 8007ce2:	4b87      	ldr	r3, [pc, #540]	; (8007f00 <_dtoa_r+0xbd0>)
 8007ce4:	4602      	mov	r2, r0
 8007ce6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007cea:	f7ff bb3b 	b.w	8007364 <_dtoa_r+0x34>
 8007cee:	693a      	ldr	r2, [r7, #16]
 8007cf0:	3202      	adds	r2, #2
 8007cf2:	0092      	lsls	r2, r2, #2
 8007cf4:	f107 010c 	add.w	r1, r7, #12
 8007cf8:	300c      	adds	r0, #12
 8007cfa:	f000 fb33 	bl	8008364 <memcpy>
 8007cfe:	2201      	movs	r2, #1
 8007d00:	4629      	mov	r1, r5
 8007d02:	4620      	mov	r0, r4
 8007d04:	f000 fd4e 	bl	80087a4 <__lshift>
 8007d08:	9b01      	ldr	r3, [sp, #4]
 8007d0a:	f103 0901 	add.w	r9, r3, #1
 8007d0e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007d12:	4413      	add	r3, r2
 8007d14:	9305      	str	r3, [sp, #20]
 8007d16:	f00a 0301 	and.w	r3, sl, #1
 8007d1a:	46b8      	mov	r8, r7
 8007d1c:	9304      	str	r3, [sp, #16]
 8007d1e:	4607      	mov	r7, r0
 8007d20:	4631      	mov	r1, r6
 8007d22:	ee18 0a10 	vmov	r0, s16
 8007d26:	f7ff fa77 	bl	8007218 <quorem>
 8007d2a:	4641      	mov	r1, r8
 8007d2c:	9002      	str	r0, [sp, #8]
 8007d2e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007d32:	ee18 0a10 	vmov	r0, s16
 8007d36:	f000 fda5 	bl	8008884 <__mcmp>
 8007d3a:	463a      	mov	r2, r7
 8007d3c:	9003      	str	r0, [sp, #12]
 8007d3e:	4631      	mov	r1, r6
 8007d40:	4620      	mov	r0, r4
 8007d42:	f000 fdbb 	bl	80088bc <__mdiff>
 8007d46:	68c2      	ldr	r2, [r0, #12]
 8007d48:	f109 3bff 	add.w	fp, r9, #4294967295
 8007d4c:	4605      	mov	r5, r0
 8007d4e:	bb02      	cbnz	r2, 8007d92 <_dtoa_r+0xa62>
 8007d50:	4601      	mov	r1, r0
 8007d52:	ee18 0a10 	vmov	r0, s16
 8007d56:	f000 fd95 	bl	8008884 <__mcmp>
 8007d5a:	4602      	mov	r2, r0
 8007d5c:	4629      	mov	r1, r5
 8007d5e:	4620      	mov	r0, r4
 8007d60:	9207      	str	r2, [sp, #28]
 8007d62:	f000 fb4d 	bl	8008400 <_Bfree>
 8007d66:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007d6a:	ea43 0102 	orr.w	r1, r3, r2
 8007d6e:	9b04      	ldr	r3, [sp, #16]
 8007d70:	430b      	orrs	r3, r1
 8007d72:	464d      	mov	r5, r9
 8007d74:	d10f      	bne.n	8007d96 <_dtoa_r+0xa66>
 8007d76:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007d7a:	d02a      	beq.n	8007dd2 <_dtoa_r+0xaa2>
 8007d7c:	9b03      	ldr	r3, [sp, #12]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	dd02      	ble.n	8007d88 <_dtoa_r+0xa58>
 8007d82:	9b02      	ldr	r3, [sp, #8]
 8007d84:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007d88:	f88b a000 	strb.w	sl, [fp]
 8007d8c:	e775      	b.n	8007c7a <_dtoa_r+0x94a>
 8007d8e:	4638      	mov	r0, r7
 8007d90:	e7ba      	b.n	8007d08 <_dtoa_r+0x9d8>
 8007d92:	2201      	movs	r2, #1
 8007d94:	e7e2      	b.n	8007d5c <_dtoa_r+0xa2c>
 8007d96:	9b03      	ldr	r3, [sp, #12]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	db04      	blt.n	8007da6 <_dtoa_r+0xa76>
 8007d9c:	9906      	ldr	r1, [sp, #24]
 8007d9e:	430b      	orrs	r3, r1
 8007da0:	9904      	ldr	r1, [sp, #16]
 8007da2:	430b      	orrs	r3, r1
 8007da4:	d122      	bne.n	8007dec <_dtoa_r+0xabc>
 8007da6:	2a00      	cmp	r2, #0
 8007da8:	ddee      	ble.n	8007d88 <_dtoa_r+0xa58>
 8007daa:	ee18 1a10 	vmov	r1, s16
 8007dae:	2201      	movs	r2, #1
 8007db0:	4620      	mov	r0, r4
 8007db2:	f000 fcf7 	bl	80087a4 <__lshift>
 8007db6:	4631      	mov	r1, r6
 8007db8:	ee08 0a10 	vmov	s16, r0
 8007dbc:	f000 fd62 	bl	8008884 <__mcmp>
 8007dc0:	2800      	cmp	r0, #0
 8007dc2:	dc03      	bgt.n	8007dcc <_dtoa_r+0xa9c>
 8007dc4:	d1e0      	bne.n	8007d88 <_dtoa_r+0xa58>
 8007dc6:	f01a 0f01 	tst.w	sl, #1
 8007dca:	d0dd      	beq.n	8007d88 <_dtoa_r+0xa58>
 8007dcc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007dd0:	d1d7      	bne.n	8007d82 <_dtoa_r+0xa52>
 8007dd2:	2339      	movs	r3, #57	; 0x39
 8007dd4:	f88b 3000 	strb.w	r3, [fp]
 8007dd8:	462b      	mov	r3, r5
 8007dda:	461d      	mov	r5, r3
 8007ddc:	3b01      	subs	r3, #1
 8007dde:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007de2:	2a39      	cmp	r2, #57	; 0x39
 8007de4:	d071      	beq.n	8007eca <_dtoa_r+0xb9a>
 8007de6:	3201      	adds	r2, #1
 8007de8:	701a      	strb	r2, [r3, #0]
 8007dea:	e746      	b.n	8007c7a <_dtoa_r+0x94a>
 8007dec:	2a00      	cmp	r2, #0
 8007dee:	dd07      	ble.n	8007e00 <_dtoa_r+0xad0>
 8007df0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007df4:	d0ed      	beq.n	8007dd2 <_dtoa_r+0xaa2>
 8007df6:	f10a 0301 	add.w	r3, sl, #1
 8007dfa:	f88b 3000 	strb.w	r3, [fp]
 8007dfe:	e73c      	b.n	8007c7a <_dtoa_r+0x94a>
 8007e00:	9b05      	ldr	r3, [sp, #20]
 8007e02:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007e06:	4599      	cmp	r9, r3
 8007e08:	d047      	beq.n	8007e9a <_dtoa_r+0xb6a>
 8007e0a:	ee18 1a10 	vmov	r1, s16
 8007e0e:	2300      	movs	r3, #0
 8007e10:	220a      	movs	r2, #10
 8007e12:	4620      	mov	r0, r4
 8007e14:	f000 fb16 	bl	8008444 <__multadd>
 8007e18:	45b8      	cmp	r8, r7
 8007e1a:	ee08 0a10 	vmov	s16, r0
 8007e1e:	f04f 0300 	mov.w	r3, #0
 8007e22:	f04f 020a 	mov.w	r2, #10
 8007e26:	4641      	mov	r1, r8
 8007e28:	4620      	mov	r0, r4
 8007e2a:	d106      	bne.n	8007e3a <_dtoa_r+0xb0a>
 8007e2c:	f000 fb0a 	bl	8008444 <__multadd>
 8007e30:	4680      	mov	r8, r0
 8007e32:	4607      	mov	r7, r0
 8007e34:	f109 0901 	add.w	r9, r9, #1
 8007e38:	e772      	b.n	8007d20 <_dtoa_r+0x9f0>
 8007e3a:	f000 fb03 	bl	8008444 <__multadd>
 8007e3e:	4639      	mov	r1, r7
 8007e40:	4680      	mov	r8, r0
 8007e42:	2300      	movs	r3, #0
 8007e44:	220a      	movs	r2, #10
 8007e46:	4620      	mov	r0, r4
 8007e48:	f000 fafc 	bl	8008444 <__multadd>
 8007e4c:	4607      	mov	r7, r0
 8007e4e:	e7f1      	b.n	8007e34 <_dtoa_r+0xb04>
 8007e50:	9b03      	ldr	r3, [sp, #12]
 8007e52:	9302      	str	r3, [sp, #8]
 8007e54:	9d01      	ldr	r5, [sp, #4]
 8007e56:	ee18 0a10 	vmov	r0, s16
 8007e5a:	4631      	mov	r1, r6
 8007e5c:	f7ff f9dc 	bl	8007218 <quorem>
 8007e60:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007e64:	9b01      	ldr	r3, [sp, #4]
 8007e66:	f805 ab01 	strb.w	sl, [r5], #1
 8007e6a:	1aea      	subs	r2, r5, r3
 8007e6c:	9b02      	ldr	r3, [sp, #8]
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	dd09      	ble.n	8007e86 <_dtoa_r+0xb56>
 8007e72:	ee18 1a10 	vmov	r1, s16
 8007e76:	2300      	movs	r3, #0
 8007e78:	220a      	movs	r2, #10
 8007e7a:	4620      	mov	r0, r4
 8007e7c:	f000 fae2 	bl	8008444 <__multadd>
 8007e80:	ee08 0a10 	vmov	s16, r0
 8007e84:	e7e7      	b.n	8007e56 <_dtoa_r+0xb26>
 8007e86:	9b02      	ldr	r3, [sp, #8]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	bfc8      	it	gt
 8007e8c:	461d      	movgt	r5, r3
 8007e8e:	9b01      	ldr	r3, [sp, #4]
 8007e90:	bfd8      	it	le
 8007e92:	2501      	movle	r5, #1
 8007e94:	441d      	add	r5, r3
 8007e96:	f04f 0800 	mov.w	r8, #0
 8007e9a:	ee18 1a10 	vmov	r1, s16
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	4620      	mov	r0, r4
 8007ea2:	f000 fc7f 	bl	80087a4 <__lshift>
 8007ea6:	4631      	mov	r1, r6
 8007ea8:	ee08 0a10 	vmov	s16, r0
 8007eac:	f000 fcea 	bl	8008884 <__mcmp>
 8007eb0:	2800      	cmp	r0, #0
 8007eb2:	dc91      	bgt.n	8007dd8 <_dtoa_r+0xaa8>
 8007eb4:	d102      	bne.n	8007ebc <_dtoa_r+0xb8c>
 8007eb6:	f01a 0f01 	tst.w	sl, #1
 8007eba:	d18d      	bne.n	8007dd8 <_dtoa_r+0xaa8>
 8007ebc:	462b      	mov	r3, r5
 8007ebe:	461d      	mov	r5, r3
 8007ec0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007ec4:	2a30      	cmp	r2, #48	; 0x30
 8007ec6:	d0fa      	beq.n	8007ebe <_dtoa_r+0xb8e>
 8007ec8:	e6d7      	b.n	8007c7a <_dtoa_r+0x94a>
 8007eca:	9a01      	ldr	r2, [sp, #4]
 8007ecc:	429a      	cmp	r2, r3
 8007ece:	d184      	bne.n	8007dda <_dtoa_r+0xaaa>
 8007ed0:	9b00      	ldr	r3, [sp, #0]
 8007ed2:	3301      	adds	r3, #1
 8007ed4:	9300      	str	r3, [sp, #0]
 8007ed6:	2331      	movs	r3, #49	; 0x31
 8007ed8:	7013      	strb	r3, [r2, #0]
 8007eda:	e6ce      	b.n	8007c7a <_dtoa_r+0x94a>
 8007edc:	4b09      	ldr	r3, [pc, #36]	; (8007f04 <_dtoa_r+0xbd4>)
 8007ede:	f7ff ba95 	b.w	800740c <_dtoa_r+0xdc>
 8007ee2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	f47f aa6e 	bne.w	80073c6 <_dtoa_r+0x96>
 8007eea:	4b07      	ldr	r3, [pc, #28]	; (8007f08 <_dtoa_r+0xbd8>)
 8007eec:	f7ff ba8e 	b.w	800740c <_dtoa_r+0xdc>
 8007ef0:	9b02      	ldr	r3, [sp, #8]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	dcae      	bgt.n	8007e54 <_dtoa_r+0xb24>
 8007ef6:	9b06      	ldr	r3, [sp, #24]
 8007ef8:	2b02      	cmp	r3, #2
 8007efa:	f73f aea8 	bgt.w	8007c4e <_dtoa_r+0x91e>
 8007efe:	e7a9      	b.n	8007e54 <_dtoa_r+0xb24>
 8007f00:	080096eb 	.word	0x080096eb
 8007f04:	08009648 	.word	0x08009648
 8007f08:	0800966c 	.word	0x0800966c

08007f0c <__sflush_r>:
 8007f0c:	898a      	ldrh	r2, [r1, #12]
 8007f0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f12:	4605      	mov	r5, r0
 8007f14:	0710      	lsls	r0, r2, #28
 8007f16:	460c      	mov	r4, r1
 8007f18:	d458      	bmi.n	8007fcc <__sflush_r+0xc0>
 8007f1a:	684b      	ldr	r3, [r1, #4]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	dc05      	bgt.n	8007f2c <__sflush_r+0x20>
 8007f20:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	dc02      	bgt.n	8007f2c <__sflush_r+0x20>
 8007f26:	2000      	movs	r0, #0
 8007f28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f2e:	2e00      	cmp	r6, #0
 8007f30:	d0f9      	beq.n	8007f26 <__sflush_r+0x1a>
 8007f32:	2300      	movs	r3, #0
 8007f34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007f38:	682f      	ldr	r7, [r5, #0]
 8007f3a:	602b      	str	r3, [r5, #0]
 8007f3c:	d032      	beq.n	8007fa4 <__sflush_r+0x98>
 8007f3e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007f40:	89a3      	ldrh	r3, [r4, #12]
 8007f42:	075a      	lsls	r2, r3, #29
 8007f44:	d505      	bpl.n	8007f52 <__sflush_r+0x46>
 8007f46:	6863      	ldr	r3, [r4, #4]
 8007f48:	1ac0      	subs	r0, r0, r3
 8007f4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007f4c:	b10b      	cbz	r3, 8007f52 <__sflush_r+0x46>
 8007f4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007f50:	1ac0      	subs	r0, r0, r3
 8007f52:	2300      	movs	r3, #0
 8007f54:	4602      	mov	r2, r0
 8007f56:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f58:	6a21      	ldr	r1, [r4, #32]
 8007f5a:	4628      	mov	r0, r5
 8007f5c:	47b0      	blx	r6
 8007f5e:	1c43      	adds	r3, r0, #1
 8007f60:	89a3      	ldrh	r3, [r4, #12]
 8007f62:	d106      	bne.n	8007f72 <__sflush_r+0x66>
 8007f64:	6829      	ldr	r1, [r5, #0]
 8007f66:	291d      	cmp	r1, #29
 8007f68:	d82c      	bhi.n	8007fc4 <__sflush_r+0xb8>
 8007f6a:	4a2a      	ldr	r2, [pc, #168]	; (8008014 <__sflush_r+0x108>)
 8007f6c:	40ca      	lsrs	r2, r1
 8007f6e:	07d6      	lsls	r6, r2, #31
 8007f70:	d528      	bpl.n	8007fc4 <__sflush_r+0xb8>
 8007f72:	2200      	movs	r2, #0
 8007f74:	6062      	str	r2, [r4, #4]
 8007f76:	04d9      	lsls	r1, r3, #19
 8007f78:	6922      	ldr	r2, [r4, #16]
 8007f7a:	6022      	str	r2, [r4, #0]
 8007f7c:	d504      	bpl.n	8007f88 <__sflush_r+0x7c>
 8007f7e:	1c42      	adds	r2, r0, #1
 8007f80:	d101      	bne.n	8007f86 <__sflush_r+0x7a>
 8007f82:	682b      	ldr	r3, [r5, #0]
 8007f84:	b903      	cbnz	r3, 8007f88 <__sflush_r+0x7c>
 8007f86:	6560      	str	r0, [r4, #84]	; 0x54
 8007f88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f8a:	602f      	str	r7, [r5, #0]
 8007f8c:	2900      	cmp	r1, #0
 8007f8e:	d0ca      	beq.n	8007f26 <__sflush_r+0x1a>
 8007f90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f94:	4299      	cmp	r1, r3
 8007f96:	d002      	beq.n	8007f9e <__sflush_r+0x92>
 8007f98:	4628      	mov	r0, r5
 8007f9a:	f000 fd8b 	bl	8008ab4 <_free_r>
 8007f9e:	2000      	movs	r0, #0
 8007fa0:	6360      	str	r0, [r4, #52]	; 0x34
 8007fa2:	e7c1      	b.n	8007f28 <__sflush_r+0x1c>
 8007fa4:	6a21      	ldr	r1, [r4, #32]
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	4628      	mov	r0, r5
 8007faa:	47b0      	blx	r6
 8007fac:	1c41      	adds	r1, r0, #1
 8007fae:	d1c7      	bne.n	8007f40 <__sflush_r+0x34>
 8007fb0:	682b      	ldr	r3, [r5, #0]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d0c4      	beq.n	8007f40 <__sflush_r+0x34>
 8007fb6:	2b1d      	cmp	r3, #29
 8007fb8:	d001      	beq.n	8007fbe <__sflush_r+0xb2>
 8007fba:	2b16      	cmp	r3, #22
 8007fbc:	d101      	bne.n	8007fc2 <__sflush_r+0xb6>
 8007fbe:	602f      	str	r7, [r5, #0]
 8007fc0:	e7b1      	b.n	8007f26 <__sflush_r+0x1a>
 8007fc2:	89a3      	ldrh	r3, [r4, #12]
 8007fc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fc8:	81a3      	strh	r3, [r4, #12]
 8007fca:	e7ad      	b.n	8007f28 <__sflush_r+0x1c>
 8007fcc:	690f      	ldr	r7, [r1, #16]
 8007fce:	2f00      	cmp	r7, #0
 8007fd0:	d0a9      	beq.n	8007f26 <__sflush_r+0x1a>
 8007fd2:	0793      	lsls	r3, r2, #30
 8007fd4:	680e      	ldr	r6, [r1, #0]
 8007fd6:	bf08      	it	eq
 8007fd8:	694b      	ldreq	r3, [r1, #20]
 8007fda:	600f      	str	r7, [r1, #0]
 8007fdc:	bf18      	it	ne
 8007fde:	2300      	movne	r3, #0
 8007fe0:	eba6 0807 	sub.w	r8, r6, r7
 8007fe4:	608b      	str	r3, [r1, #8]
 8007fe6:	f1b8 0f00 	cmp.w	r8, #0
 8007fea:	dd9c      	ble.n	8007f26 <__sflush_r+0x1a>
 8007fec:	6a21      	ldr	r1, [r4, #32]
 8007fee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007ff0:	4643      	mov	r3, r8
 8007ff2:	463a      	mov	r2, r7
 8007ff4:	4628      	mov	r0, r5
 8007ff6:	47b0      	blx	r6
 8007ff8:	2800      	cmp	r0, #0
 8007ffa:	dc06      	bgt.n	800800a <__sflush_r+0xfe>
 8007ffc:	89a3      	ldrh	r3, [r4, #12]
 8007ffe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008002:	81a3      	strh	r3, [r4, #12]
 8008004:	f04f 30ff 	mov.w	r0, #4294967295
 8008008:	e78e      	b.n	8007f28 <__sflush_r+0x1c>
 800800a:	4407      	add	r7, r0
 800800c:	eba8 0800 	sub.w	r8, r8, r0
 8008010:	e7e9      	b.n	8007fe6 <__sflush_r+0xda>
 8008012:	bf00      	nop
 8008014:	20400001 	.word	0x20400001

08008018 <_fflush_r>:
 8008018:	b538      	push	{r3, r4, r5, lr}
 800801a:	690b      	ldr	r3, [r1, #16]
 800801c:	4605      	mov	r5, r0
 800801e:	460c      	mov	r4, r1
 8008020:	b913      	cbnz	r3, 8008028 <_fflush_r+0x10>
 8008022:	2500      	movs	r5, #0
 8008024:	4628      	mov	r0, r5
 8008026:	bd38      	pop	{r3, r4, r5, pc}
 8008028:	b118      	cbz	r0, 8008032 <_fflush_r+0x1a>
 800802a:	6983      	ldr	r3, [r0, #24]
 800802c:	b90b      	cbnz	r3, 8008032 <_fflush_r+0x1a>
 800802e:	f000 f887 	bl	8008140 <__sinit>
 8008032:	4b14      	ldr	r3, [pc, #80]	; (8008084 <_fflush_r+0x6c>)
 8008034:	429c      	cmp	r4, r3
 8008036:	d11b      	bne.n	8008070 <_fflush_r+0x58>
 8008038:	686c      	ldr	r4, [r5, #4]
 800803a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d0ef      	beq.n	8008022 <_fflush_r+0xa>
 8008042:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008044:	07d0      	lsls	r0, r2, #31
 8008046:	d404      	bmi.n	8008052 <_fflush_r+0x3a>
 8008048:	0599      	lsls	r1, r3, #22
 800804a:	d402      	bmi.n	8008052 <_fflush_r+0x3a>
 800804c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800804e:	f000 f91a 	bl	8008286 <__retarget_lock_acquire_recursive>
 8008052:	4628      	mov	r0, r5
 8008054:	4621      	mov	r1, r4
 8008056:	f7ff ff59 	bl	8007f0c <__sflush_r>
 800805a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800805c:	07da      	lsls	r2, r3, #31
 800805e:	4605      	mov	r5, r0
 8008060:	d4e0      	bmi.n	8008024 <_fflush_r+0xc>
 8008062:	89a3      	ldrh	r3, [r4, #12]
 8008064:	059b      	lsls	r3, r3, #22
 8008066:	d4dd      	bmi.n	8008024 <_fflush_r+0xc>
 8008068:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800806a:	f000 f90d 	bl	8008288 <__retarget_lock_release_recursive>
 800806e:	e7d9      	b.n	8008024 <_fflush_r+0xc>
 8008070:	4b05      	ldr	r3, [pc, #20]	; (8008088 <_fflush_r+0x70>)
 8008072:	429c      	cmp	r4, r3
 8008074:	d101      	bne.n	800807a <_fflush_r+0x62>
 8008076:	68ac      	ldr	r4, [r5, #8]
 8008078:	e7df      	b.n	800803a <_fflush_r+0x22>
 800807a:	4b04      	ldr	r3, [pc, #16]	; (800808c <_fflush_r+0x74>)
 800807c:	429c      	cmp	r4, r3
 800807e:	bf08      	it	eq
 8008080:	68ec      	ldreq	r4, [r5, #12]
 8008082:	e7da      	b.n	800803a <_fflush_r+0x22>
 8008084:	0800971c 	.word	0x0800971c
 8008088:	0800973c 	.word	0x0800973c
 800808c:	080096fc 	.word	0x080096fc

08008090 <std>:
 8008090:	2300      	movs	r3, #0
 8008092:	b510      	push	{r4, lr}
 8008094:	4604      	mov	r4, r0
 8008096:	e9c0 3300 	strd	r3, r3, [r0]
 800809a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800809e:	6083      	str	r3, [r0, #8]
 80080a0:	8181      	strh	r1, [r0, #12]
 80080a2:	6643      	str	r3, [r0, #100]	; 0x64
 80080a4:	81c2      	strh	r2, [r0, #14]
 80080a6:	6183      	str	r3, [r0, #24]
 80080a8:	4619      	mov	r1, r3
 80080aa:	2208      	movs	r2, #8
 80080ac:	305c      	adds	r0, #92	; 0x5c
 80080ae:	f7fe faf3 	bl	8006698 <memset>
 80080b2:	4b05      	ldr	r3, [pc, #20]	; (80080c8 <std+0x38>)
 80080b4:	6263      	str	r3, [r4, #36]	; 0x24
 80080b6:	4b05      	ldr	r3, [pc, #20]	; (80080cc <std+0x3c>)
 80080b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80080ba:	4b05      	ldr	r3, [pc, #20]	; (80080d0 <std+0x40>)
 80080bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80080be:	4b05      	ldr	r3, [pc, #20]	; (80080d4 <std+0x44>)
 80080c0:	6224      	str	r4, [r4, #32]
 80080c2:	6323      	str	r3, [r4, #48]	; 0x30
 80080c4:	bd10      	pop	{r4, pc}
 80080c6:	bf00      	nop
 80080c8:	08008f49 	.word	0x08008f49
 80080cc:	08008f6b 	.word	0x08008f6b
 80080d0:	08008fa3 	.word	0x08008fa3
 80080d4:	08008fc7 	.word	0x08008fc7

080080d8 <_cleanup_r>:
 80080d8:	4901      	ldr	r1, [pc, #4]	; (80080e0 <_cleanup_r+0x8>)
 80080da:	f000 b8af 	b.w	800823c <_fwalk_reent>
 80080de:	bf00      	nop
 80080e0:	08008019 	.word	0x08008019

080080e4 <__sfmoreglue>:
 80080e4:	b570      	push	{r4, r5, r6, lr}
 80080e6:	2268      	movs	r2, #104	; 0x68
 80080e8:	1e4d      	subs	r5, r1, #1
 80080ea:	4355      	muls	r5, r2
 80080ec:	460e      	mov	r6, r1
 80080ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80080f2:	f000 fd4b 	bl	8008b8c <_malloc_r>
 80080f6:	4604      	mov	r4, r0
 80080f8:	b140      	cbz	r0, 800810c <__sfmoreglue+0x28>
 80080fa:	2100      	movs	r1, #0
 80080fc:	e9c0 1600 	strd	r1, r6, [r0]
 8008100:	300c      	adds	r0, #12
 8008102:	60a0      	str	r0, [r4, #8]
 8008104:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008108:	f7fe fac6 	bl	8006698 <memset>
 800810c:	4620      	mov	r0, r4
 800810e:	bd70      	pop	{r4, r5, r6, pc}

08008110 <__sfp_lock_acquire>:
 8008110:	4801      	ldr	r0, [pc, #4]	; (8008118 <__sfp_lock_acquire+0x8>)
 8008112:	f000 b8b8 	b.w	8008286 <__retarget_lock_acquire_recursive>
 8008116:	bf00      	nop
 8008118:	200003f1 	.word	0x200003f1

0800811c <__sfp_lock_release>:
 800811c:	4801      	ldr	r0, [pc, #4]	; (8008124 <__sfp_lock_release+0x8>)
 800811e:	f000 b8b3 	b.w	8008288 <__retarget_lock_release_recursive>
 8008122:	bf00      	nop
 8008124:	200003f1 	.word	0x200003f1

08008128 <__sinit_lock_acquire>:
 8008128:	4801      	ldr	r0, [pc, #4]	; (8008130 <__sinit_lock_acquire+0x8>)
 800812a:	f000 b8ac 	b.w	8008286 <__retarget_lock_acquire_recursive>
 800812e:	bf00      	nop
 8008130:	200003f2 	.word	0x200003f2

08008134 <__sinit_lock_release>:
 8008134:	4801      	ldr	r0, [pc, #4]	; (800813c <__sinit_lock_release+0x8>)
 8008136:	f000 b8a7 	b.w	8008288 <__retarget_lock_release_recursive>
 800813a:	bf00      	nop
 800813c:	200003f2 	.word	0x200003f2

08008140 <__sinit>:
 8008140:	b510      	push	{r4, lr}
 8008142:	4604      	mov	r4, r0
 8008144:	f7ff fff0 	bl	8008128 <__sinit_lock_acquire>
 8008148:	69a3      	ldr	r3, [r4, #24]
 800814a:	b11b      	cbz	r3, 8008154 <__sinit+0x14>
 800814c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008150:	f7ff bff0 	b.w	8008134 <__sinit_lock_release>
 8008154:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008158:	6523      	str	r3, [r4, #80]	; 0x50
 800815a:	4b13      	ldr	r3, [pc, #76]	; (80081a8 <__sinit+0x68>)
 800815c:	4a13      	ldr	r2, [pc, #76]	; (80081ac <__sinit+0x6c>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	62a2      	str	r2, [r4, #40]	; 0x28
 8008162:	42a3      	cmp	r3, r4
 8008164:	bf04      	itt	eq
 8008166:	2301      	moveq	r3, #1
 8008168:	61a3      	streq	r3, [r4, #24]
 800816a:	4620      	mov	r0, r4
 800816c:	f000 f820 	bl	80081b0 <__sfp>
 8008170:	6060      	str	r0, [r4, #4]
 8008172:	4620      	mov	r0, r4
 8008174:	f000 f81c 	bl	80081b0 <__sfp>
 8008178:	60a0      	str	r0, [r4, #8]
 800817a:	4620      	mov	r0, r4
 800817c:	f000 f818 	bl	80081b0 <__sfp>
 8008180:	2200      	movs	r2, #0
 8008182:	60e0      	str	r0, [r4, #12]
 8008184:	2104      	movs	r1, #4
 8008186:	6860      	ldr	r0, [r4, #4]
 8008188:	f7ff ff82 	bl	8008090 <std>
 800818c:	68a0      	ldr	r0, [r4, #8]
 800818e:	2201      	movs	r2, #1
 8008190:	2109      	movs	r1, #9
 8008192:	f7ff ff7d 	bl	8008090 <std>
 8008196:	68e0      	ldr	r0, [r4, #12]
 8008198:	2202      	movs	r2, #2
 800819a:	2112      	movs	r1, #18
 800819c:	f7ff ff78 	bl	8008090 <std>
 80081a0:	2301      	movs	r3, #1
 80081a2:	61a3      	str	r3, [r4, #24]
 80081a4:	e7d2      	b.n	800814c <__sinit+0xc>
 80081a6:	bf00      	nop
 80081a8:	08009634 	.word	0x08009634
 80081ac:	080080d9 	.word	0x080080d9

080081b0 <__sfp>:
 80081b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081b2:	4607      	mov	r7, r0
 80081b4:	f7ff ffac 	bl	8008110 <__sfp_lock_acquire>
 80081b8:	4b1e      	ldr	r3, [pc, #120]	; (8008234 <__sfp+0x84>)
 80081ba:	681e      	ldr	r6, [r3, #0]
 80081bc:	69b3      	ldr	r3, [r6, #24]
 80081be:	b913      	cbnz	r3, 80081c6 <__sfp+0x16>
 80081c0:	4630      	mov	r0, r6
 80081c2:	f7ff ffbd 	bl	8008140 <__sinit>
 80081c6:	3648      	adds	r6, #72	; 0x48
 80081c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80081cc:	3b01      	subs	r3, #1
 80081ce:	d503      	bpl.n	80081d8 <__sfp+0x28>
 80081d0:	6833      	ldr	r3, [r6, #0]
 80081d2:	b30b      	cbz	r3, 8008218 <__sfp+0x68>
 80081d4:	6836      	ldr	r6, [r6, #0]
 80081d6:	e7f7      	b.n	80081c8 <__sfp+0x18>
 80081d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80081dc:	b9d5      	cbnz	r5, 8008214 <__sfp+0x64>
 80081de:	4b16      	ldr	r3, [pc, #88]	; (8008238 <__sfp+0x88>)
 80081e0:	60e3      	str	r3, [r4, #12]
 80081e2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80081e6:	6665      	str	r5, [r4, #100]	; 0x64
 80081e8:	f000 f84c 	bl	8008284 <__retarget_lock_init_recursive>
 80081ec:	f7ff ff96 	bl	800811c <__sfp_lock_release>
 80081f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80081f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80081f8:	6025      	str	r5, [r4, #0]
 80081fa:	61a5      	str	r5, [r4, #24]
 80081fc:	2208      	movs	r2, #8
 80081fe:	4629      	mov	r1, r5
 8008200:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008204:	f7fe fa48 	bl	8006698 <memset>
 8008208:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800820c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008210:	4620      	mov	r0, r4
 8008212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008214:	3468      	adds	r4, #104	; 0x68
 8008216:	e7d9      	b.n	80081cc <__sfp+0x1c>
 8008218:	2104      	movs	r1, #4
 800821a:	4638      	mov	r0, r7
 800821c:	f7ff ff62 	bl	80080e4 <__sfmoreglue>
 8008220:	4604      	mov	r4, r0
 8008222:	6030      	str	r0, [r6, #0]
 8008224:	2800      	cmp	r0, #0
 8008226:	d1d5      	bne.n	80081d4 <__sfp+0x24>
 8008228:	f7ff ff78 	bl	800811c <__sfp_lock_release>
 800822c:	230c      	movs	r3, #12
 800822e:	603b      	str	r3, [r7, #0]
 8008230:	e7ee      	b.n	8008210 <__sfp+0x60>
 8008232:	bf00      	nop
 8008234:	08009634 	.word	0x08009634
 8008238:	ffff0001 	.word	0xffff0001

0800823c <_fwalk_reent>:
 800823c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008240:	4606      	mov	r6, r0
 8008242:	4688      	mov	r8, r1
 8008244:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008248:	2700      	movs	r7, #0
 800824a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800824e:	f1b9 0901 	subs.w	r9, r9, #1
 8008252:	d505      	bpl.n	8008260 <_fwalk_reent+0x24>
 8008254:	6824      	ldr	r4, [r4, #0]
 8008256:	2c00      	cmp	r4, #0
 8008258:	d1f7      	bne.n	800824a <_fwalk_reent+0xe>
 800825a:	4638      	mov	r0, r7
 800825c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008260:	89ab      	ldrh	r3, [r5, #12]
 8008262:	2b01      	cmp	r3, #1
 8008264:	d907      	bls.n	8008276 <_fwalk_reent+0x3a>
 8008266:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800826a:	3301      	adds	r3, #1
 800826c:	d003      	beq.n	8008276 <_fwalk_reent+0x3a>
 800826e:	4629      	mov	r1, r5
 8008270:	4630      	mov	r0, r6
 8008272:	47c0      	blx	r8
 8008274:	4307      	orrs	r7, r0
 8008276:	3568      	adds	r5, #104	; 0x68
 8008278:	e7e9      	b.n	800824e <_fwalk_reent+0x12>
	...

0800827c <_localeconv_r>:
 800827c:	4800      	ldr	r0, [pc, #0]	; (8008280 <_localeconv_r+0x4>)
 800827e:	4770      	bx	lr
 8008280:	20000160 	.word	0x20000160

08008284 <__retarget_lock_init_recursive>:
 8008284:	4770      	bx	lr

08008286 <__retarget_lock_acquire_recursive>:
 8008286:	4770      	bx	lr

08008288 <__retarget_lock_release_recursive>:
 8008288:	4770      	bx	lr

0800828a <__swhatbuf_r>:
 800828a:	b570      	push	{r4, r5, r6, lr}
 800828c:	460e      	mov	r6, r1
 800828e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008292:	2900      	cmp	r1, #0
 8008294:	b096      	sub	sp, #88	; 0x58
 8008296:	4614      	mov	r4, r2
 8008298:	461d      	mov	r5, r3
 800829a:	da08      	bge.n	80082ae <__swhatbuf_r+0x24>
 800829c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80082a0:	2200      	movs	r2, #0
 80082a2:	602a      	str	r2, [r5, #0]
 80082a4:	061a      	lsls	r2, r3, #24
 80082a6:	d410      	bmi.n	80082ca <__swhatbuf_r+0x40>
 80082a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80082ac:	e00e      	b.n	80082cc <__swhatbuf_r+0x42>
 80082ae:	466a      	mov	r2, sp
 80082b0:	f000 fee0 	bl	8009074 <_fstat_r>
 80082b4:	2800      	cmp	r0, #0
 80082b6:	dbf1      	blt.n	800829c <__swhatbuf_r+0x12>
 80082b8:	9a01      	ldr	r2, [sp, #4]
 80082ba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80082be:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80082c2:	425a      	negs	r2, r3
 80082c4:	415a      	adcs	r2, r3
 80082c6:	602a      	str	r2, [r5, #0]
 80082c8:	e7ee      	b.n	80082a8 <__swhatbuf_r+0x1e>
 80082ca:	2340      	movs	r3, #64	; 0x40
 80082cc:	2000      	movs	r0, #0
 80082ce:	6023      	str	r3, [r4, #0]
 80082d0:	b016      	add	sp, #88	; 0x58
 80082d2:	bd70      	pop	{r4, r5, r6, pc}

080082d4 <__smakebuf_r>:
 80082d4:	898b      	ldrh	r3, [r1, #12]
 80082d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80082d8:	079d      	lsls	r5, r3, #30
 80082da:	4606      	mov	r6, r0
 80082dc:	460c      	mov	r4, r1
 80082de:	d507      	bpl.n	80082f0 <__smakebuf_r+0x1c>
 80082e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80082e4:	6023      	str	r3, [r4, #0]
 80082e6:	6123      	str	r3, [r4, #16]
 80082e8:	2301      	movs	r3, #1
 80082ea:	6163      	str	r3, [r4, #20]
 80082ec:	b002      	add	sp, #8
 80082ee:	bd70      	pop	{r4, r5, r6, pc}
 80082f0:	ab01      	add	r3, sp, #4
 80082f2:	466a      	mov	r2, sp
 80082f4:	f7ff ffc9 	bl	800828a <__swhatbuf_r>
 80082f8:	9900      	ldr	r1, [sp, #0]
 80082fa:	4605      	mov	r5, r0
 80082fc:	4630      	mov	r0, r6
 80082fe:	f000 fc45 	bl	8008b8c <_malloc_r>
 8008302:	b948      	cbnz	r0, 8008318 <__smakebuf_r+0x44>
 8008304:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008308:	059a      	lsls	r2, r3, #22
 800830a:	d4ef      	bmi.n	80082ec <__smakebuf_r+0x18>
 800830c:	f023 0303 	bic.w	r3, r3, #3
 8008310:	f043 0302 	orr.w	r3, r3, #2
 8008314:	81a3      	strh	r3, [r4, #12]
 8008316:	e7e3      	b.n	80082e0 <__smakebuf_r+0xc>
 8008318:	4b0d      	ldr	r3, [pc, #52]	; (8008350 <__smakebuf_r+0x7c>)
 800831a:	62b3      	str	r3, [r6, #40]	; 0x28
 800831c:	89a3      	ldrh	r3, [r4, #12]
 800831e:	6020      	str	r0, [r4, #0]
 8008320:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008324:	81a3      	strh	r3, [r4, #12]
 8008326:	9b00      	ldr	r3, [sp, #0]
 8008328:	6163      	str	r3, [r4, #20]
 800832a:	9b01      	ldr	r3, [sp, #4]
 800832c:	6120      	str	r0, [r4, #16]
 800832e:	b15b      	cbz	r3, 8008348 <__smakebuf_r+0x74>
 8008330:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008334:	4630      	mov	r0, r6
 8008336:	f000 feaf 	bl	8009098 <_isatty_r>
 800833a:	b128      	cbz	r0, 8008348 <__smakebuf_r+0x74>
 800833c:	89a3      	ldrh	r3, [r4, #12]
 800833e:	f023 0303 	bic.w	r3, r3, #3
 8008342:	f043 0301 	orr.w	r3, r3, #1
 8008346:	81a3      	strh	r3, [r4, #12]
 8008348:	89a0      	ldrh	r0, [r4, #12]
 800834a:	4305      	orrs	r5, r0
 800834c:	81a5      	strh	r5, [r4, #12]
 800834e:	e7cd      	b.n	80082ec <__smakebuf_r+0x18>
 8008350:	080080d9 	.word	0x080080d9

08008354 <malloc>:
 8008354:	4b02      	ldr	r3, [pc, #8]	; (8008360 <malloc+0xc>)
 8008356:	4601      	mov	r1, r0
 8008358:	6818      	ldr	r0, [r3, #0]
 800835a:	f000 bc17 	b.w	8008b8c <_malloc_r>
 800835e:	bf00      	nop
 8008360:	2000000c 	.word	0x2000000c

08008364 <memcpy>:
 8008364:	440a      	add	r2, r1
 8008366:	4291      	cmp	r1, r2
 8008368:	f100 33ff 	add.w	r3, r0, #4294967295
 800836c:	d100      	bne.n	8008370 <memcpy+0xc>
 800836e:	4770      	bx	lr
 8008370:	b510      	push	{r4, lr}
 8008372:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008376:	f803 4f01 	strb.w	r4, [r3, #1]!
 800837a:	4291      	cmp	r1, r2
 800837c:	d1f9      	bne.n	8008372 <memcpy+0xe>
 800837e:	bd10      	pop	{r4, pc}

08008380 <_Balloc>:
 8008380:	b570      	push	{r4, r5, r6, lr}
 8008382:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008384:	4604      	mov	r4, r0
 8008386:	460d      	mov	r5, r1
 8008388:	b976      	cbnz	r6, 80083a8 <_Balloc+0x28>
 800838a:	2010      	movs	r0, #16
 800838c:	f7ff ffe2 	bl	8008354 <malloc>
 8008390:	4602      	mov	r2, r0
 8008392:	6260      	str	r0, [r4, #36]	; 0x24
 8008394:	b920      	cbnz	r0, 80083a0 <_Balloc+0x20>
 8008396:	4b18      	ldr	r3, [pc, #96]	; (80083f8 <_Balloc+0x78>)
 8008398:	4818      	ldr	r0, [pc, #96]	; (80083fc <_Balloc+0x7c>)
 800839a:	2166      	movs	r1, #102	; 0x66
 800839c:	f000 fe2a 	bl	8008ff4 <__assert_func>
 80083a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80083a4:	6006      	str	r6, [r0, #0]
 80083a6:	60c6      	str	r6, [r0, #12]
 80083a8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80083aa:	68f3      	ldr	r3, [r6, #12]
 80083ac:	b183      	cbz	r3, 80083d0 <_Balloc+0x50>
 80083ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80083b0:	68db      	ldr	r3, [r3, #12]
 80083b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80083b6:	b9b8      	cbnz	r0, 80083e8 <_Balloc+0x68>
 80083b8:	2101      	movs	r1, #1
 80083ba:	fa01 f605 	lsl.w	r6, r1, r5
 80083be:	1d72      	adds	r2, r6, #5
 80083c0:	0092      	lsls	r2, r2, #2
 80083c2:	4620      	mov	r0, r4
 80083c4:	f000 fb60 	bl	8008a88 <_calloc_r>
 80083c8:	b160      	cbz	r0, 80083e4 <_Balloc+0x64>
 80083ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80083ce:	e00e      	b.n	80083ee <_Balloc+0x6e>
 80083d0:	2221      	movs	r2, #33	; 0x21
 80083d2:	2104      	movs	r1, #4
 80083d4:	4620      	mov	r0, r4
 80083d6:	f000 fb57 	bl	8008a88 <_calloc_r>
 80083da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80083dc:	60f0      	str	r0, [r6, #12]
 80083de:	68db      	ldr	r3, [r3, #12]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d1e4      	bne.n	80083ae <_Balloc+0x2e>
 80083e4:	2000      	movs	r0, #0
 80083e6:	bd70      	pop	{r4, r5, r6, pc}
 80083e8:	6802      	ldr	r2, [r0, #0]
 80083ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80083ee:	2300      	movs	r3, #0
 80083f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80083f4:	e7f7      	b.n	80083e6 <_Balloc+0x66>
 80083f6:	bf00      	nop
 80083f8:	08009679 	.word	0x08009679
 80083fc:	0800975c 	.word	0x0800975c

08008400 <_Bfree>:
 8008400:	b570      	push	{r4, r5, r6, lr}
 8008402:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008404:	4605      	mov	r5, r0
 8008406:	460c      	mov	r4, r1
 8008408:	b976      	cbnz	r6, 8008428 <_Bfree+0x28>
 800840a:	2010      	movs	r0, #16
 800840c:	f7ff ffa2 	bl	8008354 <malloc>
 8008410:	4602      	mov	r2, r0
 8008412:	6268      	str	r0, [r5, #36]	; 0x24
 8008414:	b920      	cbnz	r0, 8008420 <_Bfree+0x20>
 8008416:	4b09      	ldr	r3, [pc, #36]	; (800843c <_Bfree+0x3c>)
 8008418:	4809      	ldr	r0, [pc, #36]	; (8008440 <_Bfree+0x40>)
 800841a:	218a      	movs	r1, #138	; 0x8a
 800841c:	f000 fdea 	bl	8008ff4 <__assert_func>
 8008420:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008424:	6006      	str	r6, [r0, #0]
 8008426:	60c6      	str	r6, [r0, #12]
 8008428:	b13c      	cbz	r4, 800843a <_Bfree+0x3a>
 800842a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800842c:	6862      	ldr	r2, [r4, #4]
 800842e:	68db      	ldr	r3, [r3, #12]
 8008430:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008434:	6021      	str	r1, [r4, #0]
 8008436:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800843a:	bd70      	pop	{r4, r5, r6, pc}
 800843c:	08009679 	.word	0x08009679
 8008440:	0800975c 	.word	0x0800975c

08008444 <__multadd>:
 8008444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008448:	690d      	ldr	r5, [r1, #16]
 800844a:	4607      	mov	r7, r0
 800844c:	460c      	mov	r4, r1
 800844e:	461e      	mov	r6, r3
 8008450:	f101 0c14 	add.w	ip, r1, #20
 8008454:	2000      	movs	r0, #0
 8008456:	f8dc 3000 	ldr.w	r3, [ip]
 800845a:	b299      	uxth	r1, r3
 800845c:	fb02 6101 	mla	r1, r2, r1, r6
 8008460:	0c1e      	lsrs	r6, r3, #16
 8008462:	0c0b      	lsrs	r3, r1, #16
 8008464:	fb02 3306 	mla	r3, r2, r6, r3
 8008468:	b289      	uxth	r1, r1
 800846a:	3001      	adds	r0, #1
 800846c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008470:	4285      	cmp	r5, r0
 8008472:	f84c 1b04 	str.w	r1, [ip], #4
 8008476:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800847a:	dcec      	bgt.n	8008456 <__multadd+0x12>
 800847c:	b30e      	cbz	r6, 80084c2 <__multadd+0x7e>
 800847e:	68a3      	ldr	r3, [r4, #8]
 8008480:	42ab      	cmp	r3, r5
 8008482:	dc19      	bgt.n	80084b8 <__multadd+0x74>
 8008484:	6861      	ldr	r1, [r4, #4]
 8008486:	4638      	mov	r0, r7
 8008488:	3101      	adds	r1, #1
 800848a:	f7ff ff79 	bl	8008380 <_Balloc>
 800848e:	4680      	mov	r8, r0
 8008490:	b928      	cbnz	r0, 800849e <__multadd+0x5a>
 8008492:	4602      	mov	r2, r0
 8008494:	4b0c      	ldr	r3, [pc, #48]	; (80084c8 <__multadd+0x84>)
 8008496:	480d      	ldr	r0, [pc, #52]	; (80084cc <__multadd+0x88>)
 8008498:	21b5      	movs	r1, #181	; 0xb5
 800849a:	f000 fdab 	bl	8008ff4 <__assert_func>
 800849e:	6922      	ldr	r2, [r4, #16]
 80084a0:	3202      	adds	r2, #2
 80084a2:	f104 010c 	add.w	r1, r4, #12
 80084a6:	0092      	lsls	r2, r2, #2
 80084a8:	300c      	adds	r0, #12
 80084aa:	f7ff ff5b 	bl	8008364 <memcpy>
 80084ae:	4621      	mov	r1, r4
 80084b0:	4638      	mov	r0, r7
 80084b2:	f7ff ffa5 	bl	8008400 <_Bfree>
 80084b6:	4644      	mov	r4, r8
 80084b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80084bc:	3501      	adds	r5, #1
 80084be:	615e      	str	r6, [r3, #20]
 80084c0:	6125      	str	r5, [r4, #16]
 80084c2:	4620      	mov	r0, r4
 80084c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084c8:	080096eb 	.word	0x080096eb
 80084cc:	0800975c 	.word	0x0800975c

080084d0 <__hi0bits>:
 80084d0:	0c03      	lsrs	r3, r0, #16
 80084d2:	041b      	lsls	r3, r3, #16
 80084d4:	b9d3      	cbnz	r3, 800850c <__hi0bits+0x3c>
 80084d6:	0400      	lsls	r0, r0, #16
 80084d8:	2310      	movs	r3, #16
 80084da:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80084de:	bf04      	itt	eq
 80084e0:	0200      	lsleq	r0, r0, #8
 80084e2:	3308      	addeq	r3, #8
 80084e4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80084e8:	bf04      	itt	eq
 80084ea:	0100      	lsleq	r0, r0, #4
 80084ec:	3304      	addeq	r3, #4
 80084ee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80084f2:	bf04      	itt	eq
 80084f4:	0080      	lsleq	r0, r0, #2
 80084f6:	3302      	addeq	r3, #2
 80084f8:	2800      	cmp	r0, #0
 80084fa:	db05      	blt.n	8008508 <__hi0bits+0x38>
 80084fc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008500:	f103 0301 	add.w	r3, r3, #1
 8008504:	bf08      	it	eq
 8008506:	2320      	moveq	r3, #32
 8008508:	4618      	mov	r0, r3
 800850a:	4770      	bx	lr
 800850c:	2300      	movs	r3, #0
 800850e:	e7e4      	b.n	80084da <__hi0bits+0xa>

08008510 <__lo0bits>:
 8008510:	6803      	ldr	r3, [r0, #0]
 8008512:	f013 0207 	ands.w	r2, r3, #7
 8008516:	4601      	mov	r1, r0
 8008518:	d00b      	beq.n	8008532 <__lo0bits+0x22>
 800851a:	07da      	lsls	r2, r3, #31
 800851c:	d423      	bmi.n	8008566 <__lo0bits+0x56>
 800851e:	0798      	lsls	r0, r3, #30
 8008520:	bf49      	itett	mi
 8008522:	085b      	lsrmi	r3, r3, #1
 8008524:	089b      	lsrpl	r3, r3, #2
 8008526:	2001      	movmi	r0, #1
 8008528:	600b      	strmi	r3, [r1, #0]
 800852a:	bf5c      	itt	pl
 800852c:	600b      	strpl	r3, [r1, #0]
 800852e:	2002      	movpl	r0, #2
 8008530:	4770      	bx	lr
 8008532:	b298      	uxth	r0, r3
 8008534:	b9a8      	cbnz	r0, 8008562 <__lo0bits+0x52>
 8008536:	0c1b      	lsrs	r3, r3, #16
 8008538:	2010      	movs	r0, #16
 800853a:	b2da      	uxtb	r2, r3
 800853c:	b90a      	cbnz	r2, 8008542 <__lo0bits+0x32>
 800853e:	3008      	adds	r0, #8
 8008540:	0a1b      	lsrs	r3, r3, #8
 8008542:	071a      	lsls	r2, r3, #28
 8008544:	bf04      	itt	eq
 8008546:	091b      	lsreq	r3, r3, #4
 8008548:	3004      	addeq	r0, #4
 800854a:	079a      	lsls	r2, r3, #30
 800854c:	bf04      	itt	eq
 800854e:	089b      	lsreq	r3, r3, #2
 8008550:	3002      	addeq	r0, #2
 8008552:	07da      	lsls	r2, r3, #31
 8008554:	d403      	bmi.n	800855e <__lo0bits+0x4e>
 8008556:	085b      	lsrs	r3, r3, #1
 8008558:	f100 0001 	add.w	r0, r0, #1
 800855c:	d005      	beq.n	800856a <__lo0bits+0x5a>
 800855e:	600b      	str	r3, [r1, #0]
 8008560:	4770      	bx	lr
 8008562:	4610      	mov	r0, r2
 8008564:	e7e9      	b.n	800853a <__lo0bits+0x2a>
 8008566:	2000      	movs	r0, #0
 8008568:	4770      	bx	lr
 800856a:	2020      	movs	r0, #32
 800856c:	4770      	bx	lr
	...

08008570 <__i2b>:
 8008570:	b510      	push	{r4, lr}
 8008572:	460c      	mov	r4, r1
 8008574:	2101      	movs	r1, #1
 8008576:	f7ff ff03 	bl	8008380 <_Balloc>
 800857a:	4602      	mov	r2, r0
 800857c:	b928      	cbnz	r0, 800858a <__i2b+0x1a>
 800857e:	4b05      	ldr	r3, [pc, #20]	; (8008594 <__i2b+0x24>)
 8008580:	4805      	ldr	r0, [pc, #20]	; (8008598 <__i2b+0x28>)
 8008582:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008586:	f000 fd35 	bl	8008ff4 <__assert_func>
 800858a:	2301      	movs	r3, #1
 800858c:	6144      	str	r4, [r0, #20]
 800858e:	6103      	str	r3, [r0, #16]
 8008590:	bd10      	pop	{r4, pc}
 8008592:	bf00      	nop
 8008594:	080096eb 	.word	0x080096eb
 8008598:	0800975c 	.word	0x0800975c

0800859c <__multiply>:
 800859c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085a0:	4691      	mov	r9, r2
 80085a2:	690a      	ldr	r2, [r1, #16]
 80085a4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80085a8:	429a      	cmp	r2, r3
 80085aa:	bfb8      	it	lt
 80085ac:	460b      	movlt	r3, r1
 80085ae:	460c      	mov	r4, r1
 80085b0:	bfbc      	itt	lt
 80085b2:	464c      	movlt	r4, r9
 80085b4:	4699      	movlt	r9, r3
 80085b6:	6927      	ldr	r7, [r4, #16]
 80085b8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80085bc:	68a3      	ldr	r3, [r4, #8]
 80085be:	6861      	ldr	r1, [r4, #4]
 80085c0:	eb07 060a 	add.w	r6, r7, sl
 80085c4:	42b3      	cmp	r3, r6
 80085c6:	b085      	sub	sp, #20
 80085c8:	bfb8      	it	lt
 80085ca:	3101      	addlt	r1, #1
 80085cc:	f7ff fed8 	bl	8008380 <_Balloc>
 80085d0:	b930      	cbnz	r0, 80085e0 <__multiply+0x44>
 80085d2:	4602      	mov	r2, r0
 80085d4:	4b44      	ldr	r3, [pc, #272]	; (80086e8 <__multiply+0x14c>)
 80085d6:	4845      	ldr	r0, [pc, #276]	; (80086ec <__multiply+0x150>)
 80085d8:	f240 115d 	movw	r1, #349	; 0x15d
 80085dc:	f000 fd0a 	bl	8008ff4 <__assert_func>
 80085e0:	f100 0514 	add.w	r5, r0, #20
 80085e4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80085e8:	462b      	mov	r3, r5
 80085ea:	2200      	movs	r2, #0
 80085ec:	4543      	cmp	r3, r8
 80085ee:	d321      	bcc.n	8008634 <__multiply+0x98>
 80085f0:	f104 0314 	add.w	r3, r4, #20
 80085f4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80085f8:	f109 0314 	add.w	r3, r9, #20
 80085fc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008600:	9202      	str	r2, [sp, #8]
 8008602:	1b3a      	subs	r2, r7, r4
 8008604:	3a15      	subs	r2, #21
 8008606:	f022 0203 	bic.w	r2, r2, #3
 800860a:	3204      	adds	r2, #4
 800860c:	f104 0115 	add.w	r1, r4, #21
 8008610:	428f      	cmp	r7, r1
 8008612:	bf38      	it	cc
 8008614:	2204      	movcc	r2, #4
 8008616:	9201      	str	r2, [sp, #4]
 8008618:	9a02      	ldr	r2, [sp, #8]
 800861a:	9303      	str	r3, [sp, #12]
 800861c:	429a      	cmp	r2, r3
 800861e:	d80c      	bhi.n	800863a <__multiply+0x9e>
 8008620:	2e00      	cmp	r6, #0
 8008622:	dd03      	ble.n	800862c <__multiply+0x90>
 8008624:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008628:	2b00      	cmp	r3, #0
 800862a:	d05a      	beq.n	80086e2 <__multiply+0x146>
 800862c:	6106      	str	r6, [r0, #16]
 800862e:	b005      	add	sp, #20
 8008630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008634:	f843 2b04 	str.w	r2, [r3], #4
 8008638:	e7d8      	b.n	80085ec <__multiply+0x50>
 800863a:	f8b3 a000 	ldrh.w	sl, [r3]
 800863e:	f1ba 0f00 	cmp.w	sl, #0
 8008642:	d024      	beq.n	800868e <__multiply+0xf2>
 8008644:	f104 0e14 	add.w	lr, r4, #20
 8008648:	46a9      	mov	r9, r5
 800864a:	f04f 0c00 	mov.w	ip, #0
 800864e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008652:	f8d9 1000 	ldr.w	r1, [r9]
 8008656:	fa1f fb82 	uxth.w	fp, r2
 800865a:	b289      	uxth	r1, r1
 800865c:	fb0a 110b 	mla	r1, sl, fp, r1
 8008660:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008664:	f8d9 2000 	ldr.w	r2, [r9]
 8008668:	4461      	add	r1, ip
 800866a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800866e:	fb0a c20b 	mla	r2, sl, fp, ip
 8008672:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008676:	b289      	uxth	r1, r1
 8008678:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800867c:	4577      	cmp	r7, lr
 800867e:	f849 1b04 	str.w	r1, [r9], #4
 8008682:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008686:	d8e2      	bhi.n	800864e <__multiply+0xb2>
 8008688:	9a01      	ldr	r2, [sp, #4]
 800868a:	f845 c002 	str.w	ip, [r5, r2]
 800868e:	9a03      	ldr	r2, [sp, #12]
 8008690:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008694:	3304      	adds	r3, #4
 8008696:	f1b9 0f00 	cmp.w	r9, #0
 800869a:	d020      	beq.n	80086de <__multiply+0x142>
 800869c:	6829      	ldr	r1, [r5, #0]
 800869e:	f104 0c14 	add.w	ip, r4, #20
 80086a2:	46ae      	mov	lr, r5
 80086a4:	f04f 0a00 	mov.w	sl, #0
 80086a8:	f8bc b000 	ldrh.w	fp, [ip]
 80086ac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80086b0:	fb09 220b 	mla	r2, r9, fp, r2
 80086b4:	4492      	add	sl, r2
 80086b6:	b289      	uxth	r1, r1
 80086b8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80086bc:	f84e 1b04 	str.w	r1, [lr], #4
 80086c0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80086c4:	f8be 1000 	ldrh.w	r1, [lr]
 80086c8:	0c12      	lsrs	r2, r2, #16
 80086ca:	fb09 1102 	mla	r1, r9, r2, r1
 80086ce:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80086d2:	4567      	cmp	r7, ip
 80086d4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80086d8:	d8e6      	bhi.n	80086a8 <__multiply+0x10c>
 80086da:	9a01      	ldr	r2, [sp, #4]
 80086dc:	50a9      	str	r1, [r5, r2]
 80086de:	3504      	adds	r5, #4
 80086e0:	e79a      	b.n	8008618 <__multiply+0x7c>
 80086e2:	3e01      	subs	r6, #1
 80086e4:	e79c      	b.n	8008620 <__multiply+0x84>
 80086e6:	bf00      	nop
 80086e8:	080096eb 	.word	0x080096eb
 80086ec:	0800975c 	.word	0x0800975c

080086f0 <__pow5mult>:
 80086f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086f4:	4615      	mov	r5, r2
 80086f6:	f012 0203 	ands.w	r2, r2, #3
 80086fa:	4606      	mov	r6, r0
 80086fc:	460f      	mov	r7, r1
 80086fe:	d007      	beq.n	8008710 <__pow5mult+0x20>
 8008700:	4c25      	ldr	r4, [pc, #148]	; (8008798 <__pow5mult+0xa8>)
 8008702:	3a01      	subs	r2, #1
 8008704:	2300      	movs	r3, #0
 8008706:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800870a:	f7ff fe9b 	bl	8008444 <__multadd>
 800870e:	4607      	mov	r7, r0
 8008710:	10ad      	asrs	r5, r5, #2
 8008712:	d03d      	beq.n	8008790 <__pow5mult+0xa0>
 8008714:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008716:	b97c      	cbnz	r4, 8008738 <__pow5mult+0x48>
 8008718:	2010      	movs	r0, #16
 800871a:	f7ff fe1b 	bl	8008354 <malloc>
 800871e:	4602      	mov	r2, r0
 8008720:	6270      	str	r0, [r6, #36]	; 0x24
 8008722:	b928      	cbnz	r0, 8008730 <__pow5mult+0x40>
 8008724:	4b1d      	ldr	r3, [pc, #116]	; (800879c <__pow5mult+0xac>)
 8008726:	481e      	ldr	r0, [pc, #120]	; (80087a0 <__pow5mult+0xb0>)
 8008728:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800872c:	f000 fc62 	bl	8008ff4 <__assert_func>
 8008730:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008734:	6004      	str	r4, [r0, #0]
 8008736:	60c4      	str	r4, [r0, #12]
 8008738:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800873c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008740:	b94c      	cbnz	r4, 8008756 <__pow5mult+0x66>
 8008742:	f240 2171 	movw	r1, #625	; 0x271
 8008746:	4630      	mov	r0, r6
 8008748:	f7ff ff12 	bl	8008570 <__i2b>
 800874c:	2300      	movs	r3, #0
 800874e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008752:	4604      	mov	r4, r0
 8008754:	6003      	str	r3, [r0, #0]
 8008756:	f04f 0900 	mov.w	r9, #0
 800875a:	07eb      	lsls	r3, r5, #31
 800875c:	d50a      	bpl.n	8008774 <__pow5mult+0x84>
 800875e:	4639      	mov	r1, r7
 8008760:	4622      	mov	r2, r4
 8008762:	4630      	mov	r0, r6
 8008764:	f7ff ff1a 	bl	800859c <__multiply>
 8008768:	4639      	mov	r1, r7
 800876a:	4680      	mov	r8, r0
 800876c:	4630      	mov	r0, r6
 800876e:	f7ff fe47 	bl	8008400 <_Bfree>
 8008772:	4647      	mov	r7, r8
 8008774:	106d      	asrs	r5, r5, #1
 8008776:	d00b      	beq.n	8008790 <__pow5mult+0xa0>
 8008778:	6820      	ldr	r0, [r4, #0]
 800877a:	b938      	cbnz	r0, 800878c <__pow5mult+0x9c>
 800877c:	4622      	mov	r2, r4
 800877e:	4621      	mov	r1, r4
 8008780:	4630      	mov	r0, r6
 8008782:	f7ff ff0b 	bl	800859c <__multiply>
 8008786:	6020      	str	r0, [r4, #0]
 8008788:	f8c0 9000 	str.w	r9, [r0]
 800878c:	4604      	mov	r4, r0
 800878e:	e7e4      	b.n	800875a <__pow5mult+0x6a>
 8008790:	4638      	mov	r0, r7
 8008792:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008796:	bf00      	nop
 8008798:	080098a8 	.word	0x080098a8
 800879c:	08009679 	.word	0x08009679
 80087a0:	0800975c 	.word	0x0800975c

080087a4 <__lshift>:
 80087a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087a8:	460c      	mov	r4, r1
 80087aa:	6849      	ldr	r1, [r1, #4]
 80087ac:	6923      	ldr	r3, [r4, #16]
 80087ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80087b2:	68a3      	ldr	r3, [r4, #8]
 80087b4:	4607      	mov	r7, r0
 80087b6:	4691      	mov	r9, r2
 80087b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80087bc:	f108 0601 	add.w	r6, r8, #1
 80087c0:	42b3      	cmp	r3, r6
 80087c2:	db0b      	blt.n	80087dc <__lshift+0x38>
 80087c4:	4638      	mov	r0, r7
 80087c6:	f7ff fddb 	bl	8008380 <_Balloc>
 80087ca:	4605      	mov	r5, r0
 80087cc:	b948      	cbnz	r0, 80087e2 <__lshift+0x3e>
 80087ce:	4602      	mov	r2, r0
 80087d0:	4b2a      	ldr	r3, [pc, #168]	; (800887c <__lshift+0xd8>)
 80087d2:	482b      	ldr	r0, [pc, #172]	; (8008880 <__lshift+0xdc>)
 80087d4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80087d8:	f000 fc0c 	bl	8008ff4 <__assert_func>
 80087dc:	3101      	adds	r1, #1
 80087de:	005b      	lsls	r3, r3, #1
 80087e0:	e7ee      	b.n	80087c0 <__lshift+0x1c>
 80087e2:	2300      	movs	r3, #0
 80087e4:	f100 0114 	add.w	r1, r0, #20
 80087e8:	f100 0210 	add.w	r2, r0, #16
 80087ec:	4618      	mov	r0, r3
 80087ee:	4553      	cmp	r3, sl
 80087f0:	db37      	blt.n	8008862 <__lshift+0xbe>
 80087f2:	6920      	ldr	r0, [r4, #16]
 80087f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80087f8:	f104 0314 	add.w	r3, r4, #20
 80087fc:	f019 091f 	ands.w	r9, r9, #31
 8008800:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008804:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008808:	d02f      	beq.n	800886a <__lshift+0xc6>
 800880a:	f1c9 0e20 	rsb	lr, r9, #32
 800880e:	468a      	mov	sl, r1
 8008810:	f04f 0c00 	mov.w	ip, #0
 8008814:	681a      	ldr	r2, [r3, #0]
 8008816:	fa02 f209 	lsl.w	r2, r2, r9
 800881a:	ea42 020c 	orr.w	r2, r2, ip
 800881e:	f84a 2b04 	str.w	r2, [sl], #4
 8008822:	f853 2b04 	ldr.w	r2, [r3], #4
 8008826:	4298      	cmp	r0, r3
 8008828:	fa22 fc0e 	lsr.w	ip, r2, lr
 800882c:	d8f2      	bhi.n	8008814 <__lshift+0x70>
 800882e:	1b03      	subs	r3, r0, r4
 8008830:	3b15      	subs	r3, #21
 8008832:	f023 0303 	bic.w	r3, r3, #3
 8008836:	3304      	adds	r3, #4
 8008838:	f104 0215 	add.w	r2, r4, #21
 800883c:	4290      	cmp	r0, r2
 800883e:	bf38      	it	cc
 8008840:	2304      	movcc	r3, #4
 8008842:	f841 c003 	str.w	ip, [r1, r3]
 8008846:	f1bc 0f00 	cmp.w	ip, #0
 800884a:	d001      	beq.n	8008850 <__lshift+0xac>
 800884c:	f108 0602 	add.w	r6, r8, #2
 8008850:	3e01      	subs	r6, #1
 8008852:	4638      	mov	r0, r7
 8008854:	612e      	str	r6, [r5, #16]
 8008856:	4621      	mov	r1, r4
 8008858:	f7ff fdd2 	bl	8008400 <_Bfree>
 800885c:	4628      	mov	r0, r5
 800885e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008862:	f842 0f04 	str.w	r0, [r2, #4]!
 8008866:	3301      	adds	r3, #1
 8008868:	e7c1      	b.n	80087ee <__lshift+0x4a>
 800886a:	3904      	subs	r1, #4
 800886c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008870:	f841 2f04 	str.w	r2, [r1, #4]!
 8008874:	4298      	cmp	r0, r3
 8008876:	d8f9      	bhi.n	800886c <__lshift+0xc8>
 8008878:	e7ea      	b.n	8008850 <__lshift+0xac>
 800887a:	bf00      	nop
 800887c:	080096eb 	.word	0x080096eb
 8008880:	0800975c 	.word	0x0800975c

08008884 <__mcmp>:
 8008884:	b530      	push	{r4, r5, lr}
 8008886:	6902      	ldr	r2, [r0, #16]
 8008888:	690c      	ldr	r4, [r1, #16]
 800888a:	1b12      	subs	r2, r2, r4
 800888c:	d10e      	bne.n	80088ac <__mcmp+0x28>
 800888e:	f100 0314 	add.w	r3, r0, #20
 8008892:	3114      	adds	r1, #20
 8008894:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008898:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800889c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80088a0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80088a4:	42a5      	cmp	r5, r4
 80088a6:	d003      	beq.n	80088b0 <__mcmp+0x2c>
 80088a8:	d305      	bcc.n	80088b6 <__mcmp+0x32>
 80088aa:	2201      	movs	r2, #1
 80088ac:	4610      	mov	r0, r2
 80088ae:	bd30      	pop	{r4, r5, pc}
 80088b0:	4283      	cmp	r3, r0
 80088b2:	d3f3      	bcc.n	800889c <__mcmp+0x18>
 80088b4:	e7fa      	b.n	80088ac <__mcmp+0x28>
 80088b6:	f04f 32ff 	mov.w	r2, #4294967295
 80088ba:	e7f7      	b.n	80088ac <__mcmp+0x28>

080088bc <__mdiff>:
 80088bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088c0:	460c      	mov	r4, r1
 80088c2:	4606      	mov	r6, r0
 80088c4:	4611      	mov	r1, r2
 80088c6:	4620      	mov	r0, r4
 80088c8:	4690      	mov	r8, r2
 80088ca:	f7ff ffdb 	bl	8008884 <__mcmp>
 80088ce:	1e05      	subs	r5, r0, #0
 80088d0:	d110      	bne.n	80088f4 <__mdiff+0x38>
 80088d2:	4629      	mov	r1, r5
 80088d4:	4630      	mov	r0, r6
 80088d6:	f7ff fd53 	bl	8008380 <_Balloc>
 80088da:	b930      	cbnz	r0, 80088ea <__mdiff+0x2e>
 80088dc:	4b3a      	ldr	r3, [pc, #232]	; (80089c8 <__mdiff+0x10c>)
 80088de:	4602      	mov	r2, r0
 80088e0:	f240 2132 	movw	r1, #562	; 0x232
 80088e4:	4839      	ldr	r0, [pc, #228]	; (80089cc <__mdiff+0x110>)
 80088e6:	f000 fb85 	bl	8008ff4 <__assert_func>
 80088ea:	2301      	movs	r3, #1
 80088ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80088f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088f4:	bfa4      	itt	ge
 80088f6:	4643      	movge	r3, r8
 80088f8:	46a0      	movge	r8, r4
 80088fa:	4630      	mov	r0, r6
 80088fc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008900:	bfa6      	itte	ge
 8008902:	461c      	movge	r4, r3
 8008904:	2500      	movge	r5, #0
 8008906:	2501      	movlt	r5, #1
 8008908:	f7ff fd3a 	bl	8008380 <_Balloc>
 800890c:	b920      	cbnz	r0, 8008918 <__mdiff+0x5c>
 800890e:	4b2e      	ldr	r3, [pc, #184]	; (80089c8 <__mdiff+0x10c>)
 8008910:	4602      	mov	r2, r0
 8008912:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008916:	e7e5      	b.n	80088e4 <__mdiff+0x28>
 8008918:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800891c:	6926      	ldr	r6, [r4, #16]
 800891e:	60c5      	str	r5, [r0, #12]
 8008920:	f104 0914 	add.w	r9, r4, #20
 8008924:	f108 0514 	add.w	r5, r8, #20
 8008928:	f100 0e14 	add.w	lr, r0, #20
 800892c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008930:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008934:	f108 0210 	add.w	r2, r8, #16
 8008938:	46f2      	mov	sl, lr
 800893a:	2100      	movs	r1, #0
 800893c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008940:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008944:	fa1f f883 	uxth.w	r8, r3
 8008948:	fa11 f18b 	uxtah	r1, r1, fp
 800894c:	0c1b      	lsrs	r3, r3, #16
 800894e:	eba1 0808 	sub.w	r8, r1, r8
 8008952:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008956:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800895a:	fa1f f888 	uxth.w	r8, r8
 800895e:	1419      	asrs	r1, r3, #16
 8008960:	454e      	cmp	r6, r9
 8008962:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008966:	f84a 3b04 	str.w	r3, [sl], #4
 800896a:	d8e7      	bhi.n	800893c <__mdiff+0x80>
 800896c:	1b33      	subs	r3, r6, r4
 800896e:	3b15      	subs	r3, #21
 8008970:	f023 0303 	bic.w	r3, r3, #3
 8008974:	3304      	adds	r3, #4
 8008976:	3415      	adds	r4, #21
 8008978:	42a6      	cmp	r6, r4
 800897a:	bf38      	it	cc
 800897c:	2304      	movcc	r3, #4
 800897e:	441d      	add	r5, r3
 8008980:	4473      	add	r3, lr
 8008982:	469e      	mov	lr, r3
 8008984:	462e      	mov	r6, r5
 8008986:	4566      	cmp	r6, ip
 8008988:	d30e      	bcc.n	80089a8 <__mdiff+0xec>
 800898a:	f10c 0203 	add.w	r2, ip, #3
 800898e:	1b52      	subs	r2, r2, r5
 8008990:	f022 0203 	bic.w	r2, r2, #3
 8008994:	3d03      	subs	r5, #3
 8008996:	45ac      	cmp	ip, r5
 8008998:	bf38      	it	cc
 800899a:	2200      	movcc	r2, #0
 800899c:	441a      	add	r2, r3
 800899e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80089a2:	b17b      	cbz	r3, 80089c4 <__mdiff+0x108>
 80089a4:	6107      	str	r7, [r0, #16]
 80089a6:	e7a3      	b.n	80088f0 <__mdiff+0x34>
 80089a8:	f856 8b04 	ldr.w	r8, [r6], #4
 80089ac:	fa11 f288 	uxtah	r2, r1, r8
 80089b0:	1414      	asrs	r4, r2, #16
 80089b2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80089b6:	b292      	uxth	r2, r2
 80089b8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80089bc:	f84e 2b04 	str.w	r2, [lr], #4
 80089c0:	1421      	asrs	r1, r4, #16
 80089c2:	e7e0      	b.n	8008986 <__mdiff+0xca>
 80089c4:	3f01      	subs	r7, #1
 80089c6:	e7ea      	b.n	800899e <__mdiff+0xe2>
 80089c8:	080096eb 	.word	0x080096eb
 80089cc:	0800975c 	.word	0x0800975c

080089d0 <__d2b>:
 80089d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80089d4:	4689      	mov	r9, r1
 80089d6:	2101      	movs	r1, #1
 80089d8:	ec57 6b10 	vmov	r6, r7, d0
 80089dc:	4690      	mov	r8, r2
 80089de:	f7ff fccf 	bl	8008380 <_Balloc>
 80089e2:	4604      	mov	r4, r0
 80089e4:	b930      	cbnz	r0, 80089f4 <__d2b+0x24>
 80089e6:	4602      	mov	r2, r0
 80089e8:	4b25      	ldr	r3, [pc, #148]	; (8008a80 <__d2b+0xb0>)
 80089ea:	4826      	ldr	r0, [pc, #152]	; (8008a84 <__d2b+0xb4>)
 80089ec:	f240 310a 	movw	r1, #778	; 0x30a
 80089f0:	f000 fb00 	bl	8008ff4 <__assert_func>
 80089f4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80089f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80089fc:	bb35      	cbnz	r5, 8008a4c <__d2b+0x7c>
 80089fe:	2e00      	cmp	r6, #0
 8008a00:	9301      	str	r3, [sp, #4]
 8008a02:	d028      	beq.n	8008a56 <__d2b+0x86>
 8008a04:	4668      	mov	r0, sp
 8008a06:	9600      	str	r6, [sp, #0]
 8008a08:	f7ff fd82 	bl	8008510 <__lo0bits>
 8008a0c:	9900      	ldr	r1, [sp, #0]
 8008a0e:	b300      	cbz	r0, 8008a52 <__d2b+0x82>
 8008a10:	9a01      	ldr	r2, [sp, #4]
 8008a12:	f1c0 0320 	rsb	r3, r0, #32
 8008a16:	fa02 f303 	lsl.w	r3, r2, r3
 8008a1a:	430b      	orrs	r3, r1
 8008a1c:	40c2      	lsrs	r2, r0
 8008a1e:	6163      	str	r3, [r4, #20]
 8008a20:	9201      	str	r2, [sp, #4]
 8008a22:	9b01      	ldr	r3, [sp, #4]
 8008a24:	61a3      	str	r3, [r4, #24]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	bf14      	ite	ne
 8008a2a:	2202      	movne	r2, #2
 8008a2c:	2201      	moveq	r2, #1
 8008a2e:	6122      	str	r2, [r4, #16]
 8008a30:	b1d5      	cbz	r5, 8008a68 <__d2b+0x98>
 8008a32:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008a36:	4405      	add	r5, r0
 8008a38:	f8c9 5000 	str.w	r5, [r9]
 8008a3c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008a40:	f8c8 0000 	str.w	r0, [r8]
 8008a44:	4620      	mov	r0, r4
 8008a46:	b003      	add	sp, #12
 8008a48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008a4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008a50:	e7d5      	b.n	80089fe <__d2b+0x2e>
 8008a52:	6161      	str	r1, [r4, #20]
 8008a54:	e7e5      	b.n	8008a22 <__d2b+0x52>
 8008a56:	a801      	add	r0, sp, #4
 8008a58:	f7ff fd5a 	bl	8008510 <__lo0bits>
 8008a5c:	9b01      	ldr	r3, [sp, #4]
 8008a5e:	6163      	str	r3, [r4, #20]
 8008a60:	2201      	movs	r2, #1
 8008a62:	6122      	str	r2, [r4, #16]
 8008a64:	3020      	adds	r0, #32
 8008a66:	e7e3      	b.n	8008a30 <__d2b+0x60>
 8008a68:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008a6c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008a70:	f8c9 0000 	str.w	r0, [r9]
 8008a74:	6918      	ldr	r0, [r3, #16]
 8008a76:	f7ff fd2b 	bl	80084d0 <__hi0bits>
 8008a7a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008a7e:	e7df      	b.n	8008a40 <__d2b+0x70>
 8008a80:	080096eb 	.word	0x080096eb
 8008a84:	0800975c 	.word	0x0800975c

08008a88 <_calloc_r>:
 8008a88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a8a:	fba1 2402 	umull	r2, r4, r1, r2
 8008a8e:	b94c      	cbnz	r4, 8008aa4 <_calloc_r+0x1c>
 8008a90:	4611      	mov	r1, r2
 8008a92:	9201      	str	r2, [sp, #4]
 8008a94:	f000 f87a 	bl	8008b8c <_malloc_r>
 8008a98:	9a01      	ldr	r2, [sp, #4]
 8008a9a:	4605      	mov	r5, r0
 8008a9c:	b930      	cbnz	r0, 8008aac <_calloc_r+0x24>
 8008a9e:	4628      	mov	r0, r5
 8008aa0:	b003      	add	sp, #12
 8008aa2:	bd30      	pop	{r4, r5, pc}
 8008aa4:	220c      	movs	r2, #12
 8008aa6:	6002      	str	r2, [r0, #0]
 8008aa8:	2500      	movs	r5, #0
 8008aaa:	e7f8      	b.n	8008a9e <_calloc_r+0x16>
 8008aac:	4621      	mov	r1, r4
 8008aae:	f7fd fdf3 	bl	8006698 <memset>
 8008ab2:	e7f4      	b.n	8008a9e <_calloc_r+0x16>

08008ab4 <_free_r>:
 8008ab4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008ab6:	2900      	cmp	r1, #0
 8008ab8:	d044      	beq.n	8008b44 <_free_r+0x90>
 8008aba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008abe:	9001      	str	r0, [sp, #4]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	f1a1 0404 	sub.w	r4, r1, #4
 8008ac6:	bfb8      	it	lt
 8008ac8:	18e4      	addlt	r4, r4, r3
 8008aca:	f000 fb19 	bl	8009100 <__malloc_lock>
 8008ace:	4a1e      	ldr	r2, [pc, #120]	; (8008b48 <_free_r+0x94>)
 8008ad0:	9801      	ldr	r0, [sp, #4]
 8008ad2:	6813      	ldr	r3, [r2, #0]
 8008ad4:	b933      	cbnz	r3, 8008ae4 <_free_r+0x30>
 8008ad6:	6063      	str	r3, [r4, #4]
 8008ad8:	6014      	str	r4, [r2, #0]
 8008ada:	b003      	add	sp, #12
 8008adc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ae0:	f000 bb14 	b.w	800910c <__malloc_unlock>
 8008ae4:	42a3      	cmp	r3, r4
 8008ae6:	d908      	bls.n	8008afa <_free_r+0x46>
 8008ae8:	6825      	ldr	r5, [r4, #0]
 8008aea:	1961      	adds	r1, r4, r5
 8008aec:	428b      	cmp	r3, r1
 8008aee:	bf01      	itttt	eq
 8008af0:	6819      	ldreq	r1, [r3, #0]
 8008af2:	685b      	ldreq	r3, [r3, #4]
 8008af4:	1949      	addeq	r1, r1, r5
 8008af6:	6021      	streq	r1, [r4, #0]
 8008af8:	e7ed      	b.n	8008ad6 <_free_r+0x22>
 8008afa:	461a      	mov	r2, r3
 8008afc:	685b      	ldr	r3, [r3, #4]
 8008afe:	b10b      	cbz	r3, 8008b04 <_free_r+0x50>
 8008b00:	42a3      	cmp	r3, r4
 8008b02:	d9fa      	bls.n	8008afa <_free_r+0x46>
 8008b04:	6811      	ldr	r1, [r2, #0]
 8008b06:	1855      	adds	r5, r2, r1
 8008b08:	42a5      	cmp	r5, r4
 8008b0a:	d10b      	bne.n	8008b24 <_free_r+0x70>
 8008b0c:	6824      	ldr	r4, [r4, #0]
 8008b0e:	4421      	add	r1, r4
 8008b10:	1854      	adds	r4, r2, r1
 8008b12:	42a3      	cmp	r3, r4
 8008b14:	6011      	str	r1, [r2, #0]
 8008b16:	d1e0      	bne.n	8008ada <_free_r+0x26>
 8008b18:	681c      	ldr	r4, [r3, #0]
 8008b1a:	685b      	ldr	r3, [r3, #4]
 8008b1c:	6053      	str	r3, [r2, #4]
 8008b1e:	4421      	add	r1, r4
 8008b20:	6011      	str	r1, [r2, #0]
 8008b22:	e7da      	b.n	8008ada <_free_r+0x26>
 8008b24:	d902      	bls.n	8008b2c <_free_r+0x78>
 8008b26:	230c      	movs	r3, #12
 8008b28:	6003      	str	r3, [r0, #0]
 8008b2a:	e7d6      	b.n	8008ada <_free_r+0x26>
 8008b2c:	6825      	ldr	r5, [r4, #0]
 8008b2e:	1961      	adds	r1, r4, r5
 8008b30:	428b      	cmp	r3, r1
 8008b32:	bf04      	itt	eq
 8008b34:	6819      	ldreq	r1, [r3, #0]
 8008b36:	685b      	ldreq	r3, [r3, #4]
 8008b38:	6063      	str	r3, [r4, #4]
 8008b3a:	bf04      	itt	eq
 8008b3c:	1949      	addeq	r1, r1, r5
 8008b3e:	6021      	streq	r1, [r4, #0]
 8008b40:	6054      	str	r4, [r2, #4]
 8008b42:	e7ca      	b.n	8008ada <_free_r+0x26>
 8008b44:	b003      	add	sp, #12
 8008b46:	bd30      	pop	{r4, r5, pc}
 8008b48:	200003f4 	.word	0x200003f4

08008b4c <sbrk_aligned>:
 8008b4c:	b570      	push	{r4, r5, r6, lr}
 8008b4e:	4e0e      	ldr	r6, [pc, #56]	; (8008b88 <sbrk_aligned+0x3c>)
 8008b50:	460c      	mov	r4, r1
 8008b52:	6831      	ldr	r1, [r6, #0]
 8008b54:	4605      	mov	r5, r0
 8008b56:	b911      	cbnz	r1, 8008b5e <sbrk_aligned+0x12>
 8008b58:	f000 f9e6 	bl	8008f28 <_sbrk_r>
 8008b5c:	6030      	str	r0, [r6, #0]
 8008b5e:	4621      	mov	r1, r4
 8008b60:	4628      	mov	r0, r5
 8008b62:	f000 f9e1 	bl	8008f28 <_sbrk_r>
 8008b66:	1c43      	adds	r3, r0, #1
 8008b68:	d00a      	beq.n	8008b80 <sbrk_aligned+0x34>
 8008b6a:	1cc4      	adds	r4, r0, #3
 8008b6c:	f024 0403 	bic.w	r4, r4, #3
 8008b70:	42a0      	cmp	r0, r4
 8008b72:	d007      	beq.n	8008b84 <sbrk_aligned+0x38>
 8008b74:	1a21      	subs	r1, r4, r0
 8008b76:	4628      	mov	r0, r5
 8008b78:	f000 f9d6 	bl	8008f28 <_sbrk_r>
 8008b7c:	3001      	adds	r0, #1
 8008b7e:	d101      	bne.n	8008b84 <sbrk_aligned+0x38>
 8008b80:	f04f 34ff 	mov.w	r4, #4294967295
 8008b84:	4620      	mov	r0, r4
 8008b86:	bd70      	pop	{r4, r5, r6, pc}
 8008b88:	200003f8 	.word	0x200003f8

08008b8c <_malloc_r>:
 8008b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b90:	1ccd      	adds	r5, r1, #3
 8008b92:	f025 0503 	bic.w	r5, r5, #3
 8008b96:	3508      	adds	r5, #8
 8008b98:	2d0c      	cmp	r5, #12
 8008b9a:	bf38      	it	cc
 8008b9c:	250c      	movcc	r5, #12
 8008b9e:	2d00      	cmp	r5, #0
 8008ba0:	4607      	mov	r7, r0
 8008ba2:	db01      	blt.n	8008ba8 <_malloc_r+0x1c>
 8008ba4:	42a9      	cmp	r1, r5
 8008ba6:	d905      	bls.n	8008bb4 <_malloc_r+0x28>
 8008ba8:	230c      	movs	r3, #12
 8008baa:	603b      	str	r3, [r7, #0]
 8008bac:	2600      	movs	r6, #0
 8008bae:	4630      	mov	r0, r6
 8008bb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bb4:	4e2e      	ldr	r6, [pc, #184]	; (8008c70 <_malloc_r+0xe4>)
 8008bb6:	f000 faa3 	bl	8009100 <__malloc_lock>
 8008bba:	6833      	ldr	r3, [r6, #0]
 8008bbc:	461c      	mov	r4, r3
 8008bbe:	bb34      	cbnz	r4, 8008c0e <_malloc_r+0x82>
 8008bc0:	4629      	mov	r1, r5
 8008bc2:	4638      	mov	r0, r7
 8008bc4:	f7ff ffc2 	bl	8008b4c <sbrk_aligned>
 8008bc8:	1c43      	adds	r3, r0, #1
 8008bca:	4604      	mov	r4, r0
 8008bcc:	d14d      	bne.n	8008c6a <_malloc_r+0xde>
 8008bce:	6834      	ldr	r4, [r6, #0]
 8008bd0:	4626      	mov	r6, r4
 8008bd2:	2e00      	cmp	r6, #0
 8008bd4:	d140      	bne.n	8008c58 <_malloc_r+0xcc>
 8008bd6:	6823      	ldr	r3, [r4, #0]
 8008bd8:	4631      	mov	r1, r6
 8008bda:	4638      	mov	r0, r7
 8008bdc:	eb04 0803 	add.w	r8, r4, r3
 8008be0:	f000 f9a2 	bl	8008f28 <_sbrk_r>
 8008be4:	4580      	cmp	r8, r0
 8008be6:	d13a      	bne.n	8008c5e <_malloc_r+0xd2>
 8008be8:	6821      	ldr	r1, [r4, #0]
 8008bea:	3503      	adds	r5, #3
 8008bec:	1a6d      	subs	r5, r5, r1
 8008bee:	f025 0503 	bic.w	r5, r5, #3
 8008bf2:	3508      	adds	r5, #8
 8008bf4:	2d0c      	cmp	r5, #12
 8008bf6:	bf38      	it	cc
 8008bf8:	250c      	movcc	r5, #12
 8008bfa:	4629      	mov	r1, r5
 8008bfc:	4638      	mov	r0, r7
 8008bfe:	f7ff ffa5 	bl	8008b4c <sbrk_aligned>
 8008c02:	3001      	adds	r0, #1
 8008c04:	d02b      	beq.n	8008c5e <_malloc_r+0xd2>
 8008c06:	6823      	ldr	r3, [r4, #0]
 8008c08:	442b      	add	r3, r5
 8008c0a:	6023      	str	r3, [r4, #0]
 8008c0c:	e00e      	b.n	8008c2c <_malloc_r+0xa0>
 8008c0e:	6822      	ldr	r2, [r4, #0]
 8008c10:	1b52      	subs	r2, r2, r5
 8008c12:	d41e      	bmi.n	8008c52 <_malloc_r+0xc6>
 8008c14:	2a0b      	cmp	r2, #11
 8008c16:	d916      	bls.n	8008c46 <_malloc_r+0xba>
 8008c18:	1961      	adds	r1, r4, r5
 8008c1a:	42a3      	cmp	r3, r4
 8008c1c:	6025      	str	r5, [r4, #0]
 8008c1e:	bf18      	it	ne
 8008c20:	6059      	strne	r1, [r3, #4]
 8008c22:	6863      	ldr	r3, [r4, #4]
 8008c24:	bf08      	it	eq
 8008c26:	6031      	streq	r1, [r6, #0]
 8008c28:	5162      	str	r2, [r4, r5]
 8008c2a:	604b      	str	r3, [r1, #4]
 8008c2c:	4638      	mov	r0, r7
 8008c2e:	f104 060b 	add.w	r6, r4, #11
 8008c32:	f000 fa6b 	bl	800910c <__malloc_unlock>
 8008c36:	f026 0607 	bic.w	r6, r6, #7
 8008c3a:	1d23      	adds	r3, r4, #4
 8008c3c:	1af2      	subs	r2, r6, r3
 8008c3e:	d0b6      	beq.n	8008bae <_malloc_r+0x22>
 8008c40:	1b9b      	subs	r3, r3, r6
 8008c42:	50a3      	str	r3, [r4, r2]
 8008c44:	e7b3      	b.n	8008bae <_malloc_r+0x22>
 8008c46:	6862      	ldr	r2, [r4, #4]
 8008c48:	42a3      	cmp	r3, r4
 8008c4a:	bf0c      	ite	eq
 8008c4c:	6032      	streq	r2, [r6, #0]
 8008c4e:	605a      	strne	r2, [r3, #4]
 8008c50:	e7ec      	b.n	8008c2c <_malloc_r+0xa0>
 8008c52:	4623      	mov	r3, r4
 8008c54:	6864      	ldr	r4, [r4, #4]
 8008c56:	e7b2      	b.n	8008bbe <_malloc_r+0x32>
 8008c58:	4634      	mov	r4, r6
 8008c5a:	6876      	ldr	r6, [r6, #4]
 8008c5c:	e7b9      	b.n	8008bd2 <_malloc_r+0x46>
 8008c5e:	230c      	movs	r3, #12
 8008c60:	603b      	str	r3, [r7, #0]
 8008c62:	4638      	mov	r0, r7
 8008c64:	f000 fa52 	bl	800910c <__malloc_unlock>
 8008c68:	e7a1      	b.n	8008bae <_malloc_r+0x22>
 8008c6a:	6025      	str	r5, [r4, #0]
 8008c6c:	e7de      	b.n	8008c2c <_malloc_r+0xa0>
 8008c6e:	bf00      	nop
 8008c70:	200003f4 	.word	0x200003f4

08008c74 <__sfputc_r>:
 8008c74:	6893      	ldr	r3, [r2, #8]
 8008c76:	3b01      	subs	r3, #1
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	b410      	push	{r4}
 8008c7c:	6093      	str	r3, [r2, #8]
 8008c7e:	da08      	bge.n	8008c92 <__sfputc_r+0x1e>
 8008c80:	6994      	ldr	r4, [r2, #24]
 8008c82:	42a3      	cmp	r3, r4
 8008c84:	db01      	blt.n	8008c8a <__sfputc_r+0x16>
 8008c86:	290a      	cmp	r1, #10
 8008c88:	d103      	bne.n	8008c92 <__sfputc_r+0x1e>
 8008c8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c8e:	f7fe ba03 	b.w	8007098 <__swbuf_r>
 8008c92:	6813      	ldr	r3, [r2, #0]
 8008c94:	1c58      	adds	r0, r3, #1
 8008c96:	6010      	str	r0, [r2, #0]
 8008c98:	7019      	strb	r1, [r3, #0]
 8008c9a:	4608      	mov	r0, r1
 8008c9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ca0:	4770      	bx	lr

08008ca2 <__sfputs_r>:
 8008ca2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ca4:	4606      	mov	r6, r0
 8008ca6:	460f      	mov	r7, r1
 8008ca8:	4614      	mov	r4, r2
 8008caa:	18d5      	adds	r5, r2, r3
 8008cac:	42ac      	cmp	r4, r5
 8008cae:	d101      	bne.n	8008cb4 <__sfputs_r+0x12>
 8008cb0:	2000      	movs	r0, #0
 8008cb2:	e007      	b.n	8008cc4 <__sfputs_r+0x22>
 8008cb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cb8:	463a      	mov	r2, r7
 8008cba:	4630      	mov	r0, r6
 8008cbc:	f7ff ffda 	bl	8008c74 <__sfputc_r>
 8008cc0:	1c43      	adds	r3, r0, #1
 8008cc2:	d1f3      	bne.n	8008cac <__sfputs_r+0xa>
 8008cc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008cc8 <_vfiprintf_r>:
 8008cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ccc:	460d      	mov	r5, r1
 8008cce:	b09d      	sub	sp, #116	; 0x74
 8008cd0:	4614      	mov	r4, r2
 8008cd2:	4698      	mov	r8, r3
 8008cd4:	4606      	mov	r6, r0
 8008cd6:	b118      	cbz	r0, 8008ce0 <_vfiprintf_r+0x18>
 8008cd8:	6983      	ldr	r3, [r0, #24]
 8008cda:	b90b      	cbnz	r3, 8008ce0 <_vfiprintf_r+0x18>
 8008cdc:	f7ff fa30 	bl	8008140 <__sinit>
 8008ce0:	4b89      	ldr	r3, [pc, #548]	; (8008f08 <_vfiprintf_r+0x240>)
 8008ce2:	429d      	cmp	r5, r3
 8008ce4:	d11b      	bne.n	8008d1e <_vfiprintf_r+0x56>
 8008ce6:	6875      	ldr	r5, [r6, #4]
 8008ce8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008cea:	07d9      	lsls	r1, r3, #31
 8008cec:	d405      	bmi.n	8008cfa <_vfiprintf_r+0x32>
 8008cee:	89ab      	ldrh	r3, [r5, #12]
 8008cf0:	059a      	lsls	r2, r3, #22
 8008cf2:	d402      	bmi.n	8008cfa <_vfiprintf_r+0x32>
 8008cf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008cf6:	f7ff fac6 	bl	8008286 <__retarget_lock_acquire_recursive>
 8008cfa:	89ab      	ldrh	r3, [r5, #12]
 8008cfc:	071b      	lsls	r3, r3, #28
 8008cfe:	d501      	bpl.n	8008d04 <_vfiprintf_r+0x3c>
 8008d00:	692b      	ldr	r3, [r5, #16]
 8008d02:	b9eb      	cbnz	r3, 8008d40 <_vfiprintf_r+0x78>
 8008d04:	4629      	mov	r1, r5
 8008d06:	4630      	mov	r0, r6
 8008d08:	f7fe fa18 	bl	800713c <__swsetup_r>
 8008d0c:	b1c0      	cbz	r0, 8008d40 <_vfiprintf_r+0x78>
 8008d0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d10:	07dc      	lsls	r4, r3, #31
 8008d12:	d50e      	bpl.n	8008d32 <_vfiprintf_r+0x6a>
 8008d14:	f04f 30ff 	mov.w	r0, #4294967295
 8008d18:	b01d      	add	sp, #116	; 0x74
 8008d1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d1e:	4b7b      	ldr	r3, [pc, #492]	; (8008f0c <_vfiprintf_r+0x244>)
 8008d20:	429d      	cmp	r5, r3
 8008d22:	d101      	bne.n	8008d28 <_vfiprintf_r+0x60>
 8008d24:	68b5      	ldr	r5, [r6, #8]
 8008d26:	e7df      	b.n	8008ce8 <_vfiprintf_r+0x20>
 8008d28:	4b79      	ldr	r3, [pc, #484]	; (8008f10 <_vfiprintf_r+0x248>)
 8008d2a:	429d      	cmp	r5, r3
 8008d2c:	bf08      	it	eq
 8008d2e:	68f5      	ldreq	r5, [r6, #12]
 8008d30:	e7da      	b.n	8008ce8 <_vfiprintf_r+0x20>
 8008d32:	89ab      	ldrh	r3, [r5, #12]
 8008d34:	0598      	lsls	r0, r3, #22
 8008d36:	d4ed      	bmi.n	8008d14 <_vfiprintf_r+0x4c>
 8008d38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d3a:	f7ff faa5 	bl	8008288 <__retarget_lock_release_recursive>
 8008d3e:	e7e9      	b.n	8008d14 <_vfiprintf_r+0x4c>
 8008d40:	2300      	movs	r3, #0
 8008d42:	9309      	str	r3, [sp, #36]	; 0x24
 8008d44:	2320      	movs	r3, #32
 8008d46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008d4a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d4e:	2330      	movs	r3, #48	; 0x30
 8008d50:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008f14 <_vfiprintf_r+0x24c>
 8008d54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008d58:	f04f 0901 	mov.w	r9, #1
 8008d5c:	4623      	mov	r3, r4
 8008d5e:	469a      	mov	sl, r3
 8008d60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d64:	b10a      	cbz	r2, 8008d6a <_vfiprintf_r+0xa2>
 8008d66:	2a25      	cmp	r2, #37	; 0x25
 8008d68:	d1f9      	bne.n	8008d5e <_vfiprintf_r+0x96>
 8008d6a:	ebba 0b04 	subs.w	fp, sl, r4
 8008d6e:	d00b      	beq.n	8008d88 <_vfiprintf_r+0xc0>
 8008d70:	465b      	mov	r3, fp
 8008d72:	4622      	mov	r2, r4
 8008d74:	4629      	mov	r1, r5
 8008d76:	4630      	mov	r0, r6
 8008d78:	f7ff ff93 	bl	8008ca2 <__sfputs_r>
 8008d7c:	3001      	adds	r0, #1
 8008d7e:	f000 80aa 	beq.w	8008ed6 <_vfiprintf_r+0x20e>
 8008d82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d84:	445a      	add	r2, fp
 8008d86:	9209      	str	r2, [sp, #36]	; 0x24
 8008d88:	f89a 3000 	ldrb.w	r3, [sl]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	f000 80a2 	beq.w	8008ed6 <_vfiprintf_r+0x20e>
 8008d92:	2300      	movs	r3, #0
 8008d94:	f04f 32ff 	mov.w	r2, #4294967295
 8008d98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d9c:	f10a 0a01 	add.w	sl, sl, #1
 8008da0:	9304      	str	r3, [sp, #16]
 8008da2:	9307      	str	r3, [sp, #28]
 8008da4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008da8:	931a      	str	r3, [sp, #104]	; 0x68
 8008daa:	4654      	mov	r4, sl
 8008dac:	2205      	movs	r2, #5
 8008dae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008db2:	4858      	ldr	r0, [pc, #352]	; (8008f14 <_vfiprintf_r+0x24c>)
 8008db4:	f7f7 fa14 	bl	80001e0 <memchr>
 8008db8:	9a04      	ldr	r2, [sp, #16]
 8008dba:	b9d8      	cbnz	r0, 8008df4 <_vfiprintf_r+0x12c>
 8008dbc:	06d1      	lsls	r1, r2, #27
 8008dbe:	bf44      	itt	mi
 8008dc0:	2320      	movmi	r3, #32
 8008dc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008dc6:	0713      	lsls	r3, r2, #28
 8008dc8:	bf44      	itt	mi
 8008dca:	232b      	movmi	r3, #43	; 0x2b
 8008dcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008dd0:	f89a 3000 	ldrb.w	r3, [sl]
 8008dd4:	2b2a      	cmp	r3, #42	; 0x2a
 8008dd6:	d015      	beq.n	8008e04 <_vfiprintf_r+0x13c>
 8008dd8:	9a07      	ldr	r2, [sp, #28]
 8008dda:	4654      	mov	r4, sl
 8008ddc:	2000      	movs	r0, #0
 8008dde:	f04f 0c0a 	mov.w	ip, #10
 8008de2:	4621      	mov	r1, r4
 8008de4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008de8:	3b30      	subs	r3, #48	; 0x30
 8008dea:	2b09      	cmp	r3, #9
 8008dec:	d94e      	bls.n	8008e8c <_vfiprintf_r+0x1c4>
 8008dee:	b1b0      	cbz	r0, 8008e1e <_vfiprintf_r+0x156>
 8008df0:	9207      	str	r2, [sp, #28]
 8008df2:	e014      	b.n	8008e1e <_vfiprintf_r+0x156>
 8008df4:	eba0 0308 	sub.w	r3, r0, r8
 8008df8:	fa09 f303 	lsl.w	r3, r9, r3
 8008dfc:	4313      	orrs	r3, r2
 8008dfe:	9304      	str	r3, [sp, #16]
 8008e00:	46a2      	mov	sl, r4
 8008e02:	e7d2      	b.n	8008daa <_vfiprintf_r+0xe2>
 8008e04:	9b03      	ldr	r3, [sp, #12]
 8008e06:	1d19      	adds	r1, r3, #4
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	9103      	str	r1, [sp, #12]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	bfbb      	ittet	lt
 8008e10:	425b      	neglt	r3, r3
 8008e12:	f042 0202 	orrlt.w	r2, r2, #2
 8008e16:	9307      	strge	r3, [sp, #28]
 8008e18:	9307      	strlt	r3, [sp, #28]
 8008e1a:	bfb8      	it	lt
 8008e1c:	9204      	strlt	r2, [sp, #16]
 8008e1e:	7823      	ldrb	r3, [r4, #0]
 8008e20:	2b2e      	cmp	r3, #46	; 0x2e
 8008e22:	d10c      	bne.n	8008e3e <_vfiprintf_r+0x176>
 8008e24:	7863      	ldrb	r3, [r4, #1]
 8008e26:	2b2a      	cmp	r3, #42	; 0x2a
 8008e28:	d135      	bne.n	8008e96 <_vfiprintf_r+0x1ce>
 8008e2a:	9b03      	ldr	r3, [sp, #12]
 8008e2c:	1d1a      	adds	r2, r3, #4
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	9203      	str	r2, [sp, #12]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	bfb8      	it	lt
 8008e36:	f04f 33ff 	movlt.w	r3, #4294967295
 8008e3a:	3402      	adds	r4, #2
 8008e3c:	9305      	str	r3, [sp, #20]
 8008e3e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008f24 <_vfiprintf_r+0x25c>
 8008e42:	7821      	ldrb	r1, [r4, #0]
 8008e44:	2203      	movs	r2, #3
 8008e46:	4650      	mov	r0, sl
 8008e48:	f7f7 f9ca 	bl	80001e0 <memchr>
 8008e4c:	b140      	cbz	r0, 8008e60 <_vfiprintf_r+0x198>
 8008e4e:	2340      	movs	r3, #64	; 0x40
 8008e50:	eba0 000a 	sub.w	r0, r0, sl
 8008e54:	fa03 f000 	lsl.w	r0, r3, r0
 8008e58:	9b04      	ldr	r3, [sp, #16]
 8008e5a:	4303      	orrs	r3, r0
 8008e5c:	3401      	adds	r4, #1
 8008e5e:	9304      	str	r3, [sp, #16]
 8008e60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e64:	482c      	ldr	r0, [pc, #176]	; (8008f18 <_vfiprintf_r+0x250>)
 8008e66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008e6a:	2206      	movs	r2, #6
 8008e6c:	f7f7 f9b8 	bl	80001e0 <memchr>
 8008e70:	2800      	cmp	r0, #0
 8008e72:	d03f      	beq.n	8008ef4 <_vfiprintf_r+0x22c>
 8008e74:	4b29      	ldr	r3, [pc, #164]	; (8008f1c <_vfiprintf_r+0x254>)
 8008e76:	bb1b      	cbnz	r3, 8008ec0 <_vfiprintf_r+0x1f8>
 8008e78:	9b03      	ldr	r3, [sp, #12]
 8008e7a:	3307      	adds	r3, #7
 8008e7c:	f023 0307 	bic.w	r3, r3, #7
 8008e80:	3308      	adds	r3, #8
 8008e82:	9303      	str	r3, [sp, #12]
 8008e84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e86:	443b      	add	r3, r7
 8008e88:	9309      	str	r3, [sp, #36]	; 0x24
 8008e8a:	e767      	b.n	8008d5c <_vfiprintf_r+0x94>
 8008e8c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e90:	460c      	mov	r4, r1
 8008e92:	2001      	movs	r0, #1
 8008e94:	e7a5      	b.n	8008de2 <_vfiprintf_r+0x11a>
 8008e96:	2300      	movs	r3, #0
 8008e98:	3401      	adds	r4, #1
 8008e9a:	9305      	str	r3, [sp, #20]
 8008e9c:	4619      	mov	r1, r3
 8008e9e:	f04f 0c0a 	mov.w	ip, #10
 8008ea2:	4620      	mov	r0, r4
 8008ea4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ea8:	3a30      	subs	r2, #48	; 0x30
 8008eaa:	2a09      	cmp	r2, #9
 8008eac:	d903      	bls.n	8008eb6 <_vfiprintf_r+0x1ee>
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d0c5      	beq.n	8008e3e <_vfiprintf_r+0x176>
 8008eb2:	9105      	str	r1, [sp, #20]
 8008eb4:	e7c3      	b.n	8008e3e <_vfiprintf_r+0x176>
 8008eb6:	fb0c 2101 	mla	r1, ip, r1, r2
 8008eba:	4604      	mov	r4, r0
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	e7f0      	b.n	8008ea2 <_vfiprintf_r+0x1da>
 8008ec0:	ab03      	add	r3, sp, #12
 8008ec2:	9300      	str	r3, [sp, #0]
 8008ec4:	462a      	mov	r2, r5
 8008ec6:	4b16      	ldr	r3, [pc, #88]	; (8008f20 <_vfiprintf_r+0x258>)
 8008ec8:	a904      	add	r1, sp, #16
 8008eca:	4630      	mov	r0, r6
 8008ecc:	f7fd fc8c 	bl	80067e8 <_printf_float>
 8008ed0:	4607      	mov	r7, r0
 8008ed2:	1c78      	adds	r0, r7, #1
 8008ed4:	d1d6      	bne.n	8008e84 <_vfiprintf_r+0x1bc>
 8008ed6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ed8:	07d9      	lsls	r1, r3, #31
 8008eda:	d405      	bmi.n	8008ee8 <_vfiprintf_r+0x220>
 8008edc:	89ab      	ldrh	r3, [r5, #12]
 8008ede:	059a      	lsls	r2, r3, #22
 8008ee0:	d402      	bmi.n	8008ee8 <_vfiprintf_r+0x220>
 8008ee2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ee4:	f7ff f9d0 	bl	8008288 <__retarget_lock_release_recursive>
 8008ee8:	89ab      	ldrh	r3, [r5, #12]
 8008eea:	065b      	lsls	r3, r3, #25
 8008eec:	f53f af12 	bmi.w	8008d14 <_vfiprintf_r+0x4c>
 8008ef0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008ef2:	e711      	b.n	8008d18 <_vfiprintf_r+0x50>
 8008ef4:	ab03      	add	r3, sp, #12
 8008ef6:	9300      	str	r3, [sp, #0]
 8008ef8:	462a      	mov	r2, r5
 8008efa:	4b09      	ldr	r3, [pc, #36]	; (8008f20 <_vfiprintf_r+0x258>)
 8008efc:	a904      	add	r1, sp, #16
 8008efe:	4630      	mov	r0, r6
 8008f00:	f7fd ff16 	bl	8006d30 <_printf_i>
 8008f04:	e7e4      	b.n	8008ed0 <_vfiprintf_r+0x208>
 8008f06:	bf00      	nop
 8008f08:	0800971c 	.word	0x0800971c
 8008f0c:	0800973c 	.word	0x0800973c
 8008f10:	080096fc 	.word	0x080096fc
 8008f14:	080098b4 	.word	0x080098b4
 8008f18:	080098be 	.word	0x080098be
 8008f1c:	080067e9 	.word	0x080067e9
 8008f20:	08008ca3 	.word	0x08008ca3
 8008f24:	080098ba 	.word	0x080098ba

08008f28 <_sbrk_r>:
 8008f28:	b538      	push	{r3, r4, r5, lr}
 8008f2a:	4d06      	ldr	r5, [pc, #24]	; (8008f44 <_sbrk_r+0x1c>)
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	4604      	mov	r4, r0
 8008f30:	4608      	mov	r0, r1
 8008f32:	602b      	str	r3, [r5, #0]
 8008f34:	f7f9 f9b2 	bl	800229c <_sbrk>
 8008f38:	1c43      	adds	r3, r0, #1
 8008f3a:	d102      	bne.n	8008f42 <_sbrk_r+0x1a>
 8008f3c:	682b      	ldr	r3, [r5, #0]
 8008f3e:	b103      	cbz	r3, 8008f42 <_sbrk_r+0x1a>
 8008f40:	6023      	str	r3, [r4, #0]
 8008f42:	bd38      	pop	{r3, r4, r5, pc}
 8008f44:	200003fc 	.word	0x200003fc

08008f48 <__sread>:
 8008f48:	b510      	push	{r4, lr}
 8008f4a:	460c      	mov	r4, r1
 8008f4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f50:	f000 f8e2 	bl	8009118 <_read_r>
 8008f54:	2800      	cmp	r0, #0
 8008f56:	bfab      	itete	ge
 8008f58:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008f5a:	89a3      	ldrhlt	r3, [r4, #12]
 8008f5c:	181b      	addge	r3, r3, r0
 8008f5e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008f62:	bfac      	ite	ge
 8008f64:	6563      	strge	r3, [r4, #84]	; 0x54
 8008f66:	81a3      	strhlt	r3, [r4, #12]
 8008f68:	bd10      	pop	{r4, pc}

08008f6a <__swrite>:
 8008f6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f6e:	461f      	mov	r7, r3
 8008f70:	898b      	ldrh	r3, [r1, #12]
 8008f72:	05db      	lsls	r3, r3, #23
 8008f74:	4605      	mov	r5, r0
 8008f76:	460c      	mov	r4, r1
 8008f78:	4616      	mov	r6, r2
 8008f7a:	d505      	bpl.n	8008f88 <__swrite+0x1e>
 8008f7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f80:	2302      	movs	r3, #2
 8008f82:	2200      	movs	r2, #0
 8008f84:	f000 f898 	bl	80090b8 <_lseek_r>
 8008f88:	89a3      	ldrh	r3, [r4, #12]
 8008f8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008f92:	81a3      	strh	r3, [r4, #12]
 8008f94:	4632      	mov	r2, r6
 8008f96:	463b      	mov	r3, r7
 8008f98:	4628      	mov	r0, r5
 8008f9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f9e:	f000 b817 	b.w	8008fd0 <_write_r>

08008fa2 <__sseek>:
 8008fa2:	b510      	push	{r4, lr}
 8008fa4:	460c      	mov	r4, r1
 8008fa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008faa:	f000 f885 	bl	80090b8 <_lseek_r>
 8008fae:	1c43      	adds	r3, r0, #1
 8008fb0:	89a3      	ldrh	r3, [r4, #12]
 8008fb2:	bf15      	itete	ne
 8008fb4:	6560      	strne	r0, [r4, #84]	; 0x54
 8008fb6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008fba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008fbe:	81a3      	strheq	r3, [r4, #12]
 8008fc0:	bf18      	it	ne
 8008fc2:	81a3      	strhne	r3, [r4, #12]
 8008fc4:	bd10      	pop	{r4, pc}

08008fc6 <__sclose>:
 8008fc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fca:	f000 b831 	b.w	8009030 <_close_r>
	...

08008fd0 <_write_r>:
 8008fd0:	b538      	push	{r3, r4, r5, lr}
 8008fd2:	4d07      	ldr	r5, [pc, #28]	; (8008ff0 <_write_r+0x20>)
 8008fd4:	4604      	mov	r4, r0
 8008fd6:	4608      	mov	r0, r1
 8008fd8:	4611      	mov	r1, r2
 8008fda:	2200      	movs	r2, #0
 8008fdc:	602a      	str	r2, [r5, #0]
 8008fde:	461a      	mov	r2, r3
 8008fe0:	f7f9 f90b 	bl	80021fa <_write>
 8008fe4:	1c43      	adds	r3, r0, #1
 8008fe6:	d102      	bne.n	8008fee <_write_r+0x1e>
 8008fe8:	682b      	ldr	r3, [r5, #0]
 8008fea:	b103      	cbz	r3, 8008fee <_write_r+0x1e>
 8008fec:	6023      	str	r3, [r4, #0]
 8008fee:	bd38      	pop	{r3, r4, r5, pc}
 8008ff0:	200003fc 	.word	0x200003fc

08008ff4 <__assert_func>:
 8008ff4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008ff6:	4614      	mov	r4, r2
 8008ff8:	461a      	mov	r2, r3
 8008ffa:	4b09      	ldr	r3, [pc, #36]	; (8009020 <__assert_func+0x2c>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	4605      	mov	r5, r0
 8009000:	68d8      	ldr	r0, [r3, #12]
 8009002:	b14c      	cbz	r4, 8009018 <__assert_func+0x24>
 8009004:	4b07      	ldr	r3, [pc, #28]	; (8009024 <__assert_func+0x30>)
 8009006:	9100      	str	r1, [sp, #0]
 8009008:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800900c:	4906      	ldr	r1, [pc, #24]	; (8009028 <__assert_func+0x34>)
 800900e:	462b      	mov	r3, r5
 8009010:	f000 f81e 	bl	8009050 <fiprintf>
 8009014:	f000 f89f 	bl	8009156 <abort>
 8009018:	4b04      	ldr	r3, [pc, #16]	; (800902c <__assert_func+0x38>)
 800901a:	461c      	mov	r4, r3
 800901c:	e7f3      	b.n	8009006 <__assert_func+0x12>
 800901e:	bf00      	nop
 8009020:	2000000c 	.word	0x2000000c
 8009024:	080098c5 	.word	0x080098c5
 8009028:	080098d2 	.word	0x080098d2
 800902c:	08009900 	.word	0x08009900

08009030 <_close_r>:
 8009030:	b538      	push	{r3, r4, r5, lr}
 8009032:	4d06      	ldr	r5, [pc, #24]	; (800904c <_close_r+0x1c>)
 8009034:	2300      	movs	r3, #0
 8009036:	4604      	mov	r4, r0
 8009038:	4608      	mov	r0, r1
 800903a:	602b      	str	r3, [r5, #0]
 800903c:	f7f9 f8f9 	bl	8002232 <_close>
 8009040:	1c43      	adds	r3, r0, #1
 8009042:	d102      	bne.n	800904a <_close_r+0x1a>
 8009044:	682b      	ldr	r3, [r5, #0]
 8009046:	b103      	cbz	r3, 800904a <_close_r+0x1a>
 8009048:	6023      	str	r3, [r4, #0]
 800904a:	bd38      	pop	{r3, r4, r5, pc}
 800904c:	200003fc 	.word	0x200003fc

08009050 <fiprintf>:
 8009050:	b40e      	push	{r1, r2, r3}
 8009052:	b503      	push	{r0, r1, lr}
 8009054:	4601      	mov	r1, r0
 8009056:	ab03      	add	r3, sp, #12
 8009058:	4805      	ldr	r0, [pc, #20]	; (8009070 <fiprintf+0x20>)
 800905a:	f853 2b04 	ldr.w	r2, [r3], #4
 800905e:	6800      	ldr	r0, [r0, #0]
 8009060:	9301      	str	r3, [sp, #4]
 8009062:	f7ff fe31 	bl	8008cc8 <_vfiprintf_r>
 8009066:	b002      	add	sp, #8
 8009068:	f85d eb04 	ldr.w	lr, [sp], #4
 800906c:	b003      	add	sp, #12
 800906e:	4770      	bx	lr
 8009070:	2000000c 	.word	0x2000000c

08009074 <_fstat_r>:
 8009074:	b538      	push	{r3, r4, r5, lr}
 8009076:	4d07      	ldr	r5, [pc, #28]	; (8009094 <_fstat_r+0x20>)
 8009078:	2300      	movs	r3, #0
 800907a:	4604      	mov	r4, r0
 800907c:	4608      	mov	r0, r1
 800907e:	4611      	mov	r1, r2
 8009080:	602b      	str	r3, [r5, #0]
 8009082:	f7f9 f8e2 	bl	800224a <_fstat>
 8009086:	1c43      	adds	r3, r0, #1
 8009088:	d102      	bne.n	8009090 <_fstat_r+0x1c>
 800908a:	682b      	ldr	r3, [r5, #0]
 800908c:	b103      	cbz	r3, 8009090 <_fstat_r+0x1c>
 800908e:	6023      	str	r3, [r4, #0]
 8009090:	bd38      	pop	{r3, r4, r5, pc}
 8009092:	bf00      	nop
 8009094:	200003fc 	.word	0x200003fc

08009098 <_isatty_r>:
 8009098:	b538      	push	{r3, r4, r5, lr}
 800909a:	4d06      	ldr	r5, [pc, #24]	; (80090b4 <_isatty_r+0x1c>)
 800909c:	2300      	movs	r3, #0
 800909e:	4604      	mov	r4, r0
 80090a0:	4608      	mov	r0, r1
 80090a2:	602b      	str	r3, [r5, #0]
 80090a4:	f7f9 f8e1 	bl	800226a <_isatty>
 80090a8:	1c43      	adds	r3, r0, #1
 80090aa:	d102      	bne.n	80090b2 <_isatty_r+0x1a>
 80090ac:	682b      	ldr	r3, [r5, #0]
 80090ae:	b103      	cbz	r3, 80090b2 <_isatty_r+0x1a>
 80090b0:	6023      	str	r3, [r4, #0]
 80090b2:	bd38      	pop	{r3, r4, r5, pc}
 80090b4:	200003fc 	.word	0x200003fc

080090b8 <_lseek_r>:
 80090b8:	b538      	push	{r3, r4, r5, lr}
 80090ba:	4d07      	ldr	r5, [pc, #28]	; (80090d8 <_lseek_r+0x20>)
 80090bc:	4604      	mov	r4, r0
 80090be:	4608      	mov	r0, r1
 80090c0:	4611      	mov	r1, r2
 80090c2:	2200      	movs	r2, #0
 80090c4:	602a      	str	r2, [r5, #0]
 80090c6:	461a      	mov	r2, r3
 80090c8:	f7f9 f8da 	bl	8002280 <_lseek>
 80090cc:	1c43      	adds	r3, r0, #1
 80090ce:	d102      	bne.n	80090d6 <_lseek_r+0x1e>
 80090d0:	682b      	ldr	r3, [r5, #0]
 80090d2:	b103      	cbz	r3, 80090d6 <_lseek_r+0x1e>
 80090d4:	6023      	str	r3, [r4, #0]
 80090d6:	bd38      	pop	{r3, r4, r5, pc}
 80090d8:	200003fc 	.word	0x200003fc

080090dc <__ascii_mbtowc>:
 80090dc:	b082      	sub	sp, #8
 80090de:	b901      	cbnz	r1, 80090e2 <__ascii_mbtowc+0x6>
 80090e0:	a901      	add	r1, sp, #4
 80090e2:	b142      	cbz	r2, 80090f6 <__ascii_mbtowc+0x1a>
 80090e4:	b14b      	cbz	r3, 80090fa <__ascii_mbtowc+0x1e>
 80090e6:	7813      	ldrb	r3, [r2, #0]
 80090e8:	600b      	str	r3, [r1, #0]
 80090ea:	7812      	ldrb	r2, [r2, #0]
 80090ec:	1e10      	subs	r0, r2, #0
 80090ee:	bf18      	it	ne
 80090f0:	2001      	movne	r0, #1
 80090f2:	b002      	add	sp, #8
 80090f4:	4770      	bx	lr
 80090f6:	4610      	mov	r0, r2
 80090f8:	e7fb      	b.n	80090f2 <__ascii_mbtowc+0x16>
 80090fa:	f06f 0001 	mvn.w	r0, #1
 80090fe:	e7f8      	b.n	80090f2 <__ascii_mbtowc+0x16>

08009100 <__malloc_lock>:
 8009100:	4801      	ldr	r0, [pc, #4]	; (8009108 <__malloc_lock+0x8>)
 8009102:	f7ff b8c0 	b.w	8008286 <__retarget_lock_acquire_recursive>
 8009106:	bf00      	nop
 8009108:	200003f0 	.word	0x200003f0

0800910c <__malloc_unlock>:
 800910c:	4801      	ldr	r0, [pc, #4]	; (8009114 <__malloc_unlock+0x8>)
 800910e:	f7ff b8bb 	b.w	8008288 <__retarget_lock_release_recursive>
 8009112:	bf00      	nop
 8009114:	200003f0 	.word	0x200003f0

08009118 <_read_r>:
 8009118:	b538      	push	{r3, r4, r5, lr}
 800911a:	4d07      	ldr	r5, [pc, #28]	; (8009138 <_read_r+0x20>)
 800911c:	4604      	mov	r4, r0
 800911e:	4608      	mov	r0, r1
 8009120:	4611      	mov	r1, r2
 8009122:	2200      	movs	r2, #0
 8009124:	602a      	str	r2, [r5, #0]
 8009126:	461a      	mov	r2, r3
 8009128:	f7f9 f84a 	bl	80021c0 <_read>
 800912c:	1c43      	adds	r3, r0, #1
 800912e:	d102      	bne.n	8009136 <_read_r+0x1e>
 8009130:	682b      	ldr	r3, [r5, #0]
 8009132:	b103      	cbz	r3, 8009136 <_read_r+0x1e>
 8009134:	6023      	str	r3, [r4, #0]
 8009136:	bd38      	pop	{r3, r4, r5, pc}
 8009138:	200003fc 	.word	0x200003fc

0800913c <__ascii_wctomb>:
 800913c:	b149      	cbz	r1, 8009152 <__ascii_wctomb+0x16>
 800913e:	2aff      	cmp	r2, #255	; 0xff
 8009140:	bf85      	ittet	hi
 8009142:	238a      	movhi	r3, #138	; 0x8a
 8009144:	6003      	strhi	r3, [r0, #0]
 8009146:	700a      	strbls	r2, [r1, #0]
 8009148:	f04f 30ff 	movhi.w	r0, #4294967295
 800914c:	bf98      	it	ls
 800914e:	2001      	movls	r0, #1
 8009150:	4770      	bx	lr
 8009152:	4608      	mov	r0, r1
 8009154:	4770      	bx	lr

08009156 <abort>:
 8009156:	b508      	push	{r3, lr}
 8009158:	2006      	movs	r0, #6
 800915a:	f000 f82b 	bl	80091b4 <raise>
 800915e:	2001      	movs	r0, #1
 8009160:	f7f9 f824 	bl	80021ac <_exit>

08009164 <_raise_r>:
 8009164:	291f      	cmp	r1, #31
 8009166:	b538      	push	{r3, r4, r5, lr}
 8009168:	4604      	mov	r4, r0
 800916a:	460d      	mov	r5, r1
 800916c:	d904      	bls.n	8009178 <_raise_r+0x14>
 800916e:	2316      	movs	r3, #22
 8009170:	6003      	str	r3, [r0, #0]
 8009172:	f04f 30ff 	mov.w	r0, #4294967295
 8009176:	bd38      	pop	{r3, r4, r5, pc}
 8009178:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800917a:	b112      	cbz	r2, 8009182 <_raise_r+0x1e>
 800917c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009180:	b94b      	cbnz	r3, 8009196 <_raise_r+0x32>
 8009182:	4620      	mov	r0, r4
 8009184:	f000 f830 	bl	80091e8 <_getpid_r>
 8009188:	462a      	mov	r2, r5
 800918a:	4601      	mov	r1, r0
 800918c:	4620      	mov	r0, r4
 800918e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009192:	f000 b817 	b.w	80091c4 <_kill_r>
 8009196:	2b01      	cmp	r3, #1
 8009198:	d00a      	beq.n	80091b0 <_raise_r+0x4c>
 800919a:	1c59      	adds	r1, r3, #1
 800919c:	d103      	bne.n	80091a6 <_raise_r+0x42>
 800919e:	2316      	movs	r3, #22
 80091a0:	6003      	str	r3, [r0, #0]
 80091a2:	2001      	movs	r0, #1
 80091a4:	e7e7      	b.n	8009176 <_raise_r+0x12>
 80091a6:	2400      	movs	r4, #0
 80091a8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80091ac:	4628      	mov	r0, r5
 80091ae:	4798      	blx	r3
 80091b0:	2000      	movs	r0, #0
 80091b2:	e7e0      	b.n	8009176 <_raise_r+0x12>

080091b4 <raise>:
 80091b4:	4b02      	ldr	r3, [pc, #8]	; (80091c0 <raise+0xc>)
 80091b6:	4601      	mov	r1, r0
 80091b8:	6818      	ldr	r0, [r3, #0]
 80091ba:	f7ff bfd3 	b.w	8009164 <_raise_r>
 80091be:	bf00      	nop
 80091c0:	2000000c 	.word	0x2000000c

080091c4 <_kill_r>:
 80091c4:	b538      	push	{r3, r4, r5, lr}
 80091c6:	4d07      	ldr	r5, [pc, #28]	; (80091e4 <_kill_r+0x20>)
 80091c8:	2300      	movs	r3, #0
 80091ca:	4604      	mov	r4, r0
 80091cc:	4608      	mov	r0, r1
 80091ce:	4611      	mov	r1, r2
 80091d0:	602b      	str	r3, [r5, #0]
 80091d2:	f7f8 ffdb 	bl	800218c <_kill>
 80091d6:	1c43      	adds	r3, r0, #1
 80091d8:	d102      	bne.n	80091e0 <_kill_r+0x1c>
 80091da:	682b      	ldr	r3, [r5, #0]
 80091dc:	b103      	cbz	r3, 80091e0 <_kill_r+0x1c>
 80091de:	6023      	str	r3, [r4, #0]
 80091e0:	bd38      	pop	{r3, r4, r5, pc}
 80091e2:	bf00      	nop
 80091e4:	200003fc 	.word	0x200003fc

080091e8 <_getpid_r>:
 80091e8:	f7f8 bfc8 	b.w	800217c <_getpid>

080091ec <atan2f>:
 80091ec:	f000 b800 	b.w	80091f0 <__ieee754_atan2f>

080091f0 <__ieee754_atan2f>:
 80091f0:	ee10 2a90 	vmov	r2, s1
 80091f4:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80091f8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80091fc:	b510      	push	{r4, lr}
 80091fe:	eef0 7a40 	vmov.f32	s15, s0
 8009202:	dc06      	bgt.n	8009212 <__ieee754_atan2f+0x22>
 8009204:	ee10 0a10 	vmov	r0, s0
 8009208:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800920c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009210:	dd04      	ble.n	800921c <__ieee754_atan2f+0x2c>
 8009212:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8009216:	eeb0 0a67 	vmov.f32	s0, s15
 800921a:	bd10      	pop	{r4, pc}
 800921c:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8009220:	d103      	bne.n	800922a <__ieee754_atan2f+0x3a>
 8009222:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009226:	f000 b883 	b.w	8009330 <atanf>
 800922a:	1794      	asrs	r4, r2, #30
 800922c:	f004 0402 	and.w	r4, r4, #2
 8009230:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8009234:	b943      	cbnz	r3, 8009248 <__ieee754_atan2f+0x58>
 8009236:	2c02      	cmp	r4, #2
 8009238:	d05e      	beq.n	80092f8 <__ieee754_atan2f+0x108>
 800923a:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800930c <__ieee754_atan2f+0x11c>
 800923e:	2c03      	cmp	r4, #3
 8009240:	bf08      	it	eq
 8009242:	eef0 7a47 	vmoveq.f32	s15, s14
 8009246:	e7e6      	b.n	8009216 <__ieee754_atan2f+0x26>
 8009248:	b941      	cbnz	r1, 800925c <__ieee754_atan2f+0x6c>
 800924a:	eddf 7a31 	vldr	s15, [pc, #196]	; 8009310 <__ieee754_atan2f+0x120>
 800924e:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8009314 <__ieee754_atan2f+0x124>
 8009252:	2800      	cmp	r0, #0
 8009254:	bfb8      	it	lt
 8009256:	eef0 7a40 	vmovlt.f32	s15, s0
 800925a:	e7dc      	b.n	8009216 <__ieee754_atan2f+0x26>
 800925c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8009260:	d110      	bne.n	8009284 <__ieee754_atan2f+0x94>
 8009262:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009266:	f104 34ff 	add.w	r4, r4, #4294967295
 800926a:	d107      	bne.n	800927c <__ieee754_atan2f+0x8c>
 800926c:	2c02      	cmp	r4, #2
 800926e:	d846      	bhi.n	80092fe <__ieee754_atan2f+0x10e>
 8009270:	4b29      	ldr	r3, [pc, #164]	; (8009318 <__ieee754_atan2f+0x128>)
 8009272:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009276:	edd4 7a00 	vldr	s15, [r4]
 800927a:	e7cc      	b.n	8009216 <__ieee754_atan2f+0x26>
 800927c:	2c02      	cmp	r4, #2
 800927e:	d841      	bhi.n	8009304 <__ieee754_atan2f+0x114>
 8009280:	4b26      	ldr	r3, [pc, #152]	; (800931c <__ieee754_atan2f+0x12c>)
 8009282:	e7f6      	b.n	8009272 <__ieee754_atan2f+0x82>
 8009284:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009288:	d0df      	beq.n	800924a <__ieee754_atan2f+0x5a>
 800928a:	1a5b      	subs	r3, r3, r1
 800928c:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8009290:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8009294:	da1a      	bge.n	80092cc <__ieee754_atan2f+0xdc>
 8009296:	2a00      	cmp	r2, #0
 8009298:	da01      	bge.n	800929e <__ieee754_atan2f+0xae>
 800929a:	313c      	adds	r1, #60	; 0x3c
 800929c:	db19      	blt.n	80092d2 <__ieee754_atan2f+0xe2>
 800929e:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80092a2:	f000 f919 	bl	80094d8 <fabsf>
 80092a6:	f000 f843 	bl	8009330 <atanf>
 80092aa:	eef0 7a40 	vmov.f32	s15, s0
 80092ae:	2c01      	cmp	r4, #1
 80092b0:	d012      	beq.n	80092d8 <__ieee754_atan2f+0xe8>
 80092b2:	2c02      	cmp	r4, #2
 80092b4:	d017      	beq.n	80092e6 <__ieee754_atan2f+0xf6>
 80092b6:	2c00      	cmp	r4, #0
 80092b8:	d0ad      	beq.n	8009216 <__ieee754_atan2f+0x26>
 80092ba:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8009320 <__ieee754_atan2f+0x130>
 80092be:	ee77 7a80 	vadd.f32	s15, s15, s0
 80092c2:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8009324 <__ieee754_atan2f+0x134>
 80092c6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80092ca:	e7a4      	b.n	8009216 <__ieee754_atan2f+0x26>
 80092cc:	eddf 7a10 	vldr	s15, [pc, #64]	; 8009310 <__ieee754_atan2f+0x120>
 80092d0:	e7ed      	b.n	80092ae <__ieee754_atan2f+0xbe>
 80092d2:	eddf 7a15 	vldr	s15, [pc, #84]	; 8009328 <__ieee754_atan2f+0x138>
 80092d6:	e7ea      	b.n	80092ae <__ieee754_atan2f+0xbe>
 80092d8:	ee17 3a90 	vmov	r3, s15
 80092dc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80092e0:	ee07 3a90 	vmov	s15, r3
 80092e4:	e797      	b.n	8009216 <__ieee754_atan2f+0x26>
 80092e6:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8009320 <__ieee754_atan2f+0x130>
 80092ea:	ee77 7a80 	vadd.f32	s15, s15, s0
 80092ee:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8009324 <__ieee754_atan2f+0x134>
 80092f2:	ee70 7a67 	vsub.f32	s15, s0, s15
 80092f6:	e78e      	b.n	8009216 <__ieee754_atan2f+0x26>
 80092f8:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8009324 <__ieee754_atan2f+0x134>
 80092fc:	e78b      	b.n	8009216 <__ieee754_atan2f+0x26>
 80092fe:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800932c <__ieee754_atan2f+0x13c>
 8009302:	e788      	b.n	8009216 <__ieee754_atan2f+0x26>
 8009304:	eddf 7a08 	vldr	s15, [pc, #32]	; 8009328 <__ieee754_atan2f+0x138>
 8009308:	e785      	b.n	8009216 <__ieee754_atan2f+0x26>
 800930a:	bf00      	nop
 800930c:	c0490fdb 	.word	0xc0490fdb
 8009310:	3fc90fdb 	.word	0x3fc90fdb
 8009314:	bfc90fdb 	.word	0xbfc90fdb
 8009318:	08009a0c 	.word	0x08009a0c
 800931c:	08009a18 	.word	0x08009a18
 8009320:	33bbbd2e 	.word	0x33bbbd2e
 8009324:	40490fdb 	.word	0x40490fdb
 8009328:	00000000 	.word	0x00000000
 800932c:	3f490fdb 	.word	0x3f490fdb

08009330 <atanf>:
 8009330:	b538      	push	{r3, r4, r5, lr}
 8009332:	ee10 5a10 	vmov	r5, s0
 8009336:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800933a:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800933e:	eef0 7a40 	vmov.f32	s15, s0
 8009342:	db10      	blt.n	8009366 <atanf+0x36>
 8009344:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8009348:	dd04      	ble.n	8009354 <atanf+0x24>
 800934a:	ee70 7a00 	vadd.f32	s15, s0, s0
 800934e:	eeb0 0a67 	vmov.f32	s0, s15
 8009352:	bd38      	pop	{r3, r4, r5, pc}
 8009354:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800948c <atanf+0x15c>
 8009358:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8009490 <atanf+0x160>
 800935c:	2d00      	cmp	r5, #0
 800935e:	bfd8      	it	le
 8009360:	eef0 7a40 	vmovle.f32	s15, s0
 8009364:	e7f3      	b.n	800934e <atanf+0x1e>
 8009366:	4b4b      	ldr	r3, [pc, #300]	; (8009494 <atanf+0x164>)
 8009368:	429c      	cmp	r4, r3
 800936a:	dc10      	bgt.n	800938e <atanf+0x5e>
 800936c:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8009370:	da0a      	bge.n	8009388 <atanf+0x58>
 8009372:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8009498 <atanf+0x168>
 8009376:	ee30 7a07 	vadd.f32	s14, s0, s14
 800937a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800937e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8009382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009386:	dce2      	bgt.n	800934e <atanf+0x1e>
 8009388:	f04f 33ff 	mov.w	r3, #4294967295
 800938c:	e013      	b.n	80093b6 <atanf+0x86>
 800938e:	f000 f8a3 	bl	80094d8 <fabsf>
 8009392:	4b42      	ldr	r3, [pc, #264]	; (800949c <atanf+0x16c>)
 8009394:	429c      	cmp	r4, r3
 8009396:	dc4f      	bgt.n	8009438 <atanf+0x108>
 8009398:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800939c:	429c      	cmp	r4, r3
 800939e:	dc41      	bgt.n	8009424 <atanf+0xf4>
 80093a0:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80093a4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80093a8:	eea0 7a27 	vfma.f32	s14, s0, s15
 80093ac:	2300      	movs	r3, #0
 80093ae:	ee30 0a27 	vadd.f32	s0, s0, s15
 80093b2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80093b6:	1c5a      	adds	r2, r3, #1
 80093b8:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80093bc:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80094a0 <atanf+0x170>
 80093c0:	eddf 5a38 	vldr	s11, [pc, #224]	; 80094a4 <atanf+0x174>
 80093c4:	ed9f 5a38 	vldr	s10, [pc, #224]	; 80094a8 <atanf+0x178>
 80093c8:	ee66 6a06 	vmul.f32	s13, s12, s12
 80093cc:	eee6 5a87 	vfma.f32	s11, s13, s14
 80093d0:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80094ac <atanf+0x17c>
 80093d4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80093d8:	eddf 5a35 	vldr	s11, [pc, #212]	; 80094b0 <atanf+0x180>
 80093dc:	eee7 5a26 	vfma.f32	s11, s14, s13
 80093e0:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80094b4 <atanf+0x184>
 80093e4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80093e8:	eddf 5a33 	vldr	s11, [pc, #204]	; 80094b8 <atanf+0x188>
 80093ec:	eee7 5a26 	vfma.f32	s11, s14, s13
 80093f0:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80094bc <atanf+0x18c>
 80093f4:	eea6 5a87 	vfma.f32	s10, s13, s14
 80093f8:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80094c0 <atanf+0x190>
 80093fc:	eea5 7a26 	vfma.f32	s14, s10, s13
 8009400:	ed9f 5a30 	vldr	s10, [pc, #192]	; 80094c4 <atanf+0x194>
 8009404:	eea7 5a26 	vfma.f32	s10, s14, s13
 8009408:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80094c8 <atanf+0x198>
 800940c:	eea5 7a26 	vfma.f32	s14, s10, s13
 8009410:	ee27 7a26 	vmul.f32	s14, s14, s13
 8009414:	eea5 7a86 	vfma.f32	s14, s11, s12
 8009418:	ee27 7a87 	vmul.f32	s14, s15, s14
 800941c:	d121      	bne.n	8009462 <atanf+0x132>
 800941e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009422:	e794      	b.n	800934e <atanf+0x1e>
 8009424:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8009428:	ee30 7a67 	vsub.f32	s14, s0, s15
 800942c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009430:	2301      	movs	r3, #1
 8009432:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8009436:	e7be      	b.n	80093b6 <atanf+0x86>
 8009438:	4b24      	ldr	r3, [pc, #144]	; (80094cc <atanf+0x19c>)
 800943a:	429c      	cmp	r4, r3
 800943c:	dc0b      	bgt.n	8009456 <atanf+0x126>
 800943e:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8009442:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009446:	eea0 7a27 	vfma.f32	s14, s0, s15
 800944a:	2302      	movs	r3, #2
 800944c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8009450:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009454:	e7af      	b.n	80093b6 <atanf+0x86>
 8009456:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800945a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800945e:	2303      	movs	r3, #3
 8009460:	e7a9      	b.n	80093b6 <atanf+0x86>
 8009462:	4a1b      	ldr	r2, [pc, #108]	; (80094d0 <atanf+0x1a0>)
 8009464:	491b      	ldr	r1, [pc, #108]	; (80094d4 <atanf+0x1a4>)
 8009466:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800946a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800946e:	ed93 0a00 	vldr	s0, [r3]
 8009472:	ee37 7a40 	vsub.f32	s14, s14, s0
 8009476:	ed92 0a00 	vldr	s0, [r2]
 800947a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800947e:	2d00      	cmp	r5, #0
 8009480:	ee70 7a67 	vsub.f32	s15, s0, s15
 8009484:	bfb8      	it	lt
 8009486:	eef1 7a67 	vneglt.f32	s15, s15
 800948a:	e760      	b.n	800934e <atanf+0x1e>
 800948c:	3fc90fdb 	.word	0x3fc90fdb
 8009490:	bfc90fdb 	.word	0xbfc90fdb
 8009494:	3edfffff 	.word	0x3edfffff
 8009498:	7149f2ca 	.word	0x7149f2ca
 800949c:	3f97ffff 	.word	0x3f97ffff
 80094a0:	3c8569d7 	.word	0x3c8569d7
 80094a4:	3d4bda59 	.word	0x3d4bda59
 80094a8:	bd6ef16b 	.word	0xbd6ef16b
 80094ac:	3d886b35 	.word	0x3d886b35
 80094b0:	3dba2e6e 	.word	0x3dba2e6e
 80094b4:	3e124925 	.word	0x3e124925
 80094b8:	3eaaaaab 	.word	0x3eaaaaab
 80094bc:	bd15a221 	.word	0xbd15a221
 80094c0:	bd9d8795 	.word	0xbd9d8795
 80094c4:	bde38e38 	.word	0xbde38e38
 80094c8:	be4ccccd 	.word	0xbe4ccccd
 80094cc:	401bffff 	.word	0x401bffff
 80094d0:	08009a24 	.word	0x08009a24
 80094d4:	08009a34 	.word	0x08009a34

080094d8 <fabsf>:
 80094d8:	ee10 3a10 	vmov	r3, s0
 80094dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80094e0:	ee00 3a10 	vmov	s0, r3
 80094e4:	4770      	bx	lr
	...

080094e8 <_init>:
 80094e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094ea:	bf00      	nop
 80094ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094ee:	bc08      	pop	{r3}
 80094f0:	469e      	mov	lr, r3
 80094f2:	4770      	bx	lr

080094f4 <_fini>:
 80094f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094f6:	bf00      	nop
 80094f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094fa:	bc08      	pop	{r3}
 80094fc:	469e      	mov	lr, r3
 80094fe:	4770      	bx	lr
